var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.151,1,2.122]],["body/controllers/AppController.html",[0,1.906,1,3.512,2,1.56,3,0.444,4,0.39,5,0.39,6,3.698,7,0.542,8,0.03,9,1.054,10,3.113,11,3.698,12,0.444,13,0.09,14,4.414,15,1.827,16,0.025,17,0.025]],["title/modules/AppModule.html",[18,1.151,19,2.122]],["body/modules/AppModule.html",[1,3.091,2,1.449,3,0.293,4,0.257,5,0.257,7,0.594,8,0.03,9,0.695,10,3.011,11,2.44,12,0.293,13,0.06,16,0.019,17,0.019,18,1.677,19,4.108,20,1.308,21,1.308,22,1.556,23,1.556,24,1.308,25,2.537,26,1.556,27,2.44,28,2.44,29,2.44,30,3.011,31,3.31,32,3.31,33,2.755,34,2.192,35,1.556,36,1.424,37,2.912,38,2.409,39,1.896,40,1.029,41,2.912,42,2.912,43,2.912,44,2.912,45,2.912,46,2.912,47,2.912,48,2.912,49,2.44,50,2.44]],["title/injectables/AppService.html",[10,1.741,51,1.151]],["body/injectables/AppService.html",[3,0.426,4,0.374,5,0.374,7,0.426,8,0.03,9,1.012,10,2.811,12,0.426,13,0.087,16,0.024,17,0.024,51,1.858,52,2.265,53,3.55,54,0.656,55,2.363,56,5.98,57,0.932,58,4.237,59,1.904,60,1.858,61,1.904,62,4.237,63,4.237]],["title/controllers/AuthController.html",[0,1.151,64,2.122]],["body/controllers/AuthController.html",[0,1.454,2,1.454,3,0.414,4,0.363,5,0.363,7,0.567,8,0.03,9,0.982,12,0.414,13,0.084,15,1.703,16,0.024,17,0.024,64,3.362,65,3.447,66,2.679,67,4.114,68,2.894,69,3.447,70,2.679,71,1.848,72,4.114,73,4.114,74,1.848,75,2.012,76,1.848]],["title/modules/AuthModule.html",[18,1.151,30,1.741]],["body/modules/AuthModule.html",[2,1.644,3,0.352,4,0.309,5,0.309,7,0.56,8,0.03,9,0.836,12,0.352,13,0.072,16,0.021,17,0.021,18,1.846,20,1.573,21,1.573,22,1.872,23,1.872,24,1.573,25,2.793,26,2.793,30,3.249,33,2.275,34,2.487,35,1.872,36,1.713,38,2.057,64,3.403,68,3.133,69,2.934,77,2.934,78,2.934,79,2.934,80,3.502,81,3.03,82,3.502,83,2.934]],["title/injectables/AuthService.html",[51,1.151,68,1.593]],["body/injectables/AuthService.html",[3,0.308,4,0.27,5,0.27,7,0.427,8,0.03,9,0.73,12,0.308,13,0.063,15,1.267,16,0.019,17,0.019,51,1.5,52,1.635,54,0.473,55,1.907,57,1.073,59,1.907,60,2.174,61,1.907,68,2.076,74,1.907,75,2.076,76,1.375,81,1.992,84,2.563,85,2.799,86,5.265,87,4.874,88,2.563,89,2.688,90,3.059,91,2.076,92,1.387,93,0.934,94,1.387,95,3.059,96,3.059,97,4.245,98,3.563,99,2.864,100,3.059,101,2.236,102,2.563,103,2.563,104,1.496,105,1.267,106,3.059,107,3.059,108,1.797]],["title/classes/CreatePostDto.html",[13,0.067,109,1.741]],["body/classes/CreatePostDto.html",[3,0.185,4,0.162,5,0.162,7,0.412,8,0.03,12,0.185,13,0.06,16,0.013,17,0.013,54,0.284,57,1.166,60,1.989,71,0.826,93,1.166,94,1.683,108,1.707,109,1.553,110,0.649,111,3.967,112,1.344,113,1.027,114,2.346,115,3.019,116,3.019,117,3.763,118,3.019,119,2.904,120,2.117,121,2.634,122,3.019,123,1.732,124,1.838,125,1.838,126,1.838,127,1.838,128,1.838,129,1.838,130,2.905,131,2.534,132,4.094,133,4.094,134,1.027,135,1.892,136,2.434,137,1.838,138,1.838,139,2.434,140,2.905,141,2.905,142,2.905,143,2.905,144,3.466,145,2.905,146,2.905,147,1.838,148,1.838,149,1.838,150,3.43,151,3.43,152,2.434,153,2.434,154,2.434,155,2.434,156,2.434,157,2.434,158,3.019,159,1.838,160,3.26,161,2.434,162,2.434,163,2.434,164,1.838,165,1.838,166,1.838,167,1.838,168,1.838,169,1.838,170,3.763,171,3.019,172,2.905,173,1.838,174,2.905,175,2.785,176,3.26,177,3.087,178,2.905,179,1.54,180,1.344,181,0.899,182,2.434,183,1.54,184,1.54,185,1.838,186,2.434,187,1.54,188,1.838,189,1.54,190,1.54,191,1.838,192,1.838,193,1.838]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.067,194,2.382]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.387,4,0.34,5,0.34,7,0.387,8,0.029,12,0.387,13,0.101,16,0.023,17,0.023,54,0.596,57,1.09,60,1.75,93,1.09,110,1.361,111,4,113,1.75,123,1.619,134,1.934,175,3.394,177,3.225,181,1.884,194,3.62,195,4.585,196,3.227,197,5.472,198,3.564,199,3.227,200,3.852,201,3.852]],["title/classes/CreateTagDto.html",[13,0.067,202,1.914]],["body/classes/CreateTagDto.html",[3,0.323,4,0.284,5,0.284,7,0.441,8,0.03,12,0.323,13,0.09,16,0.02,17,0.02,54,0.497,57,0.965,60,1.899,71,1.442,92,1.634,93,0.965,110,1.134,113,1.55,119,3.664,123,1.434,144,3.207,150,4.502,151,4.502,152,3.676,153,3.676,154,3.676,155,3.676,156,3.676,157,3.676,158,2.689,170,3.654,171,2.689,175,2.937,177,3.255,179,2.689,180,2.346,181,1.57,189,2.689,202,2.578,203,4.188,204,2.689,205,3.21,206,3.21,207,3.21,208,3.21,209,3.21,210,2.689,211,2.689,212,3.21,213,3.21]],["title/classes/CreateUserDto.html",[13,0.067,214,1.741]],["body/classes/CreateUserDto.html",[3,0.331,4,0.291,5,0.291,7,0.331,8,0.029,12,0.331,13,0.092,16,0.02,17,0.02,54,0.51,57,1.196,60,2.152,93,1.196,94,1.461,98,3.705,101,3.705,110,1.165,113,1.579,123,1.776,175,3.192,176,3.266,177,3.538,180,2.41,181,1.613,199,2.763,210,2.763,211,3.744,214,2.388,215,4.758,216,2.41,217,4.247,218,4.247,219,3.297,220,3.297,221,3.297,222,3.297,223,3.297,224,3.297,225,3.297,226,4.468,227,4.468]],["title/classes/GetUsersParamDto.html",[13,0.067,228,1.914]],["body/classes/GetUsersParamDto.html",[3,0.396,4,0.348,5,0.348,7,0.505,8,0.03,12,0.396,13,0.113,16,0.023,17,0.023,54,0.61,57,0.867,93,1.217,94,1.643,99,3.25,105,2.08,110,1.393,113,1.776,123,1.288,176,3.673,181,1.928,228,2.952,229,4.21,230,3.302,231,3.602,232,3.942,233,3.942,234,4.21,235,3.302]],["title/classes/PatchPostDto.html",[13,0.067,236,2.122]],["body/classes/PatchPostDto.html",[3,0.389,4,0.342,5,0.342,7,0.551,8,0.03,12,0.389,13,0.102,16,0.023,17,0.023,54,0.599,57,0.852,71,1.739,93,0.852,99,3.222,109,2.068,110,1.367,112,2.829,113,1.755,123,1.265,170,3.63,175,2.918,181,1.892,231,3.234,234,4.161,236,3.234,237,4.161,238,2.918,239,4.966,240,3.87,241,3.87,242,2.52,243,2.829,244,3.242]],["title/classes/PatchUserDto.html",[13,0.067,245,2.122]],["body/classes/PatchUserDto.html",[3,0.444,4,0.39,5,0.39,7,0.542,8,0.029,12,0.444,13,0.09,16,0.025,17,0.025,110,1.56,214,2.359,216,3.227,238,3.168,242,2.875,244,3.698,245,3.512,246,3.698,247,5.393,248,3.227,249,3.698,250,3.698]],["title/classes/Post.html",[13,0.067,134,1.151]],["body/classes/Post.html",[3,0.195,4,0.172,5,0.172,7,0.488,8,0.03,12,0.305,13,0.04,16,0.014,17,0.014,40,0.687,54,0.301,57,1.187,60,2.17,93,1.343,94,1.715,104,0.95,105,1.546,108,3.083,110,0.687,113,1.073,114,2.432,115,3.129,116,3.129,117,3.836,118,3.129,119,2.432,120,2.194,121,2.73,122,3.129,123,1.763,134,1.073,139,3.537,160,3.348,182,2.543,183,1.628,184,1.628,186,3.537,238,1.142,251,1.421,252,3.942,253,4.58,254,3.735,255,1.943,256,4.281,257,3.548,258,1.943,259,1.943,260,2.749,261,1.943,262,1.943,263,1.943,264,1.943,265,1.827,266,1.943,267,1.943,268,4.031,269,1.622,270,1.421,271,1.485,272,2.219,273,1.943,274,1.943,275,1.943,276,1.943,277,3.036,278,1.628,279,1.628,280,1.266,281,1.628]],["title/controllers/PostsController.html",[0,1.151,282,2.122]],["body/controllers/PostsController.html",[0,0.809,2,0.809,3,0.23,4,0.202,5,0.202,7,0.496,8,0.03,9,0.547,12,0.23,13,0.047,15,0.948,16,0.016,17,0.016,49,3.466,54,0.354,55,1.547,57,0.91,59,1.859,61,1.547,66,1.491,70,1.491,71,1.029,74,1.029,76,1.029,85,2.766,91,1.684,92,1.125,93,0.758,94,1.125,109,2.769,120,2.023,123,1.352,131,2.459,134,2.036,236,2.996,243,2.517,282,2.242,283,1.919,284,3.443,285,2.884,286,4.6,287,3.443,288,1.919,289,3.443,290,2.884,291,1.684,292,2.29,293,3.363,294,4.6,295,4.6,296,2.517,297,2.29,298,2.29,299,2.29,300,2.29,301,2.517,302,3.443,303,2.29,304,2.884,305,3.443,306,2.884,307,2.29,308,2.29,309,3.443,310,2.29,311,1.674,312,1.919,313,2.884,314,2.211,315,1.919,316,3.024,317,3.024,318,1.224,319,1.919,320,2.29,321,2.29,322,1.919,323,1.919,324,2.29,325,2.29,326,2.517,327,2.517,328,2.29,329,2.29,330,1.919,331,2.29,332,2.29]],["title/modules/PostsModule.html",[18,1.151,31,1.914]],["body/modules/PostsModule.html",[2,1.575,3,0.33,4,0.29,5,0.29,7,0.588,8,0.03,9,0.784,12,0.33,13,0.067,16,0.02,17,0.02,18,1.787,20,1.476,21,1.476,22,1.756,23,1.756,24,1.476,25,2.704,26,1.756,31,3.575,33,2.86,34,2.382,35,1.756,36,1.606,38,2.618,39,2.139,40,1.161,83,2.752,92,1.074,134,1.161,269,1.756,280,2.902,282,3.294,314,3.126,315,2.752,333,2.752,334,3.285,335,2.752,336,3.285,337,2.752,338,3.285,339,2.401,340,3.285]],["title/injectables/PostsService.html",[51,1.151,314,1.741]],["body/injectables/PostsService.html",[3,0.277,4,0.243,5,0.243,7,0.556,8,0.03,9,0.657,12,0.277,13,0.056,15,1.631,16,0.018,17,0.018,40,0.972,51,1.392,52,1.47,54,0.426,55,1.77,57,1.012,59,1.77,61,1.77,74,1.77,75,1.345,76,1.77,85,2.704,88,2.305,89,2.485,91,1.926,92,1.287,93,0.867,94,1.287,102,2.305,104,1.345,109,2.841,134,0.972,243,2.011,271,1.345,285,3.3,288,3.3,291,1.345,314,2.105,318,1.47,322,2.305,323,2.305,337,2.305,341,2.305,342,4.042,343,5.023,344,5.023,345,3.672,346,2.751,347,2.751,348,3.3,349,2.751,350,2.011,351,2.011,352,2.751,353,2.751,354,2.751,355,2.879,356,2.751,357,2.751,358,2.305,359,2.751,360,2.751,361,2.305]],["title/classes/Tag.html",[13,0.067,265,1.593]],["body/classes/Tag.html",[3,0.354,4,0.311,5,0.311,7,0.469,8,0.03,12,0.469,13,0.072,16,0.021,17,0.021,40,1.242,54,0.544,57,1.027,60,2.184,92,1.711,93,1.227,104,1.72,108,3.276,110,1.242,113,1.648,119,3.41,123,1.525,238,2.066,252,3.41,256,4.076,265,2.282,268,3.827,269,2.494,270,2.57,271,1.72,272,3.41,362,2.57,363,3.516,364,3.516,365,2.29,366,2.946]],["title/controllers/TagsController.html",[0,1.151,367,2.122]],["body/controllers/TagsController.html",[0,1.109,2,1.109,3,0.316,4,0.277,5,0.277,7,0.535,8,0.03,9,0.749,12,0.316,13,0.064,15,1.299,16,0.02,17,0.02,54,0.486,55,1.941,57,0.691,59,1.41,61,1.41,66,2.044,70,2.044,71,1.41,74,1.41,75,1.535,76,1.41,85,2.416,91,1.535,92,1.026,93,0.691,94,1.026,120,1.844,121,2.294,123,1.026,131,2.309,134,1.527,202,3.389,242,2.814,265,2.416,291,2.113,293,3.158,296,3.158,311,2.294,316,3.158,317,3.158,318,1.677,326,2.294,327,3.158,367,2.814,368,2.63,369,3.62,370,2.63,371,2.63,372,3.139,373,3.139,374,2.845,375,2.63,376,2.63,377,3.139,378,3.139,379,3.139,380,3.139]],["title/modules/TagsModule.html",[18,1.151,32,1.914]],["body/modules/TagsModule.html",[2,1.639,3,0.351,4,0.308,5,0.308,7,0.582,8,0.03,9,0.833,12,0.351,13,0.071,16,0.021,17,0.021,18,1.842,20,1.567,21,1.567,22,1.864,23,1.864,24,1.567,25,2.787,26,1.864,32,3.496,34,2.48,35,1.864,36,1.705,38,2.049,39,2.271,40,1.232,92,1.14,265,1.705,269,1.864,279,2.922,339,2.549,365,3.022,367,3.396,374,3.181,375,2.922,381,2.922,382,2.922,383,3.487,384,3.487,385,2.922]],["title/injectables/TagsService.html",[51,1.151,374,1.741]],["body/injectables/TagsService.html",[3,0.321,4,0.282,5,0.282,7,0.565,8,0.03,9,0.763,12,0.321,13,0.066,15,1.324,16,0.02,17,0.02,40,1.13,51,1.546,52,1.709,54,0.495,55,1.966,57,0.963,59,1.437,61,1.437,74,1.966,75,1.564,76,1.437,85,2.44,91,2.14,92,1.43,93,0.963,94,1.43,104,1.564,202,3.301,265,1.564,271,1.564,291,1.564,318,1.709,342,3.647,345,3.922,348,2.679,350,2.338,355,2.338,369,3.666,370,3.666,374,2.339,376,2.679,385,2.679,386,2.679,387,3.198,388,3.198,389,4.989,390,3.198,391,3.198,392,3.198,393,3.198,394,3.198]],["title/classes/User.html",[13,0.067,105,1.349]],["body/classes/User.html",[3,0.29,4,0.255,5,0.255,7,0.409,8,0.03,12,0.409,13,0.059,16,0.019,17,0.019,40,1.018,54,0.446,57,1.129,60,2.251,93,1.297,94,1.331,98,3.451,99,1.693,101,3.451,104,1.41,105,1.685,108,3.299,110,1.018,113,1.439,123,1.677,217,3.955,218,3.955,238,1.693,252,3.749,256,4.309,257,2.976,260,1.877,268,3.955,269,2.176,270,2.107,271,1.991,272,2.976,395,2.107,396,2.882,397,2.882,398,2.882,399,2.882,400,2.882,401,2.882,402,2.415,403,2.882,404,2.882,405,1.877,406,2.415]],["title/controllers/UsersController.html",[0,1.151,407,2.122]],["body/controllers/UsersController.html",[0,0.624,2,0.624,3,0.177,4,0.156,5,0.156,7,0.468,8,0.03,9,0.421,12,0.177,13,0.036,15,0.731,16,0.013,17,0.013,50,2.357,54,0.273,55,1.264,57,0.772,59,1.576,60,1.414,61,2.196,66,1.15,70,1.15,71,0.793,74,0.793,75,0.863,76,0.793,85,2.558,89,1.798,91,1.716,92,1.429,93,1.075,94,1.147,105,2.165,120,2.061,123,1.147,131,2.865,134,0.994,135,3.304,214,2.49,228,2.351,231,3.304,245,3.304,248,2.057,257,2.057,290,2.357,291,1.957,293,2.057,296,2.057,301,2.057,304,3.353,306,2.357,311,1.29,312,2.357,313,2.357,316,2.926,317,2.926,318,0.943,319,1.479,326,2.565,327,3.405,351,3.196,371,1.479,407,1.832,408,1.479,409,2.357,410,2.939,411,2.814,412,1.479,413,2.814,414,1.765,415,1.765,416,4.251,417,1.765,418,2.814,419,2.814,420,2.814,421,1.765,422,2.814,423,2.814,424,4.002,425,2.814,426,4.002,427,1.765,428,2.814,429,1.765,430,2.814,431,2.814,432,3.508,433,1.765,434,2.814,435,1.765,436,1.765,437,1.765,438,1.765,439,3.508,440,1.479,441,1.479,442,1.479,443,3.508,444,1.765,445,1.765,446,1.765,447,2.939,448,1.765,449,1.765,450,1.765,451,1.765,452,1.765,453,1.765,454,1.765,455,1.765]],["title/modules/UsersModule.html",[18,1.151,33,1.593]],["body/modules/UsersModule.html",[2,1.554,3,0.324,4,0.285,5,0.285,7,0.585,8,0.03,9,0.769,12,0.324,13,0.066,16,0.02,17,0.02,18,1.77,20,1.448,21,1.448,22,1.722,23,1.722,24,1.448,25,2.677,26,2.677,30,2.351,33,2.911,34,2.351,35,1.722,36,1.576,38,1.893,39,2.098,40,1.139,81,2.865,89,2.841,92,1.053,105,1.334,269,1.722,278,2.7,339,2.355,405,2.865,407,3.262,440,2.7,456,2.7,457,2.7,458,2.7,459,3.222,460,2.7,461,3.222,462,3.222]],["title/injectables/UsersService.html",[51,1.151,89,1.464]],["body/injectables/UsersService.html",[3,0.213,4,0.188,5,0.188,7,0.526,8,0.03,9,0.507,12,0.213,13,0.044,15,1.346,16,0.015,17,0.015,40,0.75,51,1.149,52,1.135,54,0.329,55,1.461,57,0.974,59,1.775,60,1.396,61,1.775,68,2.642,74,1.461,75,1.932,76,1.461,81,1.383,85,2.708,89,1.461,91,2.164,92,1.447,93,0.974,94,1.447,99,1.91,103,1.779,104,1.039,105,2.083,135,2.572,198,1.383,214,2.55,228,2.956,231,3.277,242,2.117,248,1.552,260,1.383,271,1.039,291,1.932,318,1.135,330,2.724,342,3.678,345,3.235,350,1.552,351,2.377,355,2.377,358,3.309,361,1.779,402,1.779,409,2.724,410,3.309,412,2.724,416,3.708,441,1.779,442,1.779,460,1.779,463,1.779,464,3.251,465,2.124,466,3.95,467,2.124,468,2.124,469,4.426,470,3.251,471,2.124,472,2.124,473,2.124,474,2.724,475,3.95,476,2.124,477,2.124,478,2.124,479,2.124,480,2.124,481,2.124,482,2.124,483,2.124,484,2.124,485,2.124]],["title/coverage.html",[486,3.24]],["body/coverage.html",[0,1.832,1,1.682,5,0.228,6,2.164,8,0.03,10,1.381,13,0.122,16,0.017,17,0.017,24,1.161,51,1.832,53,2.164,64,1.682,65,2.164,68,1.263,84,2.164,89,1.161,93,0.569,105,1.558,109,1.381,111,2.751,112,2.751,134,1.33,194,1.889,195,2.164,196,2.164,202,1.518,203,2.164,204,2.164,214,1.381,215,2.164,216,2.751,228,1.518,229,2.164,230,2.164,236,1.682,237,2.164,245,1.682,246,2.164,251,2.751,265,1.263,280,1.682,282,1.682,283,2.164,291,1.263,314,1.381,341,2.164,362,2.751,365,1.682,367,1.682,368,2.164,374,1.381,386,2.164,395,2.751,405,1.682,407,1.682,408,2.164,463,2.164,486,1.889,487,2.164,488,2.583,489,2.583,490,6.457,491,5.587,492,4.878,493,4.878,494,2.164,495,2.583,496,4.878,497,3.764,498,4.44,499,3.764,500,2.583,501,2.583,502,2.583,503,2.583]],["title/dependencies.html",[21,1.759,504,2.285]],["body/dependencies.html",[8,0.03,9,0.963,13,0.105,16,0.023,17,0.023,21,1.813,40,1.426,71,1.813,181,1.974,235,3.381,249,3.381,250,3.381,271,1.974,505,5.593,506,4.036,507,4.036,508,4.036,509,4.036,510,4.036,511,4.036,512,4.036,513,4.036,514,4.036,515,4.036,516,4.036,517,4.036,518,4.036,519,4.036,520,4.036,521,4.036,522,4.036,523,4.036]],["title/miscellaneous/enumerations.html",[524,1.458,525,3.28]],["body/miscellaneous/enumerations.html",[8,0.029,16,0.023,17,0.023,54,0.618,117,3.706,134,1.792,135,3.302,136,4.248,160,3.706,161,4.248,162,4.248,163,4.248,187,4.248,190,4.248,198,4.134,524,2.137,525,3.349,526,5.07,527,5.07,528,5.07,529,5.07]],["title/miscellaneous/functions.html",[524,1.458,530,3.28]],["body/miscellaneous/functions.html",[8,0.026,16,0.026,17,0.026,24,2.736,54,0.758,494,4.105,524,2.618,530,4.105,531,4.899]],["title/index.html",[54,0.422,532,2.728,533,2.728]],["body/index.html",[4,0.225,8,0.028,16,0.017,17,0.017,36,2.372,114,1.662,131,1.364,144,3.223,301,1.866,447,3.126,486,1.866,487,2.138,534,2.552,535,2.552,536,4.409,537,2.552,538,2.552,539,2.552,540,2.552,541,2.552,542,2.552,543,4.409,544,2.552,545,2.552,546,2.552,547,4.85,548,2.552,549,5.566,550,2.552,551,5.566,552,2.552,553,2.552,554,2.552,555,3.731,556,2.552,557,2.552,558,2.552,559,4.409,560,2.552,561,3.731,562,2.552,563,2.552,564,2.552,565,4.85,566,2.552,567,2.552,568,2.552,569,2.552,570,2.552,571,4.85,572,3.731,573,2.552,574,4.409,575,2.552,576,4.064,577,3.731,578,2.552,579,2.552,580,2.552,581,2.552,582,2.552,583,2.552,584,4.409,585,2.552,586,2.552,587,2.552,588,2.552,589,2.552,590,2.552,591,4.409,592,2.552,593,2.552,594,2.552,595,2.552,596,2.552,597,2.552,598,2.552,599,3.731,600,2.552,601,2.552,602,2.552,603,2.552,604,2.552,605,3.731,606,2.552,607,2.552,608,2.552,609,3.731,610,3.731,611,2.552,612,2.552,613,2.552,614,2.552,615,2.552,616,2.552,617,2.552,618,2.552,619,2.552,620,2.552,621,2.552,622,2.552,623,2.552,624,2.552,625,2.552,626,2.552,627,2.552,628,2.138]],["title/modules.html",[20,1.991]],["body/modules.html",[8,0.025,16,0.025,17,0.025,19,2.89,20,1.994,30,2.372,31,2.607,32,2.607,33,2.17,576,5.22,629,6.23,630,6.23,631,6.23]],["title/overview.html",[632,3.713]],["body/overview.html",[2,1.109,8,0.029,10,2.641,16,0.02,17,0.02,18,1.109,19,4.1,20,1.41,21,1.41,22,1.677,23,1.677,24,1.41,25,1.677,26,1.677,27,2.63,28,2.63,29,2.63,30,3.083,31,3.472,32,3.279,33,2.89,34,2.309,35,1.677,36,1.535,52,1.677,68,2.89,77,2.63,78,2.63,79,2.63,89,2.655,110,1.109,314,2.641,333,2.63,335,2.63,374,2.641,381,2.63,382,2.63,456,2.63,457,2.63,458,2.63,474,2.63,632,2.63,633,4.94]],["title/properties.html",[113,1.383,504,2.285]],["body/properties.html",[8,0.029,16,0.026,17,0.026,113,1.702,114,3.136,131,2.574,628,4.035,634,4.815,635,4.815,636,4.815]],["title/miscellaneous/variables.html",[524,1.458,637,3.28]],["body/miscellaneous/variables.html",[8,0.028,16,0.025,17,0.025,54,0.683,198,3.792,251,3.227,260,3.792,280,3.512,281,3.698,362,3.227,365,3.512,366,3.698,395,3.227,405,3.512,406,3.698,524,2.359,637,3.698,638,4.414,639,4.414,640,4.414]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":490,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":635,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":515,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":521,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":514,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":491,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":497,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":492,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":496,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":493,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":499,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":475,"title":{},"body":{"injectables/UsersService.html":{}}}],["10",{"_index":474,"title":{},"body":{"injectables/UsersService.html":{},"overview.html":{}}}],["10.0.0",{"_index":505,"title":{},"body":{"dependencies.html":{}}}],["10.0.10",{"_index":508,"title":{},"body":{"dependencies.html":{}}}],["16t07:46:32+0000",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.13.3",{"_index":517,"title":{},"body":{"dependencies.html":{}}}],["2.0.5",{"_index":507,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":304,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":293,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["2024",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["20o",{"_index":305,"title":{},"body":{"controllers/PostsController.html":{}}}],["3/5",{"_index":501,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":633,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":513,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":500,"title":{},"body":{"coverage.html":{}}}],["7.4.0",{"_index":511,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":523,"title":{},"body":{"dependencies.html":{}}}],["8.6.0",{"_index":518,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["_id",{"_index":402,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{}}}],["added",{"_index":403,"title":{},"body":{"classes/User.html":{}}}],["amazing",{"_index":615,"title":{},"body":{"index.html":{}}}],["api",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":289,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isarray()@isoptional()@isstring({each",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty()@isint()@isnotempty",{"_index":240,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["apiproperty()@isstring()@isnotempty",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty()@isstring()@isnotempty()@matches(/^[a",{"_index":207,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty()@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":205,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty()@isstring()@minlength(4)@isnotempty",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({description",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({enum",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":443,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":317,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apitags('authentication",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('posts",{"_index":321,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('tags",{"_index":378,"title":{},"body":{"controllers/TagsController.html":{}}}],["apitags('users",{"_index":445,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":447,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application.'})@apiquery({name",{"_index":421,"title":{},"body":{"controllers/UsersController.html":{}}}],["application.'})@apiresponse({status",{"_index":413,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":542,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":342,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":82,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":64,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":114,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{},"index.html":{},"properties.html":{}}}],["authservice",{"_index":68,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":355,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":616,"title":{},"body":{"index.html":{}}}],["based",{"_index":431,"title":{},"body":{"controllers/UsersController.html":{}}}],["bcrypt",{"_index":512,"title":{},"body":{"dependencies.html":{}}}],["blog",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{}}}],["blog.'})@apiresponse({status",{"_index":292,"title":{},"body":{"controllers/PostsController.html":{}}}],["board",{"_index":608,"title":{},"body":{"index.html":{}}}],["body",{"_index":311,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":631,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":629,"title":{},"body":{"modules.html":{}}}],["building",{"_index":537,"title":{},"body":{"index.html":{}}}],["channel",{"_index":579,"title":{},"body":{"index.html":{}}}],["check",{"_index":565,"title":{},"body":{"index.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"classes/Tag.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":110,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"classes/Tag.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":77,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":79,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":333,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":334,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":335,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":381,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":382,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":456,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":457,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":458,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":568,"title":{},"body":{"index.html":{}}}],["console.log(patchpostsdto",{"_index":332,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{},"classes/Post.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":465,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["constructor(tagsmodel",{"_index":387,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(usersservice",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["content",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":320,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":377,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":444,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":586,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":486,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":242,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/TagsController.html":{},"injectables/UsersService.html":{}}}],["created",{"_index":296,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["createpost",{"_index":285,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(@body",{"_index":328,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":288,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":109,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":194,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["creates",{"_index":290,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["createtag",{"_index":369,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createtag(@body",{"_index":379,"title":{},"body":{"controllers/TagsController.html":{}}}],["createtag(createtagdto",{"_index":370,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createtagdto",{"_index":202,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":409,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(@body",{"_index":453,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":412,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":214,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["database",{"_index":330,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UsersService.html":{}}}],["database.'})@apiresponse({status",{"_index":303,"title":{},"body":{"controllers/PostsController.html":{}}}],["date",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{}}}],["dbname",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":581,"title":{},"body":{"index.html":{}}}],["default",{"_index":260,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":438,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":451,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":449,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":57,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":552,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":593,"title":{},"body":{"index.html":{}}}],["discord",{"_index":578,"title":{},"body":{"index.html":{}}}],["dive",{"_index":580,"title":{},"body":{"index.html":{}}}],["document",{"_index":272,"title":{},"body":{"classes/Post.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["documentation",{"_index":487,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":318,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":441,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":319,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":562,"title":{},"body":{"index.html":{}}}],["each",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":538,"title":{},"body":{"index.html":{}}}],["email",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["enterprise",{"_index":598,"title":{},"body":{"index.html":{}}}],["enum",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{}}}],["enumerations",{"_index":525,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/post",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{}}}],["example",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"index.html":{}}}],["exec",{"_index":361,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["existing",{"_index":302,"title":{},"body":{"controllers/PostsController.html":{}}}],["experience",{"_index":583,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":510,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":238,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["false",{"_index":257,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["false})@apiquery({name",{"_index":427,"title":{},"body":{"controllers/UsersController.html":{}}}],["false})@apiresponse({status",{"_index":429,"title":{},"body":{"controllers/UsersController.html":{}}}],["featuredimageurl",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{}}}],["fetched",{"_index":430,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":418,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":566,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["find",{"_index":358,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":343,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyid",{"_index":464,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(_id",{"_index":470,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":217,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["follow",{"_index":601,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":81,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":536,"title":{},"body":{"index.html":{}}}],["full",{"_index":597,"title":{},"body":{"index.html":{}}}],["function",{"_index":495,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":530,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":446,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":417,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethello",{"_index":56,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":286,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":532,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":434,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers",{"_index":410,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers(getuserparamdto",{"_index":415,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":472,"title":{},"body":{"injectables/UsersService.html":{}}}],["getusersparamdto",{"_index":228,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["graph",{"_index":588,"title":{},"body":{"index.html":{}}}],["grow",{"_index":612,"title":{},"body":{"index.html":{}}}],["hands",{"_index":582,"title":{},"body":{"index.html":{}}}],["handy",{"_index":569,"title":{},"body":{"index.html":{}}}],["hello",{"_index":62,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":595,"title":{},"body":{"index.html":{}}}],["here",{"_index":620,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":625,"title":{},"body":{"index.html":{}}}],["id",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":488,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":54,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":51,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":52,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":322,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["injectmodel",{"_index":350,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(post.name",{"_index":352,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectmodel(tag.name",{"_index":391,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectmodel(user.name",{"_index":478,"title":{},"body":{"injectables/UsersService.html":{}}}],["installcompile",{"_index":550,"title":{},"body":{"index.html":{}}}],["interact",{"_index":589,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail",{"_index":226,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty",{"_index":219,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":234,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["iso8601",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isint()@type(undefined",{"_index":232,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["isrequired",{"_index":256,"title":{},"body":{"classes/Post.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["isstring",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":199,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":221,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":223,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["job",{"_index":605,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":607,"title":{},"body":{"index.html":{}}}],["joi",{"_index":516,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":618,"title":{},"body":{"index.html":{}}}],["kamil",{"_index":622,"title":{},"body":{"index.html":{}}}],["key",{"_index":197,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["lastname",{"_index":218,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["learn",{"_index":573,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letters",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["license",{"_index":628,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":610,"title":{},"body":{"index.html":{}}}],["limit",{"_index":416,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["limit(limit",{"_index":485,"title":{},"body":{"injectables/UsersService.html":{}}}],["linkedin",{"_index":603,"title":{},"body":{"index.html":{}}}],["list",{"_index":419,"title":{},"body":{"controllers/UsersController.html":{}}}],["localhost:3000/posts/:userid",{"_index":324,"title":{},"body":{"controllers/PostsController.html":{}}}],["login",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":604,"title":{},"body":{"index.html":{}}}],["loop",{"_index":600,"title":{},"body":{"index.html":{}}}],["matches",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matches(/^[a",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":210,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(256",{"_index":212,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":213,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":227,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["meta",{"_index":195,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metadata",{"_index":520,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":55,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":211,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["miscellaneous",{"_index":524,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":609,"title":{},"body":{"index.html":{}}}],["mode",{"_index":555,"title":{},"body":{"index.html":{}}}],["model",{"_index":345,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":404,"title":{},"body":{"classes/User.html":{}}}],["mongodb+srv://vladtwince:9a4j8jmtv3kbsm68@cluster0.nekub.mongodb.net",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoose",{"_index":271,"title":{},"body":{"classes/Post.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoose.schema.types.objectid",{"_index":277,"title":{},"body":{"classes/Post.html":{}}}],["mongoosemodule",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":339,"title":{},"body":{"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":574,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":623,"title":{},"body":{"index.html":{}}}],["name",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":594,"title":{},"body":{"index.html":{}}}],["needed",{"_index":401,"title":{},"body":{"classes/User.html":{}}}],["nest",{"_index":543,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":627,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":571,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":506,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":249,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"classes/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":509,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":291,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newpost",{"_index":353,"title":{},"body":{"injectables/PostsService.html":{}}}],["newpost.save",{"_index":356,"title":{},"body":{"injectables/PostsService.html":{}}}],["newtag",{"_index":392,"title":{},"body":{"injectables/TagsService.html":{}}}],["newtag.save",{"_index":394,"title":{},"body":{"injectables/TagsService.html":{}}}],["newuser",{"_index":479,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser.save",{"_index":481,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":535,"title":{},"body":{"index.html":{}}}],["note",{"_index":400,"title":{},"body":{"classes/User.html":{}}}],["npm",{"_index":549,"title":{},"body":{"index.html":{}}}],["number",{"_index":231,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["offer",{"_index":606,"title":{},"body":{"index.html":{}}}],["official",{"_index":584,"title":{},"body":{"index.html":{}}}],["open",{"_index":611,"title":{},"body":{"index.html":{}}}],["optional",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options.dto.ts",{"_index":196,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":200,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.dto.ts:9",{"_index":201,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["out",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":632,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":504,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["pages",{"_index":423,"title":{},"body":{"controllers/UsersController.html":{}}}],["pagination",{"_index":425,"title":{},"body":{"controllers/UsersController.html":{}}}],["param",{"_index":312,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":442,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":230,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:9",{"_index":233,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":439,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":596,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":244,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":239,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":247,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["patch",{"_index":313,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch()@apioperation({summary",{"_index":436,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":236,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchpostsdto",{"_index":309,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchuser",{"_index":411,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":455,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":435,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":245,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["please",{"_index":577,"title":{},"body":{"index.html":{}}}],["populate('author",{"_index":360,"title":{},"body":{"injectables/PostsService.html":{}}}],["populate('tags",{"_index":359,"title":{},"body":{"injectables/PostsService.html":{}}}],["position",{"_index":428,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":134,"title":{"classes/Post.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post()@apioperation({summary",{"_index":371,"title":{},"body":{"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["post.dto",{"_index":243,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":112,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:21",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:29",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:40",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:48",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:53",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:58",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:66",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:71",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:77",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:9",{"_index":241,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.name",{"_index":340,"title":{},"body":{"modules/PostsModule.html":{}}}],["post.schema",{"_index":337,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["postmodel",{"_index":344,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":284,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":338,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["postschema",{"_index":280,"title":{},"body":{"classes/Post.html":{},"modules/PostsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["postscontroller",{"_index":282,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":31,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":314,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":276,"title":{},"body":{"classes/Post.html":{}}}],["posttype",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":275,"title":{},"body":{"classes/Post.html":{}}}],["prefix",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":557,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":534,"title":{},"body":{"index.html":{}}}],["project",{"_index":547,"title":{},"body":{"index.html":{}}}],["promise",{"_index":469,"title":{},"body":{"injectables/UsersService.html":{}}}],["prop",{"_index":268,"title":{},"body":{"classes/Post.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["prop({type",{"_index":252,"title":{},"body":{"classes/Post.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["properties",{"_index":113,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/Post.html":{},"classes/Tag.html":{},"classes/User.html":{},"properties.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/tags.service",{"_index":375,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/users.service",{"_index":440,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(poststatus)@isnotempty",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{}}}],["query",{"_index":432,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":448,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":450,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":575,"title":{},"body":{"index.html":{}}}],["read",{"_index":619,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":590,"title":{},"body":{"index.html":{}}}],["ref",{"_index":254,"title":{},"body":{"classes/Post.html":{}}}],["reflect",{"_index":519,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":420,"title":{},"body":{"controllers/UsersController.html":{}}}],["repository",{"_index":546,"title":{},"body":{"index.html":{}}}],["required",{"_index":426,"title":{},"body":{"controllers/UsersController.html":{}}}],["reset",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":567,"title":{},"body":{"index.html":{}}}],["response",{"_index":295,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":61,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":59,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["run",{"_index":551,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":522,"title":{},"body":{"dependencies.html":{}}}],["sample_token",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":539,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":269,"title":{},"body":{"classes/Post.html":{},"modules/PostsModule.html":{},"classes/Tag.html":{},"modules/TagsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":270,"title":{},"body":{"classes/Post.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(post",{"_index":281,"title":{},"body":{"classes/Post.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(tag",{"_index":366,"title":{},"body":{"classes/Tag.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":406,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["series",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":540,"title":{},"body":{"index.html":{}}}],["service",{"_index":323,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["setup",{"_index":548,"title":{},"body":{"index.html":{}}}],["side",{"_index":541,"title":{},"body":{"index.html":{}}}],["skip((page",{"_index":484,"title":{},"body":{"injectables/UsersService.html":{}}}],["slug",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/Post.html":{},"classes/Tag.html":{}}}],["small",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["sponsors",{"_index":614,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":531,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post",{"_index":526,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../post.schema.ts",{"_index":638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tag.schema.ts",{"_index":639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":53,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":58,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":461,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":80,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":476,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:12",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:18",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":494,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":111,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":237,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/post",{"_index":529,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.schema.ts",{"_index":251,"title":{},"body":{"classes/Post.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/posts/post.schema.ts:15",{"_index":267,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.schema.ts:23",{"_index":261,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.schema.ts:29",{"_index":263,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.schema.ts:37",{"_index":264,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.schema.ts:43",{"_index":258,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.schema.ts:49",{"_index":259,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.schema.ts:55",{"_index":262,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.schema.ts:58",{"_index":255,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.schema.ts:61",{"_index":266,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":283,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:21",{"_index":299,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:34",{"_index":298,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:47",{"_index":308,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":336,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":341,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:22",{"_index":347,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:27",{"_index":349,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:9",{"_index":346,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":203,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":386,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:17",{"_index":390,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:8",{"_index":388,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.schema",{"_index":273,"title":{},"body":{"classes/Post.html":{}}}],["src/tags/tag.schema.ts",{"_index":362,"title":{},"body":{"classes/Tag.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/tags/tag.schema.ts:10",{"_index":363,"title":{},"body":{"classes/Tag.html":{}}}],["src/tags/tag.schema.ts:16",{"_index":364,"title":{},"body":{"classes/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":368,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:17",{"_index":373,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module.ts",{"_index":383,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":215,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":229,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":246,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":463,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:10",{"_index":467,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:22",{"_index":468,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:28",{"_index":471,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:33",{"_index":473,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.schema",{"_index":274,"title":{},"body":{"classes/Post.html":{}}}],["src/users/user.schema.ts",{"_index":395,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/user.schema.ts:11",{"_index":397,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:17",{"_index":398,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:23",{"_index":396,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:29",{"_index":399,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":408,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:47",{"_index":433,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:63",{"_index":414,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:75",{"_index":437,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":83,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":459,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":553,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":556,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":558,"title":{},"body":{"index.html":{}}}],["started",{"_index":533,"title":{"index.html":{}},"body":{}}],["starter",{"_index":545,"title":{},"body":{"index.html":{}}}],["statements",{"_index":489,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["status.enum",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{}}}],["status.enum.ts",{"_index":527,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":599,"title":{},"body":{"index.html":{}}}],["story",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":60,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/Post.html":{},"classes/Tag.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["success",{"_index":294,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully",{"_index":327,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@patch",{"_index":307,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully'})@post",{"_index":297,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":326,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":576,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":630,"title":{},"body":{"modules.html":{}}}],["table",{"_index":503,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":502,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":265,"title":{"classes/Tag.html":{}},"body":{"classes/Post.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag'})@apiresponse({status",{"_index":372,"title":{},"body":{"controllers/TagsController.html":{}}}],["tag.dto",{"_index":376,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":204,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:16",{"_index":206,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:26",{"_index":209,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.name",{"_index":279,"title":{},"body":{"classes/Post.html":{},"modules/TagsModule.html":{}}}],["tag.schema",{"_index":385,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tags",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{},"controllers/TagsController.html":{}}}],["tags.controller",{"_index":384,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags/tags.module",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["tagschema",{"_index":365,"title":{},"body":{"classes/Tag.html":{},"modules/TagsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tagscontroller",{"_index":367,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodel",{"_index":389,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsmodule",{"_index":32,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsservice",{"_index":374,"title":{"injectables/TagsService.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["test",{"_index":561,"title":{},"body":{"index.html":{}}}],["test:covresources",{"_index":564,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":563,"title":{},"body":{"index.html":{}}}],["tests",{"_index":559,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":613,"title":{},"body":{"index.html":{}}}],["this.postmodel",{"_index":357,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel(createpostdto",{"_index":354,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.createpost(createpostdto",{"_index":329,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall",{"_index":325,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.tagsmodel(createtagdto",{"_index":393,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.createtag(createtagdto",{"_index":380,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.usersmodel",{"_index":483,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersmodel(createuserdto",{"_index":480,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersmodel.findbyid(_id",{"_index":482,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":454,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid('1234",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getusers(getuserparamdto",{"_index":452,"title":{},"body":{"controllers/UsersController.html":{}}}],["time",{"_index":591,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["title",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{}}}],["touch",{"_index":621,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":235,"title":{},"body":{"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/Post.html":{},"classes/Tag.html":{},"classes/User.html":{}}}],["twitter",{"_index":626,"title":{},"body":{"index.html":{}}}],["type",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["type.enum",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{}}}],["type.enum.ts",{"_index":528,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["types",{"_index":250,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":544,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":253,"title":{},"body":{"classes/Post.html":{}}}],["unit",{"_index":560,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":348,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["unlicensed",{"_index":636,"title":{},"body":{"properties.html":{}}}],["updated",{"_index":306,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["updatepost",{"_index":287,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":331,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostsdto",{"_index":300,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":301,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["upper",{"_index":422,"title":{},"body":{"controllers/UsersController.html":{}}}],["url",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["url\"'})@maxlength(512",{"_index":208,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["url''})@isstring()@isnotempty()@matches(/^[a",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["user",{"_index":105,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/Post.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.dto",{"_index":248,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":216,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:15",{"_index":222,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":224,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:25",{"_index":220,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:29",{"_index":225,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.name",{"_index":278,"title":{},"body":{"classes/Post.html":{},"modules/UsersModule.html":{}}}],["user.schema",{"_index":460,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["usermodel",{"_index":477,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":351,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":462,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["userschema",{"_index":405,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":407,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodel",{"_index":466,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersmodule",{"_index":33,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":89,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["using",{"_index":592,"title":{},"body":{"index.html":{}}}],["valid",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validator",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":198,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["variable",{"_index":498,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":637,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":634,"title":{},"body":{"properties.html":{}}}],["video",{"_index":585,"title":{},"body":{"index.html":{}}}],["visit",{"_index":572,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":587,"title":{},"body":{"index.html":{}}}],["void",{"_index":310,"title":{},"body":{"controllers/PostsController.html":{}}}],["want",{"_index":424,"title":{},"body":{"controllers/UsersController.html":{}}}],["watch",{"_index":554,"title":{},"body":{"index.html":{}}}],["website",{"_index":624,"title":{},"body":{"index.html":{}}}],["without",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["working",{"_index":570,"title":{},"body":{"index.html":{}}}],["world",{"_index":63,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":602,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":617,"title":{},"body":{"index.html":{}}}],["z0",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["zoom",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TagsModule } from './tags/tags.module';\n\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    MongooseModule.forRoot(\n      'mongodb+srv://vladtwince:9a4j8jMTv3KbSM68@cluster0.nekub.mongodb.net/',\n      { dbName: 'blog-api' },\n    ),\n    TagsModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { ApiTags } from '@nestjs/swagger';\n\n@Controller('auth')\n@ApiTags('Authentication')\nexport class AuthController {\n    constructor(\n        /** Inject authService */\n        private readonly authService: AuthService,\n    ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  exports: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, forwardRef } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    /** Inject usersService */\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n\n  public login(email: string, password: string, id: string) {\n    const user = this.usersService.findOneById('1234');\n    // login\n    return 'SAMPLE_TOKEN';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                author\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'Possible values  'post', 'page', 'story', 'series''})@IsEnum(PostType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Must be a valid timestamp in ISO8601', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For example 'my-url''})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postStatus, description: 'Possible values 'draft', 'scheduled', 'review', 'published''})@IsEnum(postStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsArray()@IsOptional()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(4)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsEnum,\n  IsISO8601,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MinLength,\n} from 'class-validator';\nimport { PostType } from '../enums/post-type.enum';\nimport { postStatus } from '../enums/post-status.enum';\n\nexport class CreatePostDto {\n  @ApiProperty()\n  @IsString()\n  @MinLength(4)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostType,\n    description: \"Possible values  'post', 'page', 'story', 'series'\",\n  })\n  @IsEnum(PostType)\n  @IsNotEmpty()\n  postType: PostType;\n\n  @ApiProperty({\n    description: \"For example 'my-url'\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: postStatus,\n    description: \"Possible values 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsEnum(postStatus)\n  @IsNotEmpty()\n  status: postStatus;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  content?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    description: 'Must be a valid timestamp in ISO8601',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  author: string;\n\n  @ApiProperty()\n  @IsArray()\n  @IsOptional()\n  @IsString({ each: true })\n  tags?: string[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})@MaxLength(512)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty()\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  @MaxLength(256)\n  name: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  @MaxLength(512)\n  slug: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsEmail,\n    IsNotEmpty,\n    IsOptional,\n    IsString,\n    MaxLength,\n    MinLength,\n  } from 'class-validator';\n  \n  export class CreateUserDto {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(3)\n    @MaxLength(96)\n    firstName: string;\n  \n    @IsString()\n    @IsOptional()\n    @MinLength(3)\n    @MaxLength(96)\n    lastName?: string;\n  \n    @IsEmail()\n    @IsNotEmpty()\n    email: string;\n  \n    @IsString()\n    @IsNotEmpty()\n    password: string;\n  }\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-user-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-user-param.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\n\nimport { Type } from 'class-transformer';\n\nexport class GetUsersParamDto {\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreatePostDto } from './create-post.dto';\nimport { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty()\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserDto } from './create-user.dto';\nimport { PartialType } from '@nestjs/mapped-types';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Post.html":{"url":"classes/Post.html","title":"class - Post","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.schema.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.schema.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.schema.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: true, enum: PostType, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date, isRequired: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.schema.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: true, enum: postStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.schema.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.schema.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.schema.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\nimport { PostType } from './enums/post-type.enum';\nimport { Tag } from 'src/tags/tag.schema';\nimport { User } from 'src/users/user.schema';\nimport { postStatus } from './enums/post-status.enum';\n\n@Schema()\nexport class Post extends Document {\n  @Prop({\n    type: String,\n    isRequired: true,\n  })\n  title: string;\n\n  @Prop({\n    type: String,\n    isRequired: true,\n    enum: PostType,\n    default: PostType.POST,\n  })\n  postType: PostType;\n\n  @Prop({\n    type: String,\n    isRequired: true,\n  })\n  slug: string;\n\n  @Prop({\n    type: String,\n    isRequired: true,\n    enum: postStatus,\n    default: postStatus.DRAFT,\n  })\n  status: postStatus;\n\n  @Prop({\n    type: String,\n    isRequired: false,\n  })\n  content?: string;\n\n  @Prop({\n    type: String,\n    isRequired: false,\n  })\n  featuredImageUrl?: string;\n\n  @Prop({\n    type: Date,\n    isRequired: false,\n  })\n  publishOn?: Date;\n\n  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: User.name })\n  author: User;\n\n  @Prop({ type: [{ type: mongoose.Schema.Types.ObjectId, ref: Tag.name }] })\n  tags?: Tag[];\n}\n\nexport const PostSchema = SchemaFactory.createForClass(Post);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new post for the blog.'})@ApiResponse({status: 201, description: 'You get a success 201 response if the post is created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostsDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates and existing blog post in the database.'})@ApiResponse({status: 200, description: 'You get a success 20o response if the post is updated successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostsDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(\n    /*\n     *  Injecting Posts Service\n     */\n    private readonly postsService: PostsService,\n  ) {}\n\n  /*\n   * GET localhost:3000/posts/:userId\n   */\n  @Get()\n  public getPosts() {\n    return this.postsService.findAll();\n  }\n\n  @ApiOperation({\n    summary: 'Creates a new post for the blog.',\n  })\n  @ApiResponse({\n    status: 201,\n    description:\n      'You get a success 201 response if the post is created successfully',\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    return this.postsService.createPost(createPostDto);\n  }\n\n  @ApiOperation({\n    summary: 'Updates and existing blog post in the database.',\n  })\n  @ApiResponse({\n    status: 200,\n    description:\n      'You get a success 20o response if the post is updated successfully',\n  })\n  @Patch()\n  public updatePost(@Body() patchPostsDto: PatchPostDto) {\n    console.log(patchPostsDto);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Post, PostSchema } from './post.schema';\n\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Post.name,\n        schema: PostSchema,\n      },\n    ]),\n    UsersModule,\n  ],\n})\nexport class PostsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createPost\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, postModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { CreatePostDto } from '../dtos/create-post.dto';\nimport { Model } from 'mongoose';\nimport { Post } from '../post.schema';\nimport { InjectModel } from '@nestjs/mongoose';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    /*\n     * Injecting Users Service\n     */\n    private readonly usersService: UsersService,\n    /**\n     * Inject postModel\n     */\n    @InjectModel(Post.name)\n    private readonly postModel: Model,\n  ) {}\n\n  public async createPost(createPostDto: CreatePostDto) {\n    const newPost = new this.postModel(createPostDto);\n    return await newPost.save();\n  }\n\n  public async findAll() {\n    return await this.postModel\n      .find()\n      .populate('tags')\n      .populate('author')\n      .exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tag.html":{"url":"classes/Tag.html","title":"class - Tag","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.schema.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema()\nexport class Tag extends Document {\n  @Prop({\n    type: String,\n    isRequired: true,\n  })\n  name: string;\n\n  @Prop({\n    type: String,\n    isRequired: true,\n  })\n  slug: string;\n}\n\nexport const TagSchema = SchemaFactory.createForClass(Tag);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createTag\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTag(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new tag'})@ApiResponse({status: 201, description: 'Tag created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { TagsService } from './providers/tags.service';\nimport { CreateTagDto } from './dtos/create-tag.dto';\n\n@Controller('tags')\n@ApiTags('tags')\nexport class TagsController {\n  constructor(\n    /** Inject tagsService */\n    private readonly tagsService: TagsService,\n  ) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new tag' })\n  @ApiResponse({ status: 201, description: 'Tag created successfully' })\n  public createTag(@Body() createTagDto: CreateTagDto) {\n    return this.tagsService.createTag(createTagDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService\n\nTagsService\n\n\n\nTagsModule\n\nTagsModule\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TagsService } from './providers/tags.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Tag, TagSchema } from './tag.schema';\n\n@Module({\n  controllers: [TagsController],\n  providers: [TagsService],\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Tag.name,\n        schema: TagSchema,\n      },\n    ]),\n  ],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTag\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTag(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateTagDto } from './../dtos/create-tag.dto';\nimport { Injectable } from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { Tag } from '../tag.schema';\nimport { InjectModel } from '@nestjs/mongoose';\n\n@Injectable()\nexport class TagsService {\n  constructor(\n    /**\n     * Inject tagsModel\n     */\n    @InjectModel(Tag.name)\n    private readonly tagsModel: Model,\n  ) {}\n\n  public async createTag(createTagDto: CreateTagDto) {\n    const newTag = new this.tagsModel(createTagDto);\n    return await newTag.save();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.schema.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\n@Schema()\nexport class User extends Document {\n  // Note: id is not needed because _id is added by default by MongoDb\n  @Prop({\n    type: String,\n    isRequired: true,\n  })\n  firstName: string;\n\n  @Prop({\n    type: String,\n    isRequired: false,\n  })\n  lastName?: string;\n\n  @Prop({\n    type: String,\n    isRequired: true,\n  })\n  email: string;\n\n  @Prop({\n    type: String,\n    isRequired: true,\n  })\n  password: string;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Creates a new user on the application.'})@ApiResponse({status: 201, description: 'User created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of registered users on the application.'})@ApiQuery({name: 'limit', type: String, description: 'The upper limit of pages you want the pagination to return', required: false})@ApiQuery({name: 'page', type: String, description: 'The position of the page number that you want the API to return', required: false})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOperation({summary: 'Updates a user on the application.'})@ApiResponse({status: 200, description: 'User updated successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  DefaultValuePipe,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { UsersService } from './providers/users.service';\nimport { GetUsersParamDto } from './dtos/get-user-param.dto';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(\n    /** Inject usersService */\n    private readonly usersService: UsersService,\n  ) {}\n\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application.',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: String,\n    description: 'The upper limit of pages you want the pagination to return',\n    required: false,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: String,\n    description:\n      'The position of the page number that you want the API to return',\n    required: false,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully based on the query',\n  })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.getUsers(getUserParamDto, limit, page);\n  }\n\n  @Post()\n  @ApiOperation({\n    summary: 'Creates a new user on the application.',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'User created successfully',\n  })\n  public createUser(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.createUser(createUserDto);\n  }\n\n  @Patch()\n  @ApiOperation({\n    summary: 'Updates a user on the application.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'User updated successfully',\n  })\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { User, UserSchema } from './user.schema';\n\nimport { AuthModule } from 'src/auth/auth.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: User.name,\n        schema: UserSchema,\n      },\n    ]),\n    forwardRef(() => AuthModule),\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                            \n                                    Public\n                                    Async\n                                getUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:22\n                        \n                    \n\n\n            \n                \n                        Create a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Find user by id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Get all users from database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, forwardRef } from '@nestjs/common';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { GetUsersParamDto } from '../dtos/get-user-param.dto';\nimport { User } from '../user.schema';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { CreateUserDto } from '../dtos/create-user.dto';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    /** Inject authService */\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n\n    /** Inject userModel */\n    @InjectModel(User.name)\n    private readonly usersModel: Model,\n  ) {}\n\n  /** Create a new user */\n  public async createUser(createUserDto: CreateUserDto): Promise {\n    const newUser = new this.usersModel(createUserDto);\n    return await newUser.save();\n  }\n\n  /** Find user by id */\n  public findOneById(_id: string) {\n    return this.usersModel.findById(_id);\n  }\n\n  /** Get all users from database */\n  public async getUsers(\n    getUsersParamDto: GetUsersParamDto,\n    limit: number = 10,\n    page: number = 1,\n  ): Promise {\n    return await this.usersModel\n      .find()\n      .skip((page - 1) * limit)\n      .limit(limit)\n      .exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/post.schema.ts\n            \n            class\n            Post\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/posts/post.schema.ts\n            \n            variable\n            PostSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tags/tag.schema.ts\n            \n            class\n            Tag\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tags/tag.schema.ts\n            \n            variable\n            TagSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-user-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/users/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/mongoose : ^10.0.10\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.13.3\n        \n            mongoose : ^8.6.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../post-status.enum.ts)\n                        \n                        \n                            PostType   (src/.../post-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/post-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/post-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostSchema   (src/.../post.schema.ts)\n                        \n                        \n                            TagSchema   (src/.../tag.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/post.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PostSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Post)\n                    \n                \n\n\n        \n    \n\n    src/tags/tag.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TagSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Tag)\n                    \n                \n\n\n        \n    \n\n    src/users/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
