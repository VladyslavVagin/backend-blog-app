var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,3.02,1,2.56]],["body/guards/AccessTokenGuard.html",[1,3.217,2,2.675,3,0.136,4,0.12,5,0.12,6,5.344,7,4.393,8,2.978,9,0.251,10,1.112,11,1.517,12,5.344,13,1.675,14,4.879,15,1.255,16,2.675,17,5.413,18,4.393,19,4.393,20,0.664,21,3.439,22,1.346,23,0.016,24,0.925,25,0.502,26,1.009,27,4.225,28,4.799,29,3.439,30,2.675,31,1.112,32,2.518,33,4.879,34,3.911,35,3.439,36,0.868,37,2.66,38,0.36,39,1.401,40,0.571,41,3.003,42,0.513,43,1.602,44,2.117,45,2.448,46,2.117,47,2.978,48,2.675,49,2.978,50,0.136,51,0.065,52,2.448,53,1.205,54,2.448,55,1.863,56,3.439,57,4.295,58,3.439,59,1.977,60,1.473,61,1.527,62,4.225,63,0.958,64,2.978,65,3.439,66,2.978,67,1.527,68,1.458,69,2.675,70,1.158,71,1.684,72,3.439,73,3.439,74,0.009,75,0.009]],["title/interfaces/ActiveUserData.html",[76,2.003,77,2.003]],["body/interfaces/ActiveUserData.html",[3,0.211,4,0.187,5,0.187,9,0.389,23,0.015,25,0.578,36,1.363,50,0.211,74,0.013,75,0.013,76,2.757,77,3.369,78,3.523,79,3.523,80,4.156,81,1.819,82,3.509,83,5.228,84,2.913,85,1.55,86,5.343,87,3.523]],["title/controllers/AppController.html",[88,1.505,89,2.764]],["body/controllers/AppController.html",[3,0.222,4,0.197,5,0.197,23,0.015,38,0.359,42,0.84,50,0.222,51,0.107,53,1.391,74,0.013,75,0.013,88,2.613,89,4.798,90,2.282,91,4.877,92,4.44,93,4.877,94,5.632]],["title/modules/AppModule.html",[95,1.382,96,2.764]],["body/modules/AppModule.html",[1,2.964,3,0.121,4,0.107,5,0.107,7,2.185,23,0.016,38,0.411,39,0.758,42,0.458,43,1.43,44,1.889,46,1.889,50,0.121,51,0.058,55,0.927,71,1.504,74,0.009,75,0.009,89,3.786,90,1.821,92,4.007,93,2.659,95,1.893,96,5.497,97,1.43,98,1.43,99,1.584,100,1.584,101,1.43,102,2.744,103,1.584,104,2.659,105,2.659,106,2.659,107,4.007,108,4.292,109,4.007,110,4.292,111,4.007,112,4.292,113,3.763,114,2.32,115,1.584,116,1.504,117,2.388,118,3.074,119,2.024,120,1.005,121,3.496,122,4.168,123,3.07,124,3.07,125,3.07,126,3.07,127,3.07,128,3.07,129,4.495,130,3.07,131,4.495,132,3.07,133,4.495,134,3.07,135,3.07,136,2.659,137,4.495,138,2.185,139,3.2,140,3.07,141,3.07,142,2.659,143,3.07,144,3.07,145,4.137,146,2.659,147,3.07,148,3.07,149,3.07,150,3.07,151,3.07,152,3.07,153,3.07,154,2.659,155,3.07,156,3.07,157,3.07,158,3.07,159,2.659,160,2.659,161,2.659,162,2.659]],["title/injectables/AppService.html",[40,0.455,92,2.39]],["body/injectables/AppService.html",[3,0.216,4,0.191,5,0.191,9,0.398,10,1.509,20,0.64,23,0.015,31,1.245,36,1.177,38,0.291,40,0.775,42,0.815,50,0.216,51,0.103,70,1.297,74,0.013,75,0.013,92,4.073,163,1.649,164,4.731,165,7.399,166,5.463,167,5.463,168,5.463]],["title/controllers/AuthController.html",[88,1.505,169,2.764]],["body/controllers/AuthController.html",[3,0.125,4,0.11,5,0.11,9,0.23,10,1.046,11,1.759,13,0.812,15,0.812,20,0.537,22,1.089,23,0.016,24,0.748,25,0.582,26,0.816,31,1.046,34,3.8,38,0.361,39,0.78,42,0.471,50,0.125,51,0.06,53,0.78,63,1.278,70,1.089,74,0.009,75,0.009,85,1.408,88,1.224,90,1.279,169,3.266,170,2.733,171,1.943,172,2.501,173,1.759,174,3.568,175,3.568,176,2.455,177,4.278,178,1.385,179,4.587,180,3.156,181,5.113,182,3.156,183,3.911,184,2.276,185,6.574,186,2.247,187,3.878,188,3.156,189,1.565,190,2.455,191,4.278,192,4.587,193,3.156,194,4.223,195,4.587,196,3.563,197,3.973,198,4.587,199,3.156,200,3.156,201,3.156,202,1.172,203,3.156,204,3.651,205,2.733,206,3.024,207,3.563,208,3.326,209,3.911,210,1.943,211,1.123,212,2.455,213,2.733,214,1.943,215,2.455,216,1.943,217,2.455,218,2.081,219,3.156,220,3.156,221,2.455,222,4.587,223,2.823,224,3.123,225,3.156,226,3.156,227,3.156,228,3.156,229,3.156]],["title/modules/AuthModule.html",[95,1.382,107,2.39]],["body/modules/AuthModule.html",[3,0.138,4,0.123,5,0.123,23,0.016,38,0.406,42,0.523,43,1.633,44,2.158,46,2.158,50,0.138,51,0.066,74,0.01,75,0.01,90,2.003,95,2.039,97,1.633,98,1.633,99,1.809,100,1.809,101,1.633,102,2.956,103,2.956,107,4.751,113,2.858,114,2.552,115,1.809,116,1.717,118,2.026,121,2.727,136,3.036,159,3.036,160,3.036,161,3.036,162,3.036,169,4.079,204,4.627,205,3.036,230,3.036,231,3.036,232,3.036,233,3.896,234,3.712,235,4.191,236,4.191,237,4.191,238,3.505,239,4.079,240,2.422,241,3.505,242,3.036,243,3.52,244,3.505,245,3.505,246,3.036,247,3.505,248,2.727,249,3.505,250,3.26,251,3.505,252,3.505,253,3.505,254,3.505,255,3.036]],["title/injectables/AuthService.html",[40,0.455,204,2.39]],["body/injectables/AuthService.html",[3,0.148,4,0.131,5,0.131,9,0.272,10,1.179,11,1.86,13,1.525,15,1.33,20,0.695,22,1.408,23,0.016,24,0.968,25,0.526,26,1.055,31,1.179,38,0.37,39,1.581,40,0.606,42,0.558,50,0.148,51,0.071,53,1.465,63,1.441,70,1.228,74,0.01,75,0.01,163,1.129,173,1.86,174,4.024,175,4.024,176,4.024,177,4.136,181,2.908,189,1.766,190,4.024,191,4.136,194,2.662,204,3.184,212,2.908,217,2.908,218,2.465,236,4.47,237,4.47,240,1.831,246,3.238,250,2.465,256,3.238,257,3.238,258,3.384,259,3.739,260,3.739,261,3.739,262,2.465,263,2.161,264,3.739,265,3.739]],["title/guards/AuthenticationGuard.html",[0,3.02,139,2.764]],["body/guards/AuthenticationGuard.html",[1,4.717,2,4.468,3,0.139,4,0.123,5,0.123,7,2.508,9,0.257,10,1.131,11,1.537,12,6.069,13,1.754,15,1.276,20,0.581,22,1.178,23,0.016,24,0.809,25,0.44,26,0.883,27,4.297,28,4.851,30,2.74,31,0.803,32,2.56,38,0.35,39,1.226,40,0.581,41,3.054,42,0.525,49,3.05,50,0.139,51,0.067,52,2.508,53,1.685,55,1.985,59,1.427,60,1.063,63,0.981,68,2.435,70,0.836,71,2.43,74,0.01,75,0.01,81,0.981,138,2.508,139,3.532,142,3.05,214,2.168,215,2.74,216,2.168,266,3.05,267,4.962,268,4.962,269,4.962,270,3.522,271,7.007,272,3.522,273,3.522,274,3.522,275,2.74,276,4.962,277,3.522,278,3.522,279,3.522,280,3.05,281,3.522,282,3.522,283,3.522,284,3.522,285,3.522,286,3.522,287,3.522,288,3.522,289,3.522,290,3.522,291,3.522]],["title/injectables/BcryptProvider.html",[40,0.455,243,2.764]],["body/injectables/BcryptProvider.html",[3,0.169,4,0.15,5,0.15,9,0.313,10,1.294,11,1.703,20,0.665,22,1.347,23,0.016,24,0.926,25,0.503,26,1.01,31,1.294,32,3.495,36,1.349,38,0.339,40,0.665,42,0.64,50,0.169,51,0.081,52,3.054,55,1.295,63,1.195,70,1.347,74,0.011,75,0.011,163,1.295,173,1.703,233,3.095,243,4.041,292,3.715,293,4.916,294,4.916,295,4.916,296,6.268,297,5.865,298,4.289,299,3.743,300,4.916,301,4.289,302,4.916,303,3.715,304,5.677,305,4.289,306,4.289,307,4.289]],["title/injectables/CreateGoogleUserProvider.html",[40,0.455,308,2.39]],["body/injectables/CreateGoogleUserProvider.html",[3,0.165,4,0.147,5,0.147,9,0.305,10,1.274,11,1.683,13,1.078,15,1.437,20,0.655,22,1.327,23,0.016,24,0.912,25,0.495,26,0.994,31,0.955,38,0.372,39,1.035,40,0.655,42,0.625,50,0.165,51,0.079,53,1.035,55,1.265,59,1.698,60,1.687,61,1.861,63,1.167,67,1.861,68,1.776,70,0.995,74,0.011,75,0.011,85,1.327,120,1.372,163,1.265,173,1.683,189,1.43,308,3.441,309,4.892,310,3.246,311,3.26,312,4.841,313,2.983,314,3.286,315,4.19,316,3.685,317,4.841,318,4.609,319,4.19,320,3.26,321,2.162,322,2.579,323,1.625,324,3.629,325,2.422,326,2.983,327,2.763,328,4.19,329,4.19,330,3.26]],["title/classes/CreatePostDto.html",[51,0.073,331,2.244]],["body/classes/CreatePostDto.html",[3,0.113,4,0.1,5,0.1,9,0.208,20,0.791,23,0.015,25,0.599,26,1.202,36,1.251,38,0.301,50,0.113,51,0.081,71,2.089,74,0.008,75,0.008,81,1.188,178,2.04,184,2.078,202,1.583,211,1.017,216,1.76,224,2.948,331,2.465,332,0.976,333,5.372,334,2.224,335,3.968,336,4.418,337,5.256,338,4.418,339,3.497,340,3.363,341,4.418,342,2.859,343,2.859,344,2.859,345,2.859,346,4.265,347,5.655,348,5.655,349,2.625,350,3.694,351,2.859,352,2.859,353,3.036,354,2.465,355,4.265,356,3.694,357,4.265,358,3.108,359,4.265,360,4.265,361,2.859,362,2.859,363,2.859,364,4.898,365,4.898,366,3.694,367,3.694,368,3.694,369,3.694,370,3.694,371,3.317,372,3.632,373,2.859,374,4.706,375,3.694,376,3.694,377,3.694,378,2.859,379,2.859,380,2.859,381,2.859,382,2.859,383,2.859,384,3.8,385,3.363,386,4.265,387,2.859,388,3.298,389,3.724,390,3.298,391,4.265,392,2.476,393,2.224,394,1.212,395,3.694,396,2.476,397,2.859,398,3.317,399,2.476,400,2.859,401,2.476,402,2.476,403,2.859,404,2.859,405,2.859]],["title/classes/CreatePostMetaOptionsDto.html",[51,0.073,406,3.02]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.2,4,0.178,5,0.178,9,0.37,20,0.741,23,0.015,25,0.561,36,1.126,38,0.271,50,0.2,51,0.12,74,0.012,75,0.012,81,1.763,178,1.911,202,2.56,332,1.734,333,5.363,388,3.934,390,3.451,394,2.154,406,4.924,407,4.909,408,4.401,409,5.971,410,4.546,411,5.082,412,5.082,413,5.082]],["title/injectables/CreatePostProvider.html",[40,0.455,414,2.39]],["body/injectables/CreatePostProvider.html",[3,0.119,4,0.105,5,0.105,9,0.22,10,1.011,11,1.408,13,1.492,15,1.14,20,0.519,22,1.052,23,0.016,24,0.723,25,0.393,26,0.789,31,0.687,37,2.417,38,0.373,39,1.528,40,0.519,42,0.449,50,0.119,51,0.057,53,1.433,55,1.338,59,2.351,60,2.018,61,1.969,63,1.616,67,1.969,68,1.879,70,0.715,74,0.009,75,0.009,77,2.994,79,1.986,85,1.249,120,0.987,163,0.909,173,1.408,184,0.987,189,1.028,202,2.154,240,1.476,258,3.196,262,1.986,263,1.741,314,2.842,320,2.343,321,1.555,323,1.168,325,1.741,330,3.448,331,3.738,339,2.563,340,3.468,414,2.729,415,4.556,416,2.609,417,3.448,418,2.609,419,3.965,420,4.047,421,3.013,422,4.556,423,3.448,424,3.013,425,2.288,426,1.986,427,1.642,428,2.145,429,2.343,430,3.013,431,3.013,432,2.609,433,3.238,434,3.013,435,3.013,436,3.013,437,3.013,438,3.013,439,2.609,440,1.555,441,2.609,442,4.433,443,3.013,444,3.013,445,2.343,446,2.343,447,3.013,448,2.609,449,3.013,450,3.013,451,3.013,452,3.013]],["title/classes/CreateTagDto.html",[51,0.073,453,2.56]],["body/classes/CreateTagDto.html",[3,0.164,4,0.145,5,0.145,9,0.303,20,0.651,23,0.015,24,1.137,25,0.492,36,1.19,38,0.296,50,0.164,51,0.105,74,0.011,75,0.011,81,1.548,178,1.678,184,1.82,211,1.479,332,1.418,339,4.233,354,3.212,358,3.513,364,5.791,365,5.791,366,4.813,367,4.813,368,4.813,369,4.813,370,4.813,371,4.323,372,2.958,384,3.62,385,2.739,388,3.414,390,3.414,392,3.598,393,3.232,394,1.761,401,3.598,440,3.451,453,3.664,454,5.424,455,3.598,456,4.155,457,4.155,458,4.155,459,4.155,460,4.155,461,3.232,462,4.813,463,3.598,464,4.155,465,4.155]],["title/classes/CreateUserDto.html",[51,0.073,466,2.244]],["body/classes/CreateUserDto.html",[3,0.153,4,0.135,5,0.135,9,0.282,20,0.761,23,0.015,24,1.059,25,0.575,26,0.942,36,1.302,38,0.282,50,0.153,51,0.1,74,0.01,75,0.01,81,1.475,82,3.169,85,1.738,178,1.96,184,2.126,211,1.377,332,1.32,354,3.753,358,3.586,384,3.931,388,3.54,389,3.259,390,3.54,393,3.009,394,1.64,461,3.009,463,4.586,466,3.061,467,5.89,468,3.009,469,4.299,470,4.299,471,4.484,472,3.35,473,3.868,474,4.119,475,3.868,476,3.868,477,4.119,478,3.868,479,3.868,480,3.868,481,3.868,482,4.586,483,3.868,484,5.295,485,3.868,486,3.35,487,3.35]],["title/injectables/CreateUserProvider.html",[40,0.455,488,2.39]],["body/injectables/CreateUserProvider.html",[3,0.126,4,0.111,5,0.111,9,0.232,10,1.052,11,1.453,13,1.396,15,1.187,20,0.541,22,1.096,23,0.016,24,0.753,25,0.409,26,0.821,31,0.726,36,0.566,37,1.736,38,0.362,39,1.471,40,0.541,42,0.475,50,0.126,51,0.06,53,1.342,55,0.961,59,2.413,60,1.909,61,2.412,63,1.659,67,2.412,68,2.302,70,0.756,74,0.009,75,0.009,82,1.483,85,1.096,120,1.043,163,0.961,173,1.453,189,1.087,233,3.871,240,1.559,263,1.84,309,4.224,311,2.476,313,2.267,314,2.917,316,3.043,321,1.643,322,1.96,323,1.79,326,2.267,327,2.099,426,2.099,427,1.736,445,2.476,446,2.476,462,2.757,466,3.811,471,3.043,488,2.841,489,3.59,490,4.288,491,3.184,492,3.59,493,3.184,494,1.84,495,3.184,496,2.267,497,3.184,498,5.43,499,2.476,500,3.184,501,2.476,502,2.476,503,2.757,504,3.998,505,3.184,506,3.184,507,3.184,508,3.043,509,4.616,510,2.099,511,3.184,512,3.184,513,4.616,514,3.184,515,2.099,516,3.184,517,3.184,518,3.286,519,2.757,520,3.184,521,3.184]],["title/injectables/FindOneByGoogleIdProvider.html",[40,0.455,522,2.39]],["body/injectables/FindOneByGoogleIdProvider.html",[3,0.174,4,0.154,5,0.154,9,0.321,10,1.317,11,1.726,13,1.133,15,1.486,20,0.677,22,1.371,23,0.016,24,0.943,25,0.512,26,1.028,31,1.005,36,1.147,38,0.364,39,1.089,40,0.677,42,0.657,50,0.174,51,0.083,53,1.089,63,1.227,70,1.046,74,0.011,75,0.011,85,1.046,120,1.443,163,1.33,173,1.726,189,1.504,310,3.327,313,3.137,314,3.352,316,3.81,321,2.274,322,2.712,323,1.708,326,3.137,327,2.905,499,3.427,522,3.557,523,5.015,524,4.251,525,3.816,526,5.004,527,4.406,528,5.004,529,4.406,530,3.81]],["title/injectables/FindOneUserByEmailProvider.html",[40,0.455,531,2.39]],["body/injectables/FindOneUserByEmailProvider.html",[3,0.161,4,0.143,5,0.143,9,0.297,10,1.25,11,1.66,13,1.048,15,1.41,20,0.642,22,1.302,23,0.016,24,0.895,25,0.486,26,0.976,31,0.929,36,1.103,37,2.99,38,0.353,39,1.006,40,0.642,41,2.507,42,0.608,50,0.161,51,0.077,53,1.006,59,1.65,60,1.23,61,1.809,63,1.135,67,1.809,68,1.727,70,0.967,74,0.011,75,0.011,82,2.889,85,1.782,120,1.334,163,1.23,173,1.66,184,1.334,189,1.39,313,2.9,314,3.249,316,4.088,321,2.102,322,2.507,323,1.579,327,2.686,494,2.355,499,3.168,508,2.686,523,4.823,524,4.088,531,3.376,532,3.528,533,4.75,534,4.073,535,4.75,536,4.073,537,3.168]],["title/injectables/GenerateTokensProvider.html",[40,0.455,234,2.117]],["body/injectables/GenerateTokensProvider.html",[3,0.135,4,0.12,5,0.12,9,0.249,10,1.109,11,1.808,13,1.25,15,1.25,16,2.662,17,5.406,18,4.383,19,4.383,20,0.662,22,1.461,23,0.016,24,0.923,25,0.546,26,1.006,31,1.109,36,1.006,38,0.36,39,1.397,40,0.57,42,0.511,43,1.595,44,2.107,46,2.107,50,0.135,51,0.065,53,1.201,54,2.437,55,1.033,62,5.332,63,1.355,70,1.154,74,0.009,75,0.009,77,1.766,82,1.595,83,2.437,85,1.544,163,1.033,173,1.808,189,1.66,234,2.651,248,2.662,325,1.978,538,4.789,539,2.662,540,4.862,541,4.862,542,3.423,543,4.862,544,3.423,545,4.862,546,6.157,547,3.083,548,4.789,549,3.423,550,3.782,551,2.257,552,2.662,553,2.964,554,3.423,555,2.964,556,2.964,557,2.964,558,2.964,559,2.964,560,2.964,561,4.862,562,4.211,563,3.423,564,3.423,565,3.423,566,3.423,567,2.964,568,3.423,569,3.423]],["title/classes/GetPostsBaseDto.html",[51,0.073,570,2.764]],["body/classes/GetPostsBaseDto.html",[3,0.187,4,0.166,5,0.166,9,0.345,20,0.709,23,0.015,25,0.536,26,1.251,38,0.355,50,0.187,51,0.126,74,0.012,75,0.012,81,1.686,178,1.828,211,1.685,332,1.616,353,5.007,385,4.4,389,4.108,394,2.007,570,4.31,571,5.191,572,3.683,573,5.78,574,5.78,575,6.054,576,4.735,577,4.735,578,5.78,579,4.101,580,3.726,581,3.371,582,3.683,583,2.915,584,2.582,585,4.101]],["title/classes/GetPostsDto.html",[51,0.073,583,2.39]],["body/classes/GetPostsDto.html",[3,0.204,4,0.181,5,0.181,23,0.015,38,0.37,50,0.204,51,0.131,74,0.012,75,0.012,211,1.841,332,1.765,353,4.556,385,4.582,389,4.278,394,2.192,570,3.682,571,4.023,572,4.023,573,4.479,574,4.479,578,6.018,579,4.479,580,4.278,581,3.682,582,4.023,583,3.939,584,3.489,585,5.542]],["title/classes/GetUsersParamDto.html",[51,0.073,586,2.56]],["body/classes/GetUsersParamDto.html",[3,0.2,4,0.177,5,0.177,9,0.369,20,0.593,23,0.015,25,0.61,26,1.124,36,1.225,38,0.367,50,0.2,51,0.13,74,0.012,75,0.012,81,1.76,84,3.753,85,1.499,178,1.529,211,1.802,332,1.728,385,4.165,389,3.888,390,3.444,394,2.147,586,4.165,587,5.47,588,4.386,589,5.064,590,5.064,591,3.939]],["title/controllers/GoogleAuthenticationController.html",[88,1.505,239,2.764]],["body/controllers/GoogleAuthenticationController.html",[3,0.158,4,0.141,5,0.141,9,0.293,10,1.239,13,1.033,15,1.033,20,0.471,22,0.954,23,0.016,24,0.655,25,0.546,26,0.715,31,0.916,38,0.378,39,0.993,42,0.599,50,0.158,51,0.076,53,0.993,57,4.349,70,0.954,74,0.011,75,0.011,88,1.557,90,1.628,171,2.473,172,2.19,173,1.648,178,1.213,184,1.316,187,2.473,194,3.868,202,2.017,207,3.582,208,3.344,210,2.473,211,1.43,213,3.479,214,2.473,215,3.125,216,2.473,218,2.649,221,3.125,223,2.473,235,4.06,239,3.868,255,3.479,310,3.556,592,4.706,593,3.479,594,4.017,595,6.157,596,5.524,597,3.479,598,4.87,599,4.017,600,4.017,601,4.706,602,4.226,603,4.017,604,4.017,605,3.479,606,4.017,607,4.017,608,4.017,609,4.017]],["title/injectables/GoogleAuthenticationService.html",[40,0.455,235,2.39]],["body/injectables/GoogleAuthenticationService.html",[3,0.125,4,0.11,5,0.11,9,0.23,10,1.046,11,1.446,13,1.69,15,1.18,18,3.847,19,4.223,20,0.695,22,1.089,23,0.016,24,0.748,25,0.479,26,0.816,31,1.046,38,0.361,39,1.466,40,0.537,41,1.943,42,0.471,43,1.471,46,1.943,47,2.733,50,0.125,51,0.06,52,2.247,53,1.335,54,2.247,55,1.985,59,1.279,60,1.385,61,1.402,63,1.505,67,1.402,68,1.338,69,2.455,70,1.089,74,0.009,75,0.009,81,1.278,82,2.137,83,2.247,85,1.089,163,0.953,172,1.721,173,1.446,189,1.077,218,2.081,234,3.789,235,2.823,240,1.546,250,2.081,258,3.301,262,2.081,263,1.824,310,1.629,469,3.266,470,3.266,504,2.733,530,3.024,538,2.455,596,3.568,597,3.973,598,4.154,605,2.733,610,5.457,611,2.733,612,5.403,613,6.574,614,3.156,615,4.587,616,3.156,617,3.156,618,3.156,619,5.403,620,2.733,621,3.156,622,3.156,623,4.587,624,3.156,625,3.156,626,3.156,627,3.156,628,3.156,629,3.156,630,3.156,631,3.156,632,3.156,633,3.156,634,3.156,635,2.455,636,3.156,637,3.156]],["title/classes/GoogleTokenDto.html",[51,0.073,598,2.56]],["body/classes/GoogleTokenDto.html",[3,0.195,4,0.173,5,0.173,9,0.36,20,0.579,23,0.015,25,0.438,36,1.107,38,0.331,50,0.195,51,0.118,57,5.031,74,0.012,75,0.012,81,1.733,178,1.493,184,1.619,194,4.43,211,1.759,310,3.687,332,1.687,354,2.858,358,3.047,384,3.596,388,3.392,394,2.096,596,4.84,598,4.102,601,5.389,602,4.84,638,5.389,639,3.846,640,4.944,641,4.944,642,4.944]],["title/interfaces/GoogleUser.html",[76,2.003,318,2.56]],["body/interfaces/GoogleUser.html",[3,0.203,4,0.18,5,0.18,9,0.376,23,0.015,25,0.643,36,1.419,50,0.203,74,0.012,75,0.012,76,2.659,78,3.398,80,4.009,81,1.779,82,3.379,318,4.21,469,5.163,470,5.163,530,4.782,643,4.463]],["title/injectables/HashingProvider.html",[40,0.455,233,2.117]],["body/injectables/HashingProvider.html",[3,0.183,4,0.162,5,0.162,9,0.337,10,1.361,20,0.699,22,1.416,23,0.015,24,0.973,25,0.529,26,1.062,31,1.361,32,3.599,36,1.369,38,0.247,40,0.699,42,0.691,50,0.183,51,0.088,74,0.012,75,0.012,163,1.398,233,3.253,293,5.168,294,5.168,295,5.168,296,6.4,297,5.719,299,3.934,300,5.168,644,4.01,645,7.518,646,4.63,647,4.63]],["title/modules/MailModule.html",[95,1.382,108,2.56]],["body/modules/MailModule.html",[3,0.158,4,0.14,5,0.14,11,1.072,23,0.016,38,0.378,39,0.99,42,0.598,43,1.867,50,0.158,51,0.076,60,1.209,71,1.962,74,0.01,75,0.01,85,0.951,95,2.188,97,1.867,98,1.867,99,2.067,100,2.067,101,1.867,102,3.173,103,3.173,108,4.784,114,2.799,115,2.067,116,1.962,118,2.316,122,4.377,154,3.47,172,2.184,490,4.733,648,3.47,649,3.47,650,3.47,651,4.006,652,5.423,653,4.006,654,4.006,655,3.861,656,3.116,657,5.423,658,4.006,659,3.47,660,2.641,661,4.006,662,4.006,663,4.006,664,4.006,665,4.006,666,4.006,667,3.338,668,4.006,669,4.006,670,4.006,671,4.006,672,4.006,673,4.006,674,3.116,675,3.47,676,4.006,677,4.006,678,4.006,679,4.006,680,4.006,681,4.006,682,4.006]],["title/injectables/MailService.html",[40,0.455,490,2.39]],["body/injectables/MailService.html",[3,0.172,4,0.153,5,0.153,9,0.318,10,1.31,11,1.718,13,1.123,15,1.477,20,0.673,22,1.363,23,0.016,24,1.047,25,0.509,26,1.022,30,3.396,31,0.996,32,2.964,38,0.342,39,1.079,40,0.673,42,0.651,50,0.172,51,0.083,53,1.079,63,1.216,74,0.011,75,0.011,82,2.034,85,1.682,163,1.318,173,1.718,490,3.535,552,3.396,567,4.974,655,3.109,656,3.396,674,3.396,675,3.781,683,3.781,684,5.744,685,4.366,686,7.415,687,4.366,688,5.744,689,4.366,690,4.366,691,4.366,692,4.366,693,4.366,694,5.744,695,4.366,696,4.366,697,4.366]],["title/interfaces/Paginated.html",[76,2.003,698,2.56]],["body/interfaces/Paginated.html",[3,0.194,4,0.172,5,0.172,9,0.358,23,0.015,25,0.675,36,1.307,50,0.194,74,0.012,75,0.012,76,2.534,78,3.238,81,1.726,299,4.7,407,5.075,474,3.82,477,3.82,547,3.886,548,5.28,698,4.085,699,4.253,700,6.173,701,6.173,702,4.253,703,4.253,704,4.253,705,4.253,706,4.253,707,4.253,708,4.253]],["title/modules/PaginationModule.html",[95,1.382,109,2.39]],["body/modules/PaginationModule.html",[3,0.198,4,0.176,5,0.176,23,0.015,38,0.335,42,0.75,50,0.198,51,0.095,74,0.012,75,0.012,95,2.442,97,2.343,98,2.343,99,2.595,100,2.595,101,2.343,102,3.541,103,3.541,109,4.715,114,3.245,115,2.595,116,2.463,709,4.356,710,4.356,711,4.356,712,4.892,713,5.029,714,5.029]],["title/injectables/PaginationProvider.html",[40,0.455,712,2.39]],["body/injectables/PaginationProvider.html",[3,0.125,4,0.111,5,0.111,9,0.23,10,1.047,11,1.448,13,0.813,15,1.181,20,0.538,22,1.284,23,0.016,24,0.749,25,0.559,26,0.817,31,0.721,32,2.371,34,4.02,36,0.563,38,0.35,39,0.781,40,0.538,42,0.472,45,2.252,50,0.125,51,0.06,53,0.781,55,2.049,60,0.955,63,1.28,70,0.751,74,0.011,75,0.009,138,2.252,163,0.955,173,1.448,299,2.085,314,3.406,323,1.226,349,1.947,372,2.252,407,2.252,425,1.632,433,1.947,474,2.46,477,2.46,547,1.724,548,2.46,551,2.085,580,3.655,582,2.46,698,3.029,700,2.739,701,3.979,702,2.739,703,3.979,704,2.739,705,4.685,706,2.739,707,2.739,708,2.739,712,2.828,715,2.739,716,5.41,717,3.163,718,3.163,719,3.163,720,3.567,721,3.163,722,4.594,723,3.163,724,3.163,725,2.739,726,3.163,727,3.163,728,3.163,729,3.163,730,3.163,731,3.163,732,6.954,733,4.618,734,2.46,735,2.739,736,3.163,737,4.594,738,3.163,739,3.163,740,3.163,741,3.163,742,3.163,743,3.163,744,3.163,745,4.594,746,3.163,747,3.163,748,3.163,749,2.739,750,4.594,751,3.163,752,3.163,753,3.163,754,3.163,755,3.163]],["title/classes/PaginationQueryDto.html",[51,0.073,580,2.39]],["body/classes/PaginationQueryDto.html",[3,0.192,4,0.17,5,0.17,9,0.354,20,0.721,23,0.015,25,0.545,26,1.263,38,0.259,50,0.192,51,0.116,74,0.012,75,0.012,81,1.715,178,1.859,332,1.659,349,4.159,389,4.159,394,2.061,410,4.059,547,3.872,580,3.789,581,4.81,733,4.789,756,4.21,757,5.255,758,4.059,759,5.332,760,6.156,761,4.861,762,4.861,763,6.756]],["title/classes/PatchPostDto.html",[51,0.073,764,2.56]],["body/classes/PatchPostDto.html",[3,0.196,4,0.174,5,0.174,9,0.361,20,0.581,23,0.015,25,0.44,36,1.109,38,0.363,50,0.196,51,0.118,74,0.012,75,0.012,81,1.737,84,4.019,178,1.498,184,1.625,202,2.315,211,1.765,331,2.867,332,1.693,334,3.859,354,2.867,358,3.054,384,3.604,388,2.705,390,2.705,394,2.103,425,2.56,428,3.532,584,3.399,764,4.111,765,5.4,766,6.235,767,6.235,768,4.961,769,4.296]],["title/classes/PatchUserDto.html",[51,0.073,770,2.764]],["body/classes/PatchUserDto.html",[3,0.222,4,0.197,5,0.197,23,0.015,38,0.359,50,0.222,51,0.107,74,0.013,75,0.013,332,1.922,425,2.906,466,3.255,468,4.38,496,4.009,584,3.675,769,4.877,770,4.798,771,4.877,772,6.74,773,4.877,774,4.877]],["title/classes/Post.html",[51,0.073,202,1.441]],["body/classes/Post.html",[3,0.114,4,0.101,5,0.101,9,0.211,20,0.812,23,0.016,25,0.676,26,1.207,36,1.364,37,3.318,38,0.34,50,0.17,51,0.055,55,0.875,71,3.323,74,0.008,75,0.008,81,1.2,85,1.221,120,0.949,178,2.093,202,1.6,216,1.784,224,2.973,323,1.671,332,0.989,335,4,336,4.454,337,5.277,338,4.454,339,2.973,340,3.391,341,4.454,353,4.054,374,4.733,395,3.732,396,2.51,398,4.429,433,3.166,440,2.654,510,2.841,552,2.255,584,1.58,667,3.925,758,3.754,775,2.255,776,4.935,777,5.143,778,2.899,779,5.262,780,2.899,781,2.899,782,2.899,783,2.899,784,2.899,785,2.899,786,2.899,787,2.899,788,5.022,789,2.349,790,2.064,791,2.899,792,2.899,793,2.899,794,4.309,795,2.51,796,2.51,797,2.064,798,2.51]],["title/controllers/PostsController.html",[88,1.505,799,2.764]],["body/controllers/PostsController.html",[3,0.08,4,0.071,5,0.071,9,0.148,10,0.746,11,1.476,13,0.523,15,0.523,20,0.552,22,1.225,23,0.016,24,0.946,25,0.535,26,0.838,31,1.074,36,1.108,38,0.321,42,0.303,50,0.08,51,0.038,53,0.502,60,0.988,63,0.912,70,1.118,71,2.307,74,0.006,75,0.006,77,2.43,79,1.341,84,3.827,85,1.377,87,2.158,88,0.788,90,0.824,171,1.252,173,1.782,178,1.422,183,4.215,184,2.341,186,2.331,187,3.57,189,1.117,196,3.105,202,2.756,206,3.404,207,2.709,208,3.178,209,3.637,210,1.252,211,0.724,223,2.899,224,2.984,325,1.175,331,3.353,358,2.702,417,3.196,420,2.375,423,1.582,427,1.109,428,2.331,515,1.341,518,2.925,519,1.761,537,2.546,550,4.016,583,2.899,667,2.015,674,3.196,720,2.709,725,1.761,735,2.835,749,4.777,764,3.404,799,2.331,800,1.761,801,5.225,802,2.835,803,4.109,804,4.109,805,3.273,806,2.835,807,2.033,808,3.663,809,5.516,810,2.546,811,2.033,812,2.033,813,2.033,814,2.033,815,3.273,816,2.033,817,4.777,818,4.777,819,2.033,820,2.033,821,3.273,822,2.835,823,2.033,824,2.033,825,3.558,826,2.033,827,3.273,828,2.033,829,2.546,830,2.835,831,2.033,832,3.273,833,2.835,834,2.033,835,2.033,836,4.71,837,2.546,838,2.835,839,2.033,840,2.835,841,3.273,842,2.033,843,2.546,844,2.033,845,2.033,846,1.761,847,1.761,848,1.761,849,4.079,850,1.582,851,1.448,852,1.761,853,2.546,854,1.582,855,2.033,856,2.033,857,2.033,858,2.033,859,2.033,860,2.033,861,2.033,862,2.033,863,2.033,864,3.273,865,2.033,866,2.033,867,2.033,868,2.033,869,2.033,870,2.033,871,2.033,872,2.033,873,2.033,874,2.033]],["title/modules/PostsModule.html",[95,1.382,110,2.56]],["body/modules/PostsModule.html",[3,0.153,4,0.136,5,0.136,23,0.016,24,0.633,38,0.396,42,0.578,50,0.153,51,0.073,74,0.01,75,0.01,90,2.149,95,2.152,97,1.807,98,1.807,99,2.001,100,2.001,101,1.807,102,3.12,103,3.12,109,4.326,110,5.134,111,4.326,113,4.062,114,2.737,115,2.001,116,1.9,118,3.066,119,2.557,120,1.27,202,1.44,242,3.359,414,4.326,420,4.421,429,3.017,789,2.114,797,3.777,799,4.304,848,3.359,875,3.359,876,3.359,877,3.359,878,3.878,879,3.878,880,3.878,881,3.878,882,3.359,883,3.359,884,3.878,885,2.761,886,3.878]],["title/injectables/PostsService.html",[40,0.455,420,2.244]],["body/injectables/PostsService.html",[3,0.081,4,0.072,5,0.072,9,0.15,10,0.752,11,1.863,13,1.064,15,0.848,20,0.649,22,1.315,23,0.016,24,0.904,25,0.491,26,0.986,31,1.183,32,2.444,34,1.907,36,1.112,38,0.349,39,1.17,40,0.386,42,0.306,50,0.081,51,0.039,53,1.022,55,0.996,59,2.102,60,1.758,61,2.304,63,1.445,67,1.837,68,2.199,70,1.232,74,0.006,75,0.006,77,2.444,79,1.354,84,2.255,85,1.315,87,2.175,120,0.672,163,0.62,173,1.863,184,1.081,189,1.412,202,2.637,240,1.006,263,1.187,314,2.32,321,1.06,323,0.796,325,1.187,331,2.999,339,2.738,414,3.846,417,2.566,418,1.778,420,1.907,422,3.582,423,2.566,425,2.134,427,1.119,428,2.349,429,1.597,432,1.778,433,1.264,448,1.778,494,1.187,501,1.597,502,1.597,515,1.354,518,2.945,550,4.53,551,2.175,583,2.915,698,1.354,712,3.727,720,2.727,764,3.421,801,4.799,802,2.857,822,2.857,825,1.778,838,2.857,843,3.684,850,1.597,851,1.462,852,1.778,883,1.778,887,1.778,888,2.566,889,3.299,890,2.053,891,2.053,892,3.299,893,2.053,894,3.299,895,3.299,896,2.053,897,3.299,898,3.299,899,2.053,900,3.582,901,3.299,902,2.053,903,2.053,904,2.053,905,2.053,906,2.053,907,2.053,908,2.053,909,2.053,910,2.053,911,2.053,912,3.299,913,3.299,914,2.053,915,3.299,916,2.053,917,3.299,918,2.053,919,3.299,920,2.053,921,3.299,922,2.053,923,3.299,924,2.053,925,3.299,926,2.053,927,2.053,928,3.299,929,3.299,930,3.299,931,2.857,932,3.299,933,3.299,934,2.053,935,2.053]],["title/classes/RefreshTokenDto.html",[51,0.073,177,2.39]],["body/classes/RefreshTokenDto.html",[3,0.2,4,0.178,5,0.178,9,0.37,20,0.595,23,0.015,25,0.45,36,1.126,38,0.337,50,0.2,51,0.12,57,4.174,74,0.012,75,0.012,81,1.763,85,1.503,177,3.896,178,1.534,181,4.924,184,1.664,211,1.808,332,1.734,354,2.937,358,3.1,384,3.659,388,3.451,390,3.451,394,2.154,562,5.971,639,3.953,936,5.482,937,5.082,938,5.082,939,5.082]],["title/injectables/RefreshTokensProvider.html",[40,0.455,236,2.39]],["body/injectables/RefreshTokensProvider.html",[3,0.138,4,0.122,5,0.122,9,0.254,10,1.124,11,1.529,13,1.597,15,1.267,16,2.713,17,5.436,18,4.421,19,4.421,20,0.577,22,1.17,23,0.016,24,0.804,25,0.437,26,0.877,31,0.795,38,0.38,39,1.618,40,0.577,41,2.147,42,0.52,43,1.625,44,2.147,46,2.147,50,0.138,51,0.066,53,1.534,54,2.484,55,1.488,59,1.413,60,1.053,61,1.549,63,1.592,64,3.021,67,1.549,68,1.479,69,2.713,70,0.828,74,0.01,75,0.01,77,1.8,83,2.484,85,0.828,163,1.053,173,1.529,174,3.833,176,3.833,177,4.032,189,1.191,217,2.713,218,2.3,234,3.891,236,3.033,240,1.709,248,2.713,250,2.3,258,3.382,262,2.3,263,2.016,325,2.016,539,2.713,553,3.021,555,3.021,556,3.021,557,3.021,558,3.021,559,3.021,560,3.021,635,2.713,940,4.949,941,3.488,942,3.488,943,2.713,944,3.488,945,3.488]],["title/classes/SignInDto.html",[51,0.073,191,2.39]],["body/classes/SignInDto.html",[3,0.186,4,0.165,5,0.165,9,0.344,20,0.708,23,0.015,25,0.535,36,1.25,38,0.322,50,0.186,51,0.114,74,0.012,75,0.012,81,1.683,82,3.383,85,1.667,178,1.824,184,1.979,191,3.719,211,1.68,332,1.611,354,3.492,358,3.441,384,3.852,388,3.633,390,3.294,394,2.001,471,4.788,472,4.088,482,5.232,486,4.088,487,4.088,946,4.088,947,4.72,948,4.72,949,4.72]],["title/injectables/SignInProvider.html",[40,0.455,237,2.39]],["body/injectables/SignInProvider.html",[3,0.148,4,0.131,5,0.131,9,0.273,10,1.182,11,1.59,13,1.527,15,1.333,20,0.607,22,1.23,23,0.016,24,0.845,25,0.459,26,0.922,31,0.855,38,0.358,39,1.583,40,0.607,41,2.307,42,0.559,50,0.148,51,0.071,53,1.467,59,1.519,60,1.132,61,1.665,63,1.655,67,1.665,68,1.589,70,0.89,74,0.01,75,0.01,85,0.89,163,1.132,173,1.59,175,4.031,184,1.228,189,1.279,190,4.031,191,4.14,212,2.916,233,3.962,234,3.962,237,3.19,240,1.836,250,2.472,257,3.247,258,3.386,262,2.472,263,2.167,303,3.247,471,2.472,494,2.167,508,2.472,635,2.916,667,2.307,943,2.916,950,5.144,951,3.247,952,3.749,953,3.749,954,3.749,955,5.182,956,3.749,957,3.749,958,3.749,959,3.749,960,3.749]],["title/classes/Tag.html",[51,0.073,440,2.003]],["body/classes/Tag.html",[3,0.187,4,0.166,5,0.166,9,0.345,20,0.709,23,0.015,24,1.089,25,0.623,36,1.361,38,0.322,50,0.239,51,0.09,55,1.43,71,3.445,74,0.012,75,0.012,81,1.686,120,1.551,178,1.828,323,1.836,332,1.616,339,3.857,440,3.124,510,3.992,584,2.582,776,4.31,779,5.007,788,4.751,789,3.301,790,3.371,961,3.683,962,4.735,963,4.735,964,3.371,965,4.101]],["title/controllers/TagsController.html",[88,1.505,966,2.764]],["body/controllers/TagsController.html",[3,0.137,4,0.122,5,0.122,9,0.254,10,1.122,13,0.895,15,0.895,20,0.576,22,1.168,23,0.016,24,0.803,25,0.602,26,0.875,31,1.122,34,2.844,36,1.104,37,1.897,38,0.33,39,0.86,42,0.519,50,0.137,51,0.066,53,0.86,60,1.873,70,1.168,74,0.01,75,0.01,88,1.349,90,1.41,171,2.142,173,1.818,178,1.485,183,3.244,184,2.225,186,3.503,187,3.513,196,3.244,202,1.827,206,3.763,207,3.763,208,3.513,209,3.763,210,2.142,211,1.238,223,3.028,224,2.844,340,4.604,419,3.585,425,3.201,427,1.897,440,3.604,441,4.261,453,4.703,551,2.295,720,3.244,808,3.827,810,3.827,829,3.827,888,3.827,966,3.503,967,3.014,968,4.261,969,3.014,970,3.48,971,3.48,972,3.48,973,4.261,974,3.48,975,3.48,976,3.48,977,3.014,978,3.014,979,3.48,980,3.48,981,3.48,982,3.48,983,3.48]],["title/modules/TagsModule.html",[95,1.382,111,2.39]],["body/modules/TagsModule.html",[3,0.179,4,0.159,5,0.159,23,0.016,24,0.741,38,0.382,42,0.678,50,0.179,51,0.086,74,0.011,75,0.011,90,2.388,95,2.329,97,2.117,98,2.117,99,2.344,100,2.344,101,2.117,102,3.377,103,3.377,111,4.607,114,3.042,115,2.344,116,2.225,118,2.626,119,2.996,120,1.488,419,4.53,440,2.344,789,2.477,796,3.935,885,3.235,964,4.197,966,4.659,977,3.935,984,3.935,985,3.935,986,3.935,987,4.543,988,4.543,989,3.935]],["title/injectables/TagsService.html",[40,0.455,419,2.244]],["body/injectables/TagsService.html",[3,0.121,4,0.107,5,0.107,9,0.223,10,1.023,11,1.882,13,0.788,15,1.154,20,0.685,22,1.388,23,0.016,24,1.061,25,0.518,26,1.04,31,1.211,36,1.157,38,0.332,39,0.757,40,0.526,42,0.457,50,0.121,51,0.058,53,0.757,55,1.355,59,2.369,60,2.029,61,2.359,63,1.629,67,2.359,68,2.252,70,1.261,74,0.009,75,0.009,84,2.896,120,1.003,163,0.925,173,1.882,189,1.813,314,2.864,321,1.581,323,1.188,339,2.594,340,4.105,419,2.594,425,2.316,426,2.02,427,1.67,440,3.357,445,2.383,446,2.383,453,4.105,494,1.771,501,3.491,502,2.383,508,2.02,515,2.02,518,4.164,551,2.02,734,2.383,888,3.491,968,3.887,969,3.887,973,3.887,978,2.653,989,2.653,990,2.653,991,3.063,992,3.063,993,5.312,994,3.063,995,4.488,996,3.063,997,3.063,998,3.063,999,4.488,1000,3.063,1001,3.063,1002,3.063,1003,3.063,1004,3.063,1005,3.063,1006,3.063,1007,3.063,1008,3.063,1009,3.063]],["title/classes/Upload.html",[51,0.073,1010,2.244]],["body/classes/Upload.html",[3,0.142,4,0.126,5,0.126,9,0.263,20,0.777,23,0.015,24,0.95,25,0.675,36,1.379,37,1.968,38,0.31,50,0.199,51,0.068,55,1.09,71,3.668,74,0.01,75,0.01,81,1.406,120,1.182,178,2.003,323,1.399,332,1.232,398,3.926,461,5.6,510,3.328,547,3.437,584,1.968,660,3.838,758,3.328,776,4.723,779,5.275,788,4.893,789,2.752,790,2.57,1010,2.918,1011,2.808,1012,4.528,1013,4.528,1014,5.048,1015,3.609,1016,6.873,1017,3.609,1018,3.609,1019,3.609,1020,4.144,1021,3.609,1022,2.808,1023,2.808,1024,3.609,1025,3.126,1026,2.57,1027,3.126]],["title/interfaces/UploadFile.html",[76,2.003,1028,2.56]],["body/interfaces/UploadFile.html",[3,0.193,4,0.171,5,0.171,9,0.357,23,0.015,24,1.161,25,0.689,36,1.383,38,0.261,50,0.193,74,0.012,75,0.012,76,2.526,78,3.227,81,1.722,547,3.695,660,4.694,1012,5.538,1013,5.538,1020,5.069,1022,3.807,1023,3.807,1028,4.076,1029,4.239,1030,4.239]],["title/injectables/UploadToAwsProvider.html",[40,0.455,1031,2.39]],["body/injectables/UploadToAwsProvider.html",[3,0.134,4,0.119,5,0.248,9,0.248,10,1.105,11,1.51,13,1.58,15,1.246,20,0.661,22,1.339,23,0.016,24,1.157,25,0.5,26,1.003,31,1.105,32,1.758,36,0.606,38,0.346,39,0.842,40,0.568,42,0.508,43,1.587,50,0.134,51,0.064,53,0.842,55,1.463,59,1.38,60,1.703,61,1.513,63,0.949,67,1.513,68,1.444,70,1.339,74,0.009,75,0.009,122,4.941,163,1.029,173,1.51,187,2.097,189,1.163,356,4.885,371,2.65,409,4.197,494,1.969,508,2.246,660,3.195,943,3.77,1010,1.969,1031,2.983,1032,5.321,1033,2.951,1034,4.846,1035,4.846,1036,3.407,1037,3.407,1038,4.846,1039,5.247,1040,3.407,1041,4.846,1042,3.407,1043,5.321,1044,2.65,1045,2.951,1046,3.407,1047,3.407,1048,4.197,1049,3.407,1050,2.951,1051,3.407,1052,3.407,1053,3.407,1054,3.407,1055,2.951,1056,3.407,1057,3.407,1058,3.407,1059,4.846,1060,3.407,1061,3.407,1062,3.407,1063,3.407,1064,3.407,1065,3.407,1066,4.846,1067,3.407,1068,3.407,1069,3.407]],["title/controllers/UploadsController.html",[88,1.505,1070,2.764]],["body/controllers/UploadsController.html",[3,0.155,4,0.138,5,0.24,9,0.287,10,1.223,13,1.014,15,1.014,20,0.462,22,0.936,23,0.016,24,0.995,25,0.475,26,0.701,31,0.899,38,0.365,39,0.974,42,0.588,45,4.34,50,0.155,51,0.075,53,0.974,57,2.599,60,1.619,70,0.936,74,0.01,75,0.01,88,1.528,90,1.597,171,2.426,173,1.632,178,1.19,183,3.536,184,2.143,196,2.599,202,1.463,206,3.536,208,3.301,209,3.536,210,2.426,211,1.403,223,2.426,224,2.278,299,2.599,335,3.066,1010,3.1,1028,3.536,1039,4.742,1070,3.818,1071,3.413,1072,3.941,1073,3.413,1074,3.941,1075,3.941,1076,5.667,1077,3.941,1078,4.645,1079,3.941,1080,3.941,1081,3.941,1082,3.413,1083,3.941,1084,3.413,1085,5.363,1086,4.028,1087,3.413,1088,3.941,1089,3.941,1090,3.941,1091,3.941,1092,3.941,1093,3.941,1094,3.413,1095,3.413,1096,3.941,1097,3.941,1098,3.941]],["title/modules/UploadsModule.html",[95,1.382,112,2.56]],["body/modules/UploadsModule.html",[3,0.178,4,0.158,5,0.158,23,0.016,24,0.734,38,0.391,42,0.671,50,0.178,51,0.085,74,0.011,75,0.011,90,2.374,95,2.318,97,2.097,98,2.097,99,2.323,100,2.323,101,2.097,102,3.362,103,2.323,112,4.993,114,3.024,115,2.323,116,2.205,118,2.602,119,2.968,120,1.474,789,2.454,885,3.205,1010,2.602,1026,4.171,1031,4.515,1070,4.638,1086,4.515,1087,3.898,1099,3.898,1100,3.898,1101,4.501,1102,4.501,1103,4.501,1104,3.898,1105,3.898,1106,4.501]],["title/injectables/UploadsService.html",[40,0.455,1086,2.39]],["body/injectables/UploadsService.html",[3,0.131,4,0.116,5,0.225,9,0.242,10,1.085,11,1.489,13,1.43,15,1.224,20,0.557,22,1.13,23,0.016,24,0.991,25,0.57,26,0.847,31,0.757,38,0.375,39,1.374,40,0.557,42,0.495,43,1.548,50,0.131,51,0.063,53,1.374,55,1.679,59,2.253,60,1.679,61,1.475,63,1.326,67,1.475,68,2.017,70,0.788,74,0.009,75,0.009,87,2.19,120,1.088,122,5.017,163,1.003,173,1.489,189,1.134,197,2.877,314,2.975,320,2.584,321,1.714,323,1.288,330,2.584,372,2.365,426,2.19,660,2.19,1010,3.511,1012,3.702,1013,2.584,1020,2.365,1022,2.584,1023,2.584,1025,2.877,1028,4.239,1031,4.337,1039,4.326,1043,2.877,1044,2.584,1050,2.877,1055,4.122,1073,4.122,1078,2.877,1086,2.929,1104,2.877,1105,2.877,1107,2.877,1108,3.321,1109,3.321,1110,4.759,1111,3.321,1112,3.321,1113,3.321,1114,3.321,1115,3.321,1116,3.321,1117,3.321,1118,3.321,1119,3.321,1120,3.321,1121,3.321,1122,3.321,1123,3.321,1124,3.321,1125,3.321,1126,3.321,1127,3.321,1128,3.321]],["title/classes/User.html",[51,0.073,85,0.921]],["body/classes/User.html",[3,0.15,4,0.133,5,0.133,9,0.277,20,0.791,23,0.016,25,0.663,26,1.242,36,1.408,38,0.318,50,0.206,51,0.099,55,1.146,71,3.156,74,0.01,75,0.01,81,1.457,82,2.786,85,1.241,120,1.244,178,2.04,323,1.472,332,1.296,469,4.257,470,4.257,471,3.943,510,3.447,530,3.943,584,2.07,591,2.954,667,4.159,776,4.81,779,5.329,788,4.972,789,2.851,790,2.704,1129,2.954,1130,3.797,1131,3.797,1132,3.797,1133,3.797,1134,3.797,1135,3.797,1136,5.229,1137,2.704,1138,3.289]],["title/controllers/UsersController.html",[88,1.505,1139,2.764]],["body/controllers/UsersController.html",[3,0.091,4,0.081,5,0.081,9,0.168,10,0.823,11,1.193,13,0.591,15,0.591,20,0.522,22,1.058,23,0.015,24,0.95,25,0.599,26,0.793,31,1.016,34,2.918,36,0.898,38,0.336,39,0.568,42,0.343,50,0.091,51,0.044,53,0.568,60,1.757,63,0.641,70,1.496,74,0.007,75,0.007,84,2.752,85,1.693,88,0.892,90,0.932,171,1.415,172,1.254,173,1.735,178,1.345,183,3.328,184,2.311,186,2.57,187,3.376,189,0.785,196,3.328,202,1.34,206,2.938,207,2.938,208,3.107,209,3.328,210,1.415,211,0.818,214,1.415,216,1.415,221,1.789,223,2.743,224,2.576,258,2.352,349,3.88,358,1.768,425,1.863,427,1.254,466,3.644,489,2.808,492,1.789,496,2.57,537,2.808,547,3.437,586,3.328,602,2.808,667,3.107,720,2.938,757,4.903,770,4.723,806,3.126,808,2.808,810,2.808,817,5.041,818,5.041,829,2.808,830,3.126,833,1.992,837,2.808,840,3.126,843,2.808,846,3.126,847,3.126,849,3.126,850,1.789,851,1.637,1082,1.992,1139,2.57,1140,1.992,1141,4.75,1142,3.859,1143,3.61,1144,2.3,1145,3.61,1146,2.3,1147,2.3,1148,2.3,1149,2.3,1150,3.61,1151,3.61,1152,3.61,1153,2.3,1154,3.61,1155,3.61,1156,3.61,1157,2.3,1158,3.61,1159,2.3,1160,2.3,1161,3.61,1162,2.3,1163,2.3,1164,2.3,1165,2.3,1166,2.3,1167,4.456,1168,1.992,1169,1.992,1170,4.456,1171,2.3,1172,1.992,1173,2.3,1174,2.3,1175,2.3,1176,3.859,1177,2.3,1178,2.3,1179,2.3,1180,2.3,1181,2.3,1182,2.3,1183,2.3,1184,2.3,1185,2.3,1186,2.3,1187,2.3]],["title/modules/UsersModule.html",[95,1.382,113,2.244]],["body/modules/UsersModule.html",[3,0.143,4,0.127,5,0.127,23,0.016,24,0.592,38,0.403,42,0.541,43,1.69,50,0.143,51,0.069,74,0.01,75,0.01,85,1.202,90,2.052,95,2.077,97,1.69,98,1.69,99,1.872,100,1.872,101,1.69,102,3.012,103,3.012,107,3.118,113,4.46,114,2.614,115,1.872,116,1.777,118,2.097,119,2.392,120,1.188,121,2.821,240,2.481,258,3.524,308,4.237,310,2.614,322,2.233,488,4.237,522,4.237,524,3.34,531,4.237,789,1.978,795,3.141,882,4.387,885,2.582,1137,3.606,1139,4.155,1168,3.141,1188,3.141,1189,3.141,1190,3.141,1191,3.627,1192,3.627,1193,3.627,1194,5.065,1195,3.141,1196,3.141,1197,4.387,1198,3.627,1199,3.627,1200,3.627]],["title/injectables/UsersService.html",[40,0.455,258,1.809]],["body/injectables/UsersService.html",[3,0.091,4,0.081,5,0.081,9,0.168,10,0.826,11,1.911,13,1.414,15,0.932,20,0.714,22,1.448,23,0.016,24,0.995,25,0.54,26,1.085,31,1.33,32,2.612,36,1.155,38,0.361,39,1.358,40,0.424,42,0.345,50,0.091,51,0.044,53,1.358,55,0.698,59,0.936,60,1.349,63,1.531,70,1.384,74,0.007,75,0.007,82,2.083,84,1.975,85,1.607,87,2.389,120,0.757,163,0.698,173,1.959,189,1.526,240,1.132,258,1.688,308,3.886,310,1.87,312,3.138,314,2.479,316,1.523,317,3.138,318,3.625,321,1.192,322,1.422,323,0.896,324,2.001,325,1.336,326,2.58,327,1.523,349,2.751,410,1.523,425,2.612,426,1.523,427,1.26,466,3.178,488,3.886,489,2.818,492,2.818,494,1.336,496,1.645,503,2.001,515,1.523,522,3.886,524,2.389,526,3.138,528,3.138,530,1.523,531,3.886,533,3.138,535,3.138,547,3.18,586,3.846,733,3.477,734,1.797,757,3.937,758,1.523,759,3.138,851,1.645,900,5.282,1141,3.138,1142,3.871,1169,2.001,1195,2.001,1196,2.001,1197,3.138,1201,2.001,1202,3.623,1203,2.311,1204,2.311,1205,2.311,1206,2.311,1207,2.311,1208,2.311,1209,3.623,1210,2.311,1211,2.311,1212,2.311,1213,2.311,1214,2.311,1215,2.311,1216,2.311,1217,2.311,1218,2.311,1219,2.311,1220,2.311,1221,2.311,1222,2.311]],["title/coverage.html",[1223,4.129]],["body/coverage.html",[0,2.794,1,1.507,5,0.08,6,1.979,7,1.627,8,1.979,23,0.016,25,0.202,40,0.867,48,1.777,51,0.137,60,0.69,74,0.007,75,0.007,76,2.596,77,1.179,79,1.507,80,2.794,85,1.053,88,2.354,89,1.627,91,1.979,92,1.407,101,1.065,117,1.777,139,1.627,145,1.777,164,1.979,169,1.627,170,1.979,172,1.246,177,1.407,191,1.407,202,1.334,204,1.407,233,1.246,234,1.246,235,1.407,236,1.407,237,1.407,239,1.627,243,1.627,256,1.979,258,1.065,266,1.979,275,1.777,292,1.979,308,1.407,309,2.794,310,1.854,311,2.794,318,1.507,331,1.321,333,2.794,334,2.794,406,1.777,407,1.627,408,1.979,414,1.407,415,1.979,416,1.979,419,1.321,420,1.321,440,1.179,453,1.507,454,1.979,455,1.979,466,1.321,467,1.979,468,2.794,488,1.407,490,1.407,522,1.407,523,2.794,524,2.368,525,1.979,531,1.407,532,1.979,538,1.777,539,2.794,570,1.627,571,2.794,572,2.794,580,1.407,581,1.627,583,1.407,586,1.507,587,1.979,588,1.979,592,1.979,593,1.979,598,1.507,610,1.979,611,1.979,638,1.979,639,2.794,643,1.979,644,1.979,683,1.979,698,1.507,699,1.979,712,1.407,715,1.979,756,1.979,764,1.507,765,1.979,770,1.627,771,1.979,775,2.794,797,1.627,799,1.627,800,1.979,853,1.777,854,1.777,887,1.979,936,1.979,940,1.979,946,1.979,950,1.979,951,1.979,961,2.794,964,1.627,966,1.627,967,1.979,990,1.979,1010,1.321,1011,2.794,1026,1.627,1028,1.507,1029,1.979,1030,1.979,1031,1.407,1032,1.979,1033,1.979,1070,1.627,1071,1.979,1086,1.407,1107,1.979,1129,2.794,1137,1.627,1139,1.627,1140,1.979,1201,1.979,1223,1.777,1224,1.979,1225,2.285,1226,2.285,1227,8.009,1228,6.96,1229,6.47,1230,6.073,1231,7.402,1232,3.111,1233,1.979,1234,1.979,1235,5.806,1236,5.469,1237,1.979,1238,2.285,1239,2.285,1240,2.285,1241,2.285,1242,2.285,1243,2.285,1244,2.285,1245,2.285,1246,2.285,1247,4.438,1248,2.285,1249,2.285,1250,2.285,1251,2.285]],["title/dependencies.html",[98,2.177,1252,2.804]],["body/dependencies.html",[23,0.016,42,0.713,43,2.228,44,2.943,45,3.404,51,0.115,74,0.012,75,0.012,98,2.228,120,1.566,138,3.404,172,2.607,211,1.702,302,4.141,310,2.468,323,1.854,394,2.027,591,3.719,620,4.141,655,3.404,656,3.719,773,4.141,774,4.141,1044,3.719,1045,4.141,1048,4.141,1084,4.141,1253,4.782,1254,7.059,1255,4.782,1256,4.782,1257,4.782,1258,4.782,1259,4.782,1260,4.782,1261,4.782,1262,4.782,1263,4.782,1264,4.782,1265,4.782,1266,4.782,1267,4.782,1268,4.782,1269,4.782,1270,4.782,1271,4.782,1272,4.782,1273,4.782,1274,4.782,1275,4.782,1276,4.782]],["title/miscellaneous/enumerations.html",[1277,1.993,1278,4.046]],["body/miscellaneous/enumerations.html",[9,0.358,23,0.015,74,0.012,75,0.012,202,2.3,214,3.814,337,4.819,349,3.814,350,5.366,374,4.819,375,5.366,376,5.366,377,5.366,399,5.366,402,5.366,410,5.129,1020,4.411,1076,5.366,1094,4.253,1172,4.253,1277,3.023,1278,4.253,1279,4.911,1280,7.128,1281,4.911,1282,6.195,1283,6.195,1284,6.195,1285,4.911,1286,4.911,1287,6.195]],["title/miscellaneous/functions.html",[1277,1.993,1288,4.046]],["body/miscellaneous/functions.html",[9,0.443,23,0.014,74,0.014,75,0.014,101,3.47,1237,5.264,1277,3.741,1288,5.264,1289,6.078]],["title/index.html",[9,0.236,1290,3.237,1291,3.237]],["body/index.html",[4,0.128,23,0.015,74,0.01,75,0.01,116,3.104,184,1.197,358,2.87,433,2.25,439,5.489,655,4.512,659,3.165,837,2.843,931,4.41,1095,3.165,1176,4.41,1223,2.843,1224,3.165,1292,3.655,1293,3.655,1294,5.86,1295,3.655,1296,3.655,1297,3.655,1298,3.655,1299,3.655,1300,5.86,1301,3.655,1302,3.655,1303,3.655,1304,6.338,1305,3.655,1306,7.08,1307,3.655,1308,7.08,1309,3.655,1310,3.655,1311,3.655,1312,5.092,1313,3.655,1314,3.655,1315,3.655,1316,5.86,1317,3.655,1318,5.092,1319,3.655,1320,3.655,1321,3.655,1322,3.655,1323,3.655,1324,3.655,1325,3.655,1326,3.655,1327,5.092,1328,3.655,1329,5.86,1330,3.655,1331,5.489,1332,3.655,1333,3.655,1334,3.655,1335,3.655,1336,3.655,1337,3.655,1338,5.86,1339,3.655,1340,3.655,1341,3.655,1342,3.655,1343,3.655,1344,3.655,1345,5.86,1346,3.655,1347,3.655,1348,3.655,1349,3.655,1350,3.655,1351,3.655,1352,3.655,1353,5.092,1354,3.655,1355,3.655,1356,3.655,1357,3.655,1358,3.655,1359,5.092,1360,3.655,1361,3.655,1362,3.655,1363,5.092,1364,5.092,1365,3.655,1366,3.655,1367,3.655,1368,3.655,1369,3.655,1370,3.655,1371,3.655,1372,3.655,1373,3.655,1374,3.655,1375,3.655,1376,3.655,1377,3.655,1378,3.655,1379,3.655,1380,3.655,1381,3.165]],["title/modules.html",[97,2.473]],["body/modules.html",[23,0.013,74,0.013,75,0.013,96,3.804,97,2.489,107,3.289,108,3.523,109,3.289,110,3.523,111,3.289,112,3.523,113,3.088,1331,6.783,1382,7.832,1383,7.832,1384,7.832]],["title/overview.html",[1385,4.597]],["body/overview.html",[2,2.338,23,0.015,74,0.009,75,0.009,78,1.982,90,1.218,92,3.234,95,1.07,96,5.433,97,1.401,98,1.401,99,1.551,100,1.551,101,1.401,102,1.551,103,1.551,104,2.604,105,2.604,106,2.604,107,4.614,108,4.261,109,4.113,110,4.905,111,4.113,112,4.405,113,4.333,114,2.284,115,1.551,116,1.473,163,0.908,204,4.113,230,2.604,231,2.604,232,2.604,233,3.16,234,2.865,235,3.234,236,3.234,237,3.234,258,3.113,308,3.234,332,1.026,414,3.234,419,3.862,420,3.862,488,3.234,490,4.113,522,3.234,531,3.234,648,2.604,649,2.604,650,2.604,709,2.604,710,2.604,711,2.604,712,4.113,875,2.604,876,2.604,877,2.604,984,2.604,985,2.604,986,2.604,1031,3.234,1086,3.234,1099,2.604,1100,2.604,1188,2.604,1189,2.604,1190,2.604,1385,2.604,1386,3.006,1387,3.006,1388,3.006,1389,3.006,1390,3.006,1391,3.006]],["title/properties.html",[81,1.301,1252,2.804]],["body/properties.html",[23,0.015,74,0.014,75,0.014,81,1.672,184,1.966,433,3.695,1381,5.199,1392,6.003,1393,6.003,1394,6.003]],["title/miscellaneous/variables.html",[1277,1.993,1395,4.046]],["body/miscellaneous/variables.html",[9,0.309,23,0.016,25,0.499,28,3.297,34,2.45,36,1.002,37,2.311,48,4.381,55,1.701,66,3.671,70,1.006,74,0.011,75,0.011,77,2.907,85,1.502,117,3.297,145,4.381,146,3.671,172,3.071,214,3.467,275,4.381,280,4.878,410,4.99,758,4.99,775,3.297,797,4.01,798,3.671,853,4.381,854,3.297,961,3.297,964,4.01,965,3.671,1011,3.297,1026,4.01,1027,3.671,1129,3.297,1137,4.01,1138,3.671,1232,3.671,1233,4.878,1234,3.671,1277,2.609,1395,3.671,1396,4.239,1397,4.239,1398,5.633,1399,4.239,1400,4.239,1401,4.239,1402,4.239,1403,4.239,1404,4.239,1405,5.633,1406,4.239,1407,4.239,1408,4.239,1409,4.239,1410,4.239]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1227,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1393,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1263,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1274,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1262,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1228,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1240,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1230,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1231,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1235,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1236,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1247,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1239,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":360,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":733,"title":{},"body":{"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"injectables/UsersService.html":{}}}],["1/3",{"_index":1242,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":759,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/UsersService.html":{}}}],["10.0.0",{"_index":1254,"title":{},"body":{"dependencies.html":{}}}],["10.0.10",{"_index":1258,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1256,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":1016,"title":{},"body":{"classes/Upload.html":{}}}],["128",{"_index":1014,"title":{},"body":{"classes/Upload.html":{}}}],["16t07:46:32+0000",{"_index":404,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isoptional",{"_index":361,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17",{"_index":1389,"title":{},"body":{"overview.html":{}}}],["17.13.3",{"_index":1268,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":1390,"title":{},"body":{"overview.html":{}}}],["2.0.2",{"_index":1253,"title":{},"body":{"dependencies.html":{}}}],["2.0.5",{"_index":1257,"title":{},"body":{"dependencies.html":{}}}],["2.1689.0",{"_index":1260,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1388,"title":{},"body":{"overview.html":{}}}],["200",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":808,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["2024",{"_index":359,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2525",{"_index":669,"title":{},"body":{"modules/MailModule.html":{}}}],["3.1.10",{"_index":1265,"title":{},"body":{"dependencies.html":{}}}],["3.2.3",{"_index":1255,"title":{},"body":{"dependencies.html":{}}}],["3/5",{"_index":1246,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1241,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1391,"title":{},"body":{"overview.html":{}}}],["4/8",{"_index":1249,"title":{},"body":{"coverage.html":{}}}],["404",{"_index":821,"title":{},"body":{"controllers/PostsController.html":{}}}],["408",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["5.1.1",{"_index":1261,"title":{},"body":{"dependencies.html":{}}}],["5/7",{"_index":1244,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1248,"title":{},"body":{"coverage.html":{}}}],["6.9.15",{"_index":1271,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1245,"title":{},"body":{"coverage.html":{}}}],["60f1b3b3b3b3b3b3b3b3b3",{"_index":864,"title":{},"body":{"controllers/PostsController.html":{}}}],["60f1b3b3b3b3b3b3b3b3b3'})@apibearerauth()@apiresponse({status",{"_index":819,"title":{},"body":{"controllers/PostsController.html":{}}}],["60f1b3b3b3b3b3b3b3b3b3'})@apibearerauth()@patch('/:id",{"_index":844,"title":{},"body":{"controllers/PostsController.html":{}}}],["60f1b3b3b3b3b3b3b3b3b3b3",{"_index":833,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["60f1b3b3b3b3b3b3b3b3b3b3'})@apioperation({summary",{"_index":1149,"title":{},"body":{"controllers/UsersController.html":{}}}],["60f4f2b9c5f4e0001f000000",{"_index":767,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["7",{"_index":1387,"title":{},"body":{"overview.html":{}}}],["7.4.0",{"_index":1259,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1276,"title":{},"body":{"dependencies.html":{}}}],["71",{"_index":1243,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1386,"title":{},"body":{"overview.html":{}}}],["8.6.0",{"_index":1269,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":365,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["9.14.1",{"_index":1266,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["_id",{"_index":515,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["abstract",{"_index":645,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["access",{"_index":274,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["accesstoken",{"_index":561,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["activeuser",{"_index":853,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeuserdata",{"_index":77,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"injectables/CreatePostProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adapter",{"_index":679,"title":{},"body":{"modules/MailModule.html":{}}}],["already",{"_index":445,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/TagsService.html":{}}}],["amazing",{"_index":1369,"title":{},"body":{"index.html":{}}}],["api",{"_index":602,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{},"controllers/UsersController.html":{}}}],["apibearerauth",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["apibody",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apiheaders",{"_index":1085,"title":{},"body":{"controllers/UploadsController.html":{}}}],["apioperation",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":805,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiparam",{"_index":849,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":384,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["apiproperty()@isarray()@isoptional()@isstring({each",{"_index":380,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty()@isstring()@minlength(4)@isnotempty",{"_index":382,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({description",{"_index":354,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["apiproperty({enum",{"_index":346,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":385,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isdate()@isoptional",{"_index":575,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":342,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring()@type(undefined",{"_index":589,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl",{"_index":344,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":1170,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["apitags('authentication",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('google",{"_index":606,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["apitags('posts",{"_index":857,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('tags",{"_index":980,"title":{},"body":{"controllers/TagsController.html":{}}}],["apitags('uploads",{"_index":1088,"title":{},"body":{"controllers/UploadsController.html":{}}}],["apitags('users",{"_index":1174,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":89,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1176,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application.'})@apiquery({name",{"_index":1153,"title":{},"body":{"controllers/UsersController.html":{}}}],["application.'})@apiresponse({status",{"_index":1145,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":1299,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":96,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":92,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["audience",{"_index":555,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["auth",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"controllers/UsersController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.none",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["auth.controller",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/config/jwt.config",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/google",{"_index":594,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["auth/guards/access",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/authentication/authentication.guard",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_type_key",{"_index":275,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":169,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":596,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{}}}],["authenticate(@body",{"_index":608,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authenticate(googletokendto",{"_index":597,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authentication",{"_index":595,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.controller",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{}}}],["authentication.controller.ts",{"_index":593,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:24",{"_index":603,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service.ts",{"_index":611,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:17",{"_index":615,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:31",{"_index":617,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:37",{"_index":616,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticationguard",{"_index":139,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":284,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authmodule",{"_index":107,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":433,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PaginationProvider.html":{},"classes/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["author's",{"_index":909,"title":{},"body":{"injectables/PostsService.html":{}}}],["authorization",{"_index":1093,"title":{},"body":{"controllers/UploadsController.html":{}}}],["authservice",{"_index":204,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":276,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":279,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":267,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":280,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((type",{"_index":285,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["await",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1044,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"dependencies.html":{}}}],["aws.provider",{"_index":1104,"title":{},"body":{"modules/UploadsModule.html":{},"injectables/UploadsService.html":{}}}],["aws.provider.ts",{"_index":1033,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["aws.provider.ts:14",{"_index":1040,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws.provider.ts:34",{"_index":1042,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws.provider.ts:8",{"_index":1037,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["backers",{"_index":1370,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":426,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('please",{"_index":438,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["badrequestexception('post",{"_index":444,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["badrequestexception('tag",{"_index":1003,"title":{},"body":{"injectables/TagsService.html":{}}}],["badrequestexception('unsupported",{"_index":1121,"title":{},"body":{"injectables/UploadsService.html":{}}}],["badrequestexception('user",{"_index":503,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["based",{"_index":830,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["baseurl",{"_index":737,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bcrypt",{"_index":302,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":307,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt(10",{"_index":305,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(data",{"_index":306,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":243,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":1094,"title":{},"body":{"controllers/UploadsController.html":{},"miscellaneous/enumerations.html":{}}}],["blog",{"_index":674,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/PostsController.html":{}}}],["blog.'})@apiresponse({status",{"_index":807,"title":{},"body":{"controllers/PostsController.html":{}}}],["board",{"_index":1362,"title":{},"body":{"index.html":{}}}],["body",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":956,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["bootstrap",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1384,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1382,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1050,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["buffer",{"_index":296,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["building",{"_index":1295,"title":{},"body":{"index.html":{}}}],["calculating",{"_index":742,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["canactivate",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["catch",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["catch((err",{"_index":290,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["channel",{"_index":1333,"title":{},"body":{"index.html":{}}}],["check",{"_index":439,"title":{},"body":{"injectables/CreatePostProvider.html":{},"index.html":{}}}],["class",{"_index":51,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/Tag.html":{},"classes/Upload.html":{},"classes/User.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":332,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/Tag.html":{},"classes/Upload.html":{},"classes/User.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":1165,"title":{},"body":{"controllers/UsersController.html":{}}}],["clientid",{"_index":621,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clientsecret",{"_index":623,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["cloud",{"_index":1122,"title":{},"body":{"injectables/UploadsService.html":{}}}],["cluster_appmodule",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":648,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":650,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":649,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":709,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":710,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":711,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":875,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_exports",{"_index":876,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":878,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":877,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":984,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":985,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":986,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_uploadsmodule",{"_index":1099,"title":{},"body":{"modules/UploadsModule.html":{},"overview.html":{}}}],["cluster_uploadsmodule_providers",{"_index":1100,"title":{},"body":{"modules/UploadsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1188,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1189,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1190,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":1324,"title":{},"body":{"index.html":{}}}],["common/pagination/pagination.module",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":960,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["comparepassword",{"_index":293,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepassword(data",{"_index":295,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["config",{"_index":662,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('appconfig.mailhost",{"_index":665,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('appconfig.smtppassword",{"_index":672,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('appconfig.smtpusername",{"_index":670,"title":{},"body":{"modules/MailModule.html":{}}}],["config/app.config",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["config/profile.config",{"_index":1199,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":1200,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["configservice.get('database.dbname",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.uri",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["conflictexception",{"_index":320,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/UploadsService.html":{}}}],["conflictexception(error",{"_index":330,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/UploadsService.html":{}}}],["connecting",{"_index":933,"title":{},"body":{"injectables/PostsService.html":{}}}],["const",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PaginationProvider.html":{},"classes/Post.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(configservice",{"_index":1036,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["constructor(jwtconfiguration",{"_index":614,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["constructor(jwtservice",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["constructor(mailerservice",{"_index":685,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(postmodel",{"_index":418,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["constructor(private",{"_index":94,"title":{},"body":{"controllers/AppController.html":{}}}],["constructor(reflector",{"_index":270,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(request",{"_index":717,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(tagsmodel",{"_index":991,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(uploadsmodel",{"_index":1108,"title":{},"body":{"injectables/UploadsService.html":{}}}],["constructor(usermodel",{"_index":313,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{}}}],["constructor(usersmodel",{"_index":1203,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["content",{"_index":335,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{},"controllers/UploadsController.html":{}}}],["contenttype",{"_index":1054,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["context",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/MailService.html":{}}}],["context.getclass",{"_index":283,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.gethandler",{"_index":282,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["controller",{"_index":88,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('auth/google",{"_index":607,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('posts",{"_index":856,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":979,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('uploads",{"_index":1090,"title":{},"body":{"controllers/UploadsController.html":{}}}],["controller('users",{"_index":1173,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":90,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["convert",{"_index":509,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["courses",{"_index":1340,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1223,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":425,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PaginationProvider.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["created",{"_index":810,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["creategoogleuser",{"_index":312,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UsersService.html":{}}}],["creategoogleuser(googleuser",{"_index":317,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UsersService.html":{}}}],["creategoogleuserprovider",{"_index":308,"title":{"injectables/CreateGoogleUserProvider.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["createparamdecorator",{"_index":1404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":417,"title":{},"body":{"injectables/CreatePostProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(createpostdto",{"_index":423,"title":{},"body":{"injectables/CreatePostProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":331,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostdto.tags.length",{"_index":436,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["createpostdto})@post()@apibearerauth",{"_index":811,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostmetaoptionsdto",{"_index":406,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["createpostprovider",{"_index":414,"title":{"injectables/CreatePostProvider.html":{}},"body":{"injectables/CreatePostProvider.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["creates",{"_index":806,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["createtag",{"_index":968,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createtag(@body",{"_index":981,"title":{},"body":{"controllers/TagsController.html":{}}}],["createtag(createtagdto",{"_index":969,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createtagdto",{"_index":453,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createtagdto.name",{"_index":1002,"title":{},"body":{"injectables/TagsService.html":{}}}],["createtagdto.slug",{"_index":1001,"title":{},"body":{"injectables/TagsService.html":{}}}],["createuser",{"_index":489,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(@body",{"_index":1185,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":492,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":466,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":500,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserprovider",{"_index":488,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["creating",{"_index":735,"title":{},"body":{"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{}}}],["ctx",{"_index":1407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":706,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":704,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["data",{"_index":299,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"controllers/UploadsController.html":{}}}],["database",{"_index":87,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["database.'})@apiparam({name",{"_index":816,"title":{},"body":{"controllers/PostsController.html":{}}}],["database.'})@apiresponse({status",{"_index":839,"title":{},"body":{"controllers/PostsController.html":{}}}],["databaseconfig",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":353,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/Post.html":{}}}],["date().gettime().tostring().trim",{"_index":1068,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["dbname",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["declarations",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"classes/Upload.html":{},"controllers/UploadsController.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["decorators/auth.decorator",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["deeper",{"_index":1335,"title":{},"body":{"index.html":{}}}],["default",{"_index":758,"title":{},"body":{"classes/PaginationQueryDto.html":{},"classes/Post.html":{},"classes/Upload.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":269,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defaults",{"_index":673,"title":{},"body":{"modules/MailModule.html":{}}}],["defaultvaluepipe",{"_index":1166,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":1180,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":1178,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":518,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["delete('/:id",{"_index":871,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('/:id')@apioperation({summary",{"_index":814,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete(id",{"_index":995,"title":{},"body":{"injectables/TagsService.html":{}}}],["deleted",{"_index":872,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleted'})@apiresponse({status",{"_index":820,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost",{"_index":802,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(@param('id",{"_index":873,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":813,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(postid",{"_index":892,"title":{},"body":{"injectables/PostsService.html":{}}}],["deletes",{"_index":815,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleting",{"_index":1009,"title":{},"body":{"injectables/TagsService.html":{}}}],["dependencies",{"_index":98,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneUserByEmailProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":1309,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1347,"title":{},"body":{"index.html":{}}}],["dir",{"_index":676,"title":{},"body":{"modules/MailModule.html":{}}}],["discord",{"_index":1332,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1334,"title":{},"body":{"index.html":{}}}],["document",{"_index":510,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/Post.html":{},"classes/Tag.html":{},"classes/Upload.html":{},"classes/User.html":{}}}],["documentation",{"_index":1224,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":485,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["doe'})@isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":478,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["draft",{"_index":375,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":427,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":851,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/google",{"_index":605,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["dtos/pagination",{"_index":723,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["dtos/patch",{"_index":850,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["dtos/refresh",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["dtos/signin.dto",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["duplicate",{"_index":452,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["e2e",{"_index":1319,"title":{},"body":{"index.html":{}}}],["each",{"_index":405,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":1296,"title":{},"body":{"index.html":{}}}],["ejs",{"_index":1264,"title":{},"body":{"dependencies.html":{}}}],["ejsadapter",{"_index":657,"title":{},"body":{"modules/MailModule.html":{}}}],["email",{"_index":82,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleUser.html":{},"injectables/MailService.html":{},"classes/SignInDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["email.provider",{"_index":1195,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["email.provider.ts",{"_index":532,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["email.provider.ts:11",{"_index":534,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["email.provider.ts:18",{"_index":536,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["encrypted",{"_index":297,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["enddate",{"_index":573,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["ensure",{"_index":450,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["enterprise",{"_index":1352,"title":{},"body":{"index.html":{}}}],["enum",{"_index":398,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{},"classes/Upload.html":{}}}],["enumerations",{"_index":1278,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/auth",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["enums/file",{"_index":1022,"title":{},"body":{"classes/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{}}}],["enums/post",{"_index":395,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{}}}],["env",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["environmentvalidation",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":291,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["error",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["example",{"_index":358,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exclude",{"_index":1136,"title":{},"body":{"classes/User.html":{}}}],["exec",{"_index":734,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["executioncontext",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":822,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["existing",{"_index":838,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["existingpost",{"_index":442,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["existingtag",{"_index":999,"title":{},"body":{"injectables/TagsService.html":{}}}],["existinguser",{"_index":498,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exists",{"_index":446,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/TagsService.html":{}}}],["experience",{"_index":1337,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":546,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["export",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/PaginationProvider.html":{},"controllers/UploadsController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1039,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{}}}],["extends",{"_index":584,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"classes/Tag.html":{},"classes/Upload.html":{},"classes/User.html":{}}}],["extension",{"_index":1066,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["extract",{"_index":1059,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["extractrequestfromheader",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(request",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjzdwiioiixmjm0nty3odkwiiwiawf0ijoxnjiynze4mzi2lcjlehaioje2mji3mtgzmzz9.6z5kvq8y8r6v5vp1v1vhv6xx2bxlv9z",{"_index":939,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjzdwiioiixmjm0nty3odkwiiwiawf0ijoxnjiynze4mzi2lcjlehaioje2mji3mtgzmzz9.6z5kvq8y8r6v5vp1v1vhv6xx2bxlv9z'})@isnotempty()@isstring",{"_index":937,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["eyjhbgcioijsuzi1niisimtpzci6ijqzzjmzzji",{"_index":642,"title":{},"body":{"classes/GoogleTokenDto.html":{}}}],["eyjhbgcioijsuzi1niisimtpzci6ijqzzjmzzji'})@isnotempty",{"_index":640,"title":{},"body":{"classes/GoogleTokenDto.html":{}}}],["false",{"_index":667,"title":{},"body":{"modules/MailModule.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/SignInProvider.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["false})@apiquery({name",{"_index":1157,"title":{},"body":{"controllers/UsersController.html":{}}}],["false})@apiresponse({status",{"_index":1159,"title":{},"body":{"controllers/UsersController.html":{}}}],["false})@exclude",{"_index":1134,"title":{},"body":{"classes/User.html":{}}}],["family_name",{"_index":632,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["featuredimageurl",{"_index":336,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{}}}],["fetch",{"_index":537,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["fetched",{"_index":829,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["fetches",{"_index":1150,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetching",{"_index":502,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["few",{"_index":1322,"title":{},"body":{"index.html":{}}}],["field",{"_index":1405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["file.buffer",{"_index":1052,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["file.interface",{"_index":1113,"title":{},"body":{"injectables/UploadsService.html":{}}}],["file.interface.ts",{"_index":1030,"title":{},"body":{"interfaces/UploadFile.html":{},"coverage.html":{}}}],["file.mimetype",{"_index":1055,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["file.originalname.split('.')[0",{"_index":1061,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["file.size",{"_index":1126,"title":{},"body":{"injectables/UploadsService.html":{}}}],["fileinterceptor",{"_index":1083,"title":{},"body":{"controllers/UploadsController.html":{}}}],["filetypes",{"_index":1020,"title":{},"body":{"classes/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{},"miscellaneous/enumerations.html":{}}}],["filetypes.image",{"_index":1025,"title":{},"body":{"classes/Upload.html":{},"injectables/UploadsService.html":{}}}],["fileupload",{"_index":1034,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["fileupload(file",{"_index":1038,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["final",{"_index":748,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["finalresponse",{"_index":750,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["find",{"_index":900,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["find(query",{"_index":727,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["findall",{"_index":888,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["findall(postquery",{"_index":895,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall(tags",{"_index":973,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["findonebyemail",{"_index":533,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["findonebyemail(email",{"_index":535,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["findonebygoogleid",{"_index":526,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UsersService.html":{}}}],["findonebygoogleid(googleid",{"_index":528,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UsersService.html":{}}}],["findonebygoogleidprovider",{"_index":522,"title":{"injectables/FindOneByGoogleIdProvider.html":{}},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["findonebyid",{"_index":1202,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(_id",{"_index":1209,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyslug",{"_index":889,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyslug(slug",{"_index":898,"title":{},"body":{"injectables/PostsService.html":{}}}],["findoneuserbyemailprovider",{"_index":531,"title":{"injectables/FindOneUserByEmailProvider.html":{}},"body":{"injectables/FindOneUserByEmailProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["first",{"_index":474,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["firstname",{"_index":469,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleUser.html":{},"classes/User.html":{}}}],["follow",{"_index":1355,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":1217,"title":{},"body":{"injectables/UsersService.html":{}}}],["framework",{"_index":1294,"title":{},"body":{"index.html":{}}}],["full",{"_index":1351,"title":{},"body":{"index.html":{}}}],["function",{"_index":1238,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1288,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["genarate",{"_index":1124,"title":{},"body":{"injectables/UploadsService.html":{}}}],["generate",{"_index":943,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{}}}],["generatefilename",{"_index":1035,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["generatefilename(file",{"_index":1041,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["generatetokens",{"_index":540,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokens(user",{"_index":543,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokensprovider",{"_index":234,"title":{"injectables/GenerateTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["get('/:id",{"_index":1175,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apibearerauth()@apiparam({name",{"_index":1148,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":860,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/:userid?')@apioperation({summary",{"_index":826,"title":{},"body":{"controllers/PostsController.html":{}}}],["get()@apibearerauth()@apioperation({summary",{"_index":974,"title":{},"body":{"controllers/TagsController.html":{}}}],["gethello",{"_index":165,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":803,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":824,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostsbasedto",{"_index":570,"title":{"classes/GetPostsBaseDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"coverage.html":{}}}],["getpostsdto",{"_index":583,"title":{"classes/GetPostsDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["gets",{"_index":827,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":1290,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":1161,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserparamdto.id",{"_index":1181,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers",{"_index":1142,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers(getuserparamdto",{"_index":1147,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":1211,"title":{},"body":{"injectables/UsersService.html":{}}}],["getusersparamdto",{"_index":586,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["given_name",{"_index":631,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["global",{"_index":652,"title":{},"body":{"modules/MailModule.html":{}}}],["google",{"_index":310,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["google'})@apibody({description",{"_index":600,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["googleauthenticationcontroller",{"_index":239,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["googleauthenticationservice",{"_index":235,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["googleid",{"_index":530,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleUser.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["googletokendto",{"_index":598,"title":{"classes/GoogleTokenDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["googletokendto.token",{"_index":630,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["googleuser",{"_index":318,"title":{"interfaces/GoogleUser.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"interfaces/GoogleUser.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["graph",{"_index":1342,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1366,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"overview.html":{}}}],["hands",{"_index":1336,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1325,"title":{},"body":{"index.html":{}}}],["hashing.provider",{"_index":303,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashingprovider",{"_index":233,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":294,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(data",{"_index":300,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hello",{"_index":167,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1349,"title":{},"body":{"index.html":{}}}],["here",{"_index":1373,"title":{},"body":{"index.html":{}}}],["host",{"_index":664,"title":{},"body":{"modules/MailModule.html":{}}}],["http://localhost:3000",{"_index":697,"title":{},"body":{"injectables/MailService.html":{}}}],["httpcode",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://${this.configservice.get('appconfig.awscloudfronturl')}/${name",{"_index":1125,"title":{},"body":{"injectables/UploadsService.html":{}}}],["https://nestjs.com",{"_index":1378,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["id",{"_index":84,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id.provider",{"_index":1196,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["id.provider.ts",{"_index":525,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"coverage.html":{}}}],["id.provider.ts:14",{"_index":529,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["id.provider.ts:7",{"_index":527,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["identifier",{"_index":1225,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":441,"title":{},"body":{"injectables/CreatePostProvider.html":{},"controllers/TagsController.html":{}}}],["idtoken",{"_index":629,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["if(!user",{"_index":1216,"title":{},"body":{"injectables/UsersService.html":{}}}],["image",{"_index":1076,"title":{},"body":{"controllers/UploadsController.html":{},"miscellaneous/enumerations.html":{}}}],["image/gif",{"_index":1117,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/jpeg",{"_index":1118,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/jpg",{"_index":1119,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/png'].includes",{"_index":1120,"title":{},"body":{"injectables/UploadsService.html":{}}}],["images",{"_index":1089,"title":{},"body":{"controllers/UploadsController.html":{}}}],["implements",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["import",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}}}],["in')@auth(authtype.none)@httpcode(httpstatus.ok)@apioperation({summary",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["in'})@apiresponse({status",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["in.provider",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["in.provider.ts",{"_index":951,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["in.provider.ts:14",{"_index":952,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:27",{"_index":953,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(jwtconfig.key",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["inject(request",{"_index":726,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["injectable",{"_index":40,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":163,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":725,"title":{},"body":{"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{}}}],["injectmodel",{"_index":321,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(post.name",{"_index":432,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["injectmodel(tag.name",{"_index":998,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectmodel(upload.name",{"_index":1115,"title":{},"body":{"injectables/UploadsService.html":{}}}],["injectmodel(user.name",{"_index":327,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["inlinecssenabled",{"_index":680,"title":{},"body":{"modules/MailModule.html":{}}}],["inside",{"_index":86,"title":{},"body":{"interfaces/ActiveUserData.html":{}}}],["installcompile",{"_index":1307,"title":{},"body":{"index.html":{}}}],["instance",{"_index":287,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["instance.canactivate(context",{"_index":289,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["interact",{"_index":1343,"title":{},"body":{"index.html":{}}}],["interface",{"_index":76,"title":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleUser.html":{},"interfaces/Paginated.html":{},"interfaces/UploadFile.html":{}},"body":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleUser.html":{},"interfaces/Paginated.html":{},"interfaces/UploadFile.html":{},"coverage.html":{}}}],["interfaces",{"_index":78,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleUser.html":{},"interfaces/Paginated.html":{},"interfaces/UploadFile.html":{},"overview.html":{}}}],["interfaces/active",{"_index":553,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["interfaces/google",{"_index":324,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UsersService.html":{}}}],["interfaces/paginated.interface",{"_index":724,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["interfaces/upload",{"_index":1112,"title":{},"body":{"injectables/UploadsService.html":{}}}],["intersectiontype",{"_index":579,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["intersectiontype(getpostsbasedto",{"_index":585,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["isarray",{"_index":386,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isdate",{"_index":578,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["isemail",{"_index":482,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isenum",{"_index":387,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":403,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":400,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isequal",{"_index":955,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["isglobal",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":388,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["iso8601",{"_index":357,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":389,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["isoptional()@ispositive",{"_index":760,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["ispositive",{"_index":763,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isrequired",{"_index":779,"title":{},"body":{"classes/Post.html":{},"classes/Tag.html":{},"classes/Upload.html":{},"classes/User.html":{}}}],["isstring",{"_index":390,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isnotempty",{"_index":411,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["issuer",{"_index":557,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["isurl",{"_index":391,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["itemsperpage",{"_index":702,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["itself",{"_index":1060,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["javascript",{"_index":462,"title":{},"body":{"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{}}}],["javascript'})@isstring()@isnotempty()@matches(/^[a",{"_index":458,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["javascript'})@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":456,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["job",{"_index":1359,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1361,"title":{},"body":{"index.html":{}}}],["john",{"_index":483,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john'})@isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":475,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["joi",{"_index":1267,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":659,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":677,"title":{},"body":{"modules/MailModule.html":{}}}],["jwtconfig",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["jwtconfiguration",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["jwtmodule",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtservice",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["kamil",{"_index":1375,"title":{},"body":{"index.html":{}}}],["key",{"_index":409,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"injectables/UploadToAwsProvider.html":{}}}],["keyof",{"_index":1406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":477,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["lastname",{"_index":470,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleUser.html":{},"classes/User.html":{}}}],["later",{"_index":932,"title":{},"body":{"injectables/PostsService.html":{}}}],["learn",{"_index":1328,"title":{},"body":{"index.html":{}}}],["legend",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letters",{"_index":368,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["library",{"_index":620,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["license",{"_index":1381,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1364,"title":{},"body":{"index.html":{}}}],["limit",{"_index":757,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["limit(limit",{"_index":1220,"title":{},"body":{"injectables/UsersService.html":{}}}],["limit(paginationquery.limit",{"_index":730,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["linkedin",{"_index":1357,"title":{},"body":{"index.html":{}}}],["links",{"_index":700,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["list",{"_index":1151,"title":{},"body":{"controllers/UsersController.html":{}}}],["literal",{"_index":701,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["load",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["localhost:3000/posts/:userid",{"_index":859,"title":{},"body":{"controllers/PostsController.html":{}}}],["loginticket",{"_index":627,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginticket.getpayload",{"_index":633,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginurl",{"_index":696,"title":{},"body":{"injectables/MailService.html":{}}}],["looking",{"_index":1358,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1354,"title":{},"body":{"index.html":{}}}],["mail/mail.module",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["mailermodule",{"_index":654,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule.forrootasync",{"_index":661,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":686,"title":{},"body":{"injectables/MailService.html":{}}}],["mailmodule",{"_index":108,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"modules.html":{},"overview.html":{}}}],["mailservice",{"_index":490,"title":{"injectables/MailService.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"coverage.html":{},"overview.html":{}}}],["matches",{"_index":392,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matches(/^[a",{"_index":401,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(totalitems",{"_index":744,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["maxlength",{"_index":461,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/Upload.html":{}}}],["maxlength(256",{"_index":464,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":465,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":484,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":366,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["meta",{"_index":407,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["metadata",{"_index":1273,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":1057,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["mime",{"_index":1012,"title":{},"body":{"classes/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{}}}],["minlength",{"_index":393,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":463,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":397,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["miscellaneous",{"_index":1277,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1363,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1312,"title":{},"body":{"index.html":{}}}],["model",{"_index":314,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["model.countdocuments(query",{"_index":743,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["module",{"_index":95,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":97,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":656,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/ejs.adapter",{"_index":658,"title":{},"body":{"modules/MailModule.html":{}}}],["moment",{"_index":930,"title":{},"body":{"injectables/PostsService.html":{}}}],["mongoose",{"_index":323,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/PaginationProvider.html":{},"classes/Post.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"injectables/UploadsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoose.schema.types.objectid",{"_index":794,"title":{},"body":{"classes/Post.html":{}}}],["mongoosemodule",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":885,"title":{},"body":{"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":1329,"title":{},"body":{"index.html":{}}}],["multipart/form",{"_index":1092,"title":{},"body":{"controllers/UploadsController.html":{}}}],["myśliwiec",{"_index":1376,"title":{},"body":{"index.html":{}}}],["name",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["name.replace(/\\s/g",{"_index":1064,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["need",{"_index":1348,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1300,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1380,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":655,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":773,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1084,"title":{},"body":{"controllers/UploadsController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newpost",{"_index":447,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["newpost.save",{"_index":449,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["newtag",{"_index":1004,"title":{},"body":{"injectables/TagsService.html":{}}}],["newtag.save",{"_index":1006,"title":{},"body":{"injectables/TagsService.html":{}}}],["newurl",{"_index":740,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${nextpage",{"_index":753,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${paginationquery.page",{"_index":755,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${previouspage",{"_index":752,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${totalpages",{"_index":754,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=1",{"_index":751,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":504,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["newuser.save",{"_index":507,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.toobject",{"_index":514,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["next",{"_index":707,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["nextpage",{"_index":746,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":1293,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":1270,"title":{},"body":{"dependencies.html":{}}}],["none",{"_index":1285,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notfoundexception",{"_index":903,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception('the",{"_index":912,"title":{},"body":{"injectables/PostsService.html":{}}}],["npm",{"_index":1306,"title":{},"body":{"index.html":{}}}],["number",{"_index":547,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/Upload.html":{},"interfaces/UploadFile.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["oauth2client",{"_index":619,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauth2client(clientid",{"_index":626,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauthclient",{"_index":612,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":512,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["obtained",{"_index":601,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{}}}],["offer",{"_index":1360,"title":{},"body":{"index.html":{}}}],["official",{"_index":1338,"title":{},"body":{"index.html":{}}}],["onboarding",{"_index":691,"title":{},"body":{"injectables/MailService.html":{}}}],["one",{"_index":524,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["onmoduleinit",{"_index":613,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["open",{"_index":1365,"title":{},"body":{"index.html":{}}}],["optional",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":681,"title":{},"body":{"modules/MailModule.html":{}}}],["options.dto.ts",{"_index":408,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":412,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.dto.ts:9",{"_index":413,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["out",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1385,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1252,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":349,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["pages",{"_index":1155,"title":{},"body":{"controllers/UsersController.html":{}}}],["paginated",{"_index":698,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["paginatequery",{"_index":716,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatequery(paginationquery",{"_index":719,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pagination",{"_index":1156,"title":{},"body":{"controllers/UsersController.html":{}}}],["paginationmodule",{"_index":109,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":712,"title":{"injectables/PaginationProvider.html":{}},"body":{"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquery",{"_index":722,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.limit",{"_index":745,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.page",{"_index":732,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto",{"_index":580,"title":{"classes/PaginationQueryDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["param",{"_index":846,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":866,"title":{},"body":{"controllers/PostsController.html":{}}}],["param('userid",{"_index":861,"title":{},"body":{"controllers/PostsController.html":{}}}],["param.dto",{"_index":1169,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":588,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:11",{"_index":590,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":1167,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":1350,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":769,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":766,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":772,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["pass",{"_index":671,"title":{},"body":{"modules/MailModule.html":{}}}],["password",{"_index":471,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/User.html":{}}}],["password123",{"_index":487,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["password123#'})@isnotempty()@isstring",{"_index":948,"title":{},"body":{"classes/SignInDto.html":{}}}],["password123#'})@isstring()@isnotempty",{"_index":480,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["patch",{"_index":847,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch('/:id",{"_index":865,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch()@apibearerauth()@apioperation({summary",{"_index":1163,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":764,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchpostdto.content",{"_index":916,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.featuredimageurl",{"_index":924,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.posttype",{"_index":920,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.publishon",{"_index":926,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.slug",{"_index":922,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.status",{"_index":918,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.title",{"_index":914,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto})@apiparam({name",{"_index":842,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchpostsdto",{"_index":836,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchpostsdto.id",{"_index":867,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchuser",{"_index":1143,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":1187,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":1162,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":770,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["path",{"_index":660,"title":{},"body":{"modules/MailModule.html":{},"classes/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["path.extname(file.originalname",{"_index":1067,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["payload",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["plain",{"_index":511,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["please",{"_index":931,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["populate('author",{"_index":729,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["populate('tags",{"_index":728,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["port",{"_index":668,"title":{},"body":{"modules/MailModule.html":{}}}],["position",{"_index":1158,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":347,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":202,"title":{"classes/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/PatchPostDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post('file",{"_index":1096,"title":{},"body":{"controllers/UploadsController.html":{}}}],["post('refresh",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('sign",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apibearerauth()@apioperation({summary",{"_index":970,"title":{},"body":{"controllers/TagsController.html":{}}}],["post()@apioperation({summary",{"_index":599,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["post()@useinterceptors(classserializerinterceptor)@auth(authtype.none)@apioperation({summary",{"_index":1144,"title":{},"body":{"controllers/UsersController.html":{}}}],["post.content",{"_index":915,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":428,"title":{},"body":{"injectables/CreatePostProvider.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":334,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:10",{"_index":768,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:20",{"_index":383,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:28",{"_index":352,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:39",{"_index":373,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:47",{"_index":379,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:52",{"_index":343,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:57",{"_index":345,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:64",{"_index":362,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:70",{"_index":381,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.featuredimageurl",{"_index":923,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.name",{"_index":886,"title":{},"body":{"modules/PostsModule.html":{}}}],["post.posttype",{"_index":919,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.provider",{"_index":883,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.provider.ts",{"_index":416,"title":{},"body":{"injectables/CreatePostProvider.html":{},"coverage.html":{}}}],["post.provider.ts:18",{"_index":421,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["post.provider.ts:38",{"_index":424,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["post.publishon",{"_index":925,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.save",{"_index":927,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.schema",{"_index":429,"title":{},"body":{"injectables/CreatePostProvider.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.slug",{"_index":921,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":917,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.title",{"_index":913,"title":{},"body":{"injectables/PostsService.html":{}}}],["postid",{"_index":894,"title":{},"body":{"injectables/PostsService.html":{}}}],["postmodel",{"_index":422,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["postquery",{"_index":825,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts",{"_index":801,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts.controller",{"_index":880,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.dto",{"_index":852,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts.dto.ts",{"_index":572,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"coverage.html":{}}}],["posts.dto.ts:14",{"_index":576,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["posts.dto.ts:9",{"_index":577,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["posts.service",{"_index":430,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["posts/posts.module",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["postschema",{"_index":797,"title":{},"body":{"classes/Post.html":{},"modules/PostsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["postscontroller",{"_index":799,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":110,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":420,"title":{"injectables/PostsService.html":{}},"body":{"injectables/CreatePostProvider.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":374,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":793,"title":{},"body":{"classes/Post.html":{}}}],["posttype",{"_index":337,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":792,"title":{},"body":{"classes/Post.html":{}}}],["prefix",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["previous",{"_index":708,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["previouspage",{"_index":747,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["private",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":929,"title":{},"body":{"injectables/PostsService.html":{}}}],["process.env.node_env",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":1314,"title":{},"body":{"index.html":{}}}],["profileconfig",{"_index":1198,"title":{},"body":{"modules/UsersModule.html":{}}}],["progressive",{"_index":1292,"title":{},"body":{"index.html":{}}}],["project",{"_index":1304,"title":{},"body":{"index.html":{}}}],["promise",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":563,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["promise.resolve",{"_index":288,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["prop",{"_index":788,"title":{},"body":{"classes/Post.html":{},"classes/Tag.html":{},"classes/Upload.html":{},"classes/User.html":{}}}],["prop({type",{"_index":776,"title":{},"body":{"classes/Post.html":{},"classes/Tag.html":{},"classes/Upload.html":{},"classes/User.html":{}}}],["properties",{"_index":81,"title":{"properties.html":{}},"body":{"interfaces/ActiveUserData.html":{},"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/Post.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/Tag.html":{},"classes/Upload.html":{},"interfaces/UploadFile.html":{},"classes/User.html":{},"properties.html":{}}}],["property",{"_index":519,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/PostsController.html":{}}}],["provide",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["provided",{"_index":908,"title":{},"body":{"injectables/PostsService.html":{}}}],["providers",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/bcrypt.provider",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/create",{"_index":882,"title":{},"body":{"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["providers/find",{"_index":1194,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/generate",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/google",{"_index":604,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["providers/hashing.provider",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/mail.service",{"_index":653,"title":{},"body":{"modules/MailModule.html":{}}}],["providers/pagination.provider",{"_index":714,"title":{},"body":{"modules/PaginationModule.html":{}}}],["providers/posts.service",{"_index":848,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/providers.service",{"_index":1087,"title":{},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{}}}],["providers/refresh",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/sign",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/tags.service",{"_index":977,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/upload",{"_index":1103,"title":{},"body":{"modules/UploadsModule.html":{}}}],["providers/users.service",{"_index":1168,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":402,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(poststatus)@isnotempty",{"_index":378,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":338,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{}}}],["query",{"_index":720,"title":{},"body":{"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["query'})@apiparam({name",{"_index":831,"title":{},"body":{"controllers/PostsController.html":{}}}],["query('limit",{"_index":1177,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":1179,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.dto",{"_index":582,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"injectables/PaginationProvider.html":{}}}],["query.dto.ts",{"_index":756,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:10",{"_index":762,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:6",{"_index":761,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["questions",{"_index":1330,"title":{},"body":{"index.html":{}}}],["read",{"_index":1372,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":53,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":1344,"title":{},"body":{"index.html":{}}}],["record",{"_index":277,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["ref",{"_index":777,"title":{},"body":{"classes/Post.html":{}}}],["reflect",{"_index":1272,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":271,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["refresh",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtoken",{"_index":562,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtokendto",{"_index":177,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["refreshtokendto.refreshtoken",{"_index":944,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokens",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["refreshtokens(@body",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(refreshtokendto",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["refreshtokensprovider",{"_index":236,"title":{"injectables/RefreshTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{},"overview.html":{}}}],["registered",{"_index":1152,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove",{"_index":1062,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["repository",{"_index":1303,"title":{},"body":{"index.html":{}}}],["request",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request[request_user_key",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requests",{"_index":736,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["requesttimeoutexception",{"_index":494,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UsersService.html":{}}}],["requesttimeoutexception('error",{"_index":501,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["requesttimeoutexception('unable",{"_index":928,"title":{},"body":{"injectables/PostsService.html":{}}}],["requesttimeoutexception(error",{"_index":508,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["required",{"_index":818,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":1323,"title":{},"body":{"index.html":{}}}],["response",{"_index":749,"title":{},"body":{"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{}}}],["results",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":377,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["route",{"_index":869,"title":{},"body":{"controllers/PostsController.html":{}}}],["run",{"_index":1308,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1275,"title":{},"body":{"dependencies.html":{}}}],["s3",{"_index":1043,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["salt",{"_index":304,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["scalable",{"_index":1297,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":376,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":789,"title":{},"body":{"classes/Post.html":{},"modules/PostsModule.html":{},"classes/Tag.html":{},"modules/TagsModule.html":{},"classes/Upload.html":{},"modules/UploadsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":790,"title":{},"body":{"classes/Post.html":{},"classes/Tag.html":{},"classes/Upload.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(post",{"_index":798,"title":{},"body":{"classes/Post.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(tag",{"_index":965,"title":{},"body":{"classes/Tag.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(upload",{"_index":1027,"title":{},"body":{"classes/Upload.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1138,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["sdk",{"_index":1045,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["secret",{"_index":559,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["secure",{"_index":666,"title":{},"body":{"modules/MailModule.html":{}}}],["senduserwelcome",{"_index":684,"title":{},"body":{"injectables/MailService.html":{}}}],["senduserwelcome(user",{"_index":688,"title":{},"body":{"injectables/MailService.html":{}}}],["series",{"_index":399,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":351,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":1095,"title":{},"body":{"controllers/UploadsController.html":{},"index.html":{}}}],["server'})@apiresponse({status",{"_index":1077,"title":{},"body":{"controllers/UploadsController.html":{}}}],["service",{"_index":858,"title":{},"body":{"controllers/PostsController.html":{}}}],["set",{"_index":868,"title":{},"body":{"controllers/PostsController.html":{}}}],["setmetadata(auth_type_key",{"_index":1410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1305,"title":{},"body":{"index.html":{}}}],["side",{"_index":1298,"title":{},"body":{"index.html":{}}}],["sign",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{}}}],["signed",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UploadsService.html":{}}}],["signin",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signin(@body",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signindto",{"_index":191,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["signindto.password",{"_index":958,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["signinprovider",{"_index":237,"title":{"injectables/SignInProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["signtoken",{"_index":541,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signtoken(userid",{"_index":545,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["size",{"_index":1013,"title":{},"body":{"classes/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{}}}],["skip((page",{"_index":1219,"title":{},"body":{"injectables/UsersService.html":{}}}],["skip(paginationquery.limit",{"_index":731,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["slug",{"_index":339,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/Post.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"injectables/TagsService.html":{}}}],["small",{"_index":367,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["social/google",{"_index":252,"title":{},"body":{"modules/AuthModule.html":{}}}],["social/providers/google",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":371,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/UploadToAwsProvider.html":{}}}],["specific",{"_index":897,"title":{},"body":{"injectables/PostsService.html":{}}}],["sponsors",{"_index":1368,"title":{},"body":{"index.html":{}}}],["src/.../active",{"_index":1396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.module.ts",{"_index":1399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth",{"_index":1279,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constants.ts",{"_index":1398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../file",{"_index":1281,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":1289,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post",{"_index":1283,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../post.schema.ts",{"_index":1400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tag.schema.ts",{"_index":1401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../upload.schema.ts",{"_index":1402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":1403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":164,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":166,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:33",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:49",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1192,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/config/jwt.config",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["src/auth/constants/auth.constants",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["src/auth/constants/auth.constants.ts",{"_index":1232,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/active",{"_index":854,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator",{"_index":1171,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":1234,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/refresh",{"_index":936,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts",{"_index":946,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts:11",{"_index":947,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dtos/signin.dto.ts:19",{"_index":949,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/enums/auth",{"_index":1172,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts",{"_index":266,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:21",{"_index":272,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:30",{"_index":273,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/interfaces/active",{"_index":79,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/CreatePostProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:22",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:26",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:9",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":292,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:12",{"_index":298,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:7",{"_index":301,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":538,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider",{"_index":495,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":644,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:6",{"_index":647,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:8",{"_index":646,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/refresh",{"_index":940,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["src/auth/providers/sign",{"_index":950,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["src/auth/social/dtos/google",{"_index":638,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["src/auth/social/google",{"_index":592,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["src/auth/social/providers/google",{"_index":610,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/common/pagination/dtos/pagination",{"_index":581,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/paginated.interface",{"_index":905,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/common/pagination/interfaces/paginated.interface.ts",{"_index":699,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.module",{"_index":881,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/common/pagination/pagination.module.ts",{"_index":713,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/providers/pagination.provider",{"_index":904,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/common/pagination/providers/pagination.provider.ts",{"_index":715,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:16",{"_index":721,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:9",{"_index":718,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/mail/mail.module.ts",{"_index":651,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/providers/mail.service",{"_index":497,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/mail/providers/mail.service.ts",{"_index":683,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/mail/providers/mail.service.ts:12",{"_index":689,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/providers/mail.service.ts:6",{"_index":687,"title":{},"body":{"injectables/MailService.html":{}}}],["src/main.ts",{"_index":1237,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":333,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/get",{"_index":571,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":765,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/post",{"_index":1287,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.schema.ts",{"_index":775,"title":{},"body":{"classes/Post.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/posts/post.schema.ts:15",{"_index":787,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.schema.ts:23",{"_index":782,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.schema.ts:29",{"_index":784,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.schema.ts:37",{"_index":785,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.schema.ts:43",{"_index":780,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.schema.ts:49",{"_index":781,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.schema.ts:55",{"_index":783,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.schema.ts:58",{"_index":778,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.schema.ts:61",{"_index":786,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":800,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:102",{"_index":845,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:129",{"_index":823,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:54",{"_index":834,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:75",{"_index":812,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":879,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/create",{"_index":415,"title":{},"body":{"injectables/CreatePostProvider.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":887,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:18",{"_index":890,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:35",{"_index":899,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:40",{"_index":891,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:45",{"_index":896,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:58",{"_index":902,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:83",{"_index":893,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":454,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":431,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":990,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:18",{"_index":994,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:33",{"_index":997,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:42",{"_index":996,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:8",{"_index":992,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.schema",{"_index":791,"title":{},"body":{"classes/Post.html":{}}}],["src/tags/tag.schema.ts",{"_index":961,"title":{},"body":{"classes/Tag.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/tags/tag.schema.ts:10",{"_index":962,"title":{},"body":{"classes/Tag.html":{}}}],["src/tags/tag.schema.ts:16",{"_index":963,"title":{},"body":{"classes/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":967,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:22",{"_index":972,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:34",{"_index":976,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":884,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":987,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/uploads/enums/file",{"_index":1286,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/uploads/interfaces/upload",{"_index":1029,"title":{},"body":{"interfaces/UploadFile.html":{},"coverage.html":{}}}],["src/uploads/providers/providers.service.ts",{"_index":1107,"title":{},"body":{"injectables/UploadsService.html":{},"coverage.html":{}}}],["src/uploads/providers/providers.service.ts:15",{"_index":1109,"title":{},"body":{"injectables/UploadsService.html":{}}}],["src/uploads/providers/providers.service.ts:28",{"_index":1111,"title":{},"body":{"injectables/UploadsService.html":{}}}],["src/uploads/providers/upload",{"_index":1032,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["src/uploads/upload.schema.ts",{"_index":1011,"title":{},"body":{"classes/Upload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/uploads/upload.schema.ts:13",{"_index":1017,"title":{},"body":{"classes/Upload.html":{}}}],["src/uploads/upload.schema.ts:20",{"_index":1018,"title":{},"body":{"classes/Upload.html":{}}}],["src/uploads/upload.schema.ts:28",{"_index":1021,"title":{},"body":{"classes/Upload.html":{}}}],["src/uploads/upload.schema.ts:35",{"_index":1015,"title":{},"body":{"classes/Upload.html":{}}}],["src/uploads/upload.schema.ts:42",{"_index":1019,"title":{},"body":{"classes/Upload.html":{}}}],["src/uploads/uploads.controller.ts",{"_index":1071,"title":{},"body":{"controllers/UploadsController.html":{},"coverage.html":{}}}],["src/uploads/uploads.controller.ts:38",{"_index":1080,"title":{},"body":{"controllers/UploadsController.html":{}}}],["src/uploads/uploads.module.ts",{"_index":1101,"title":{},"body":{"modules/UploadsModule.html":{}}}],["src/users/dtos/create",{"_index":467,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":587,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":771,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/interfaces/google",{"_index":643,"title":{},"body":{"interfaces/GoogleUser.html":{},"coverage.html":{}}}],["src/users/providers/create",{"_index":309,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["src/users/providers/find",{"_index":523,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreatePostProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["src/users/providers/users.service.ts",{"_index":1201,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:19",{"_index":1204,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:39",{"_index":1207,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:44",{"_index":1206,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:49",{"_index":1210,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:59",{"_index":1212,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:72",{"_index":1208,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:76",{"_index":1205,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.schema",{"_index":552,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/MailService.html":{},"classes/Post.html":{}}}],["src/users/user.schema.ts",{"_index":1129,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/user.schema.ts:12",{"_index":1131,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:18",{"_index":1133,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:24",{"_index":1130,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:31",{"_index":1135,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.schema.ts:37",{"_index":1132,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":1140,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:101",{"_index":1164,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:58",{"_index":1160,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:84",{"_index":1146,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":1191,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":1310,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1313,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1315,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":574,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["started",{"_index":1291,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1302,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1226,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":268,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["status",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["status.enum",{"_index":396,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{}}}],["status.enum.ts",{"_index":1284,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":1353,"title":{},"body":{"index.html":{}}}],["story",{"_index":350,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["strict",{"_index":682,"title":{},"body":{"modules/MailModule.html":{}}}],["string",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AppService.html":{},"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PatchPostDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":83,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["subject",{"_index":693,"title":{},"body":{"injectables/MailService.html":{}}}],["success",{"_index":809,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apibody({description",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@post('file",{"_index":1079,"title":{},"body":{"controllers/UploadsController.html":{}}}],["summary",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1331,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1383,"title":{},"body":{"modules.html":{}}}],["t",{"_index":548,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["table",{"_index":1251,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1250,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":440,"title":{"classes/Tag.html":{}},"body":{"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/Post.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag'})@apiresponse({status",{"_index":971,"title":{},"body":{"controllers/TagsController.html":{}}}],["tag.dto",{"_index":978,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":455,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:19",{"_index":457,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:32",{"_index":460,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.name",{"_index":796,"title":{},"body":{"classes/Post.html":{},"modules/TagsModule.html":{}}}],["tag.schema",{"_index":989,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tags",{"_index":340,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/Post.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags'})@apiresponse({status",{"_index":975,"title":{},"body":{"controllers/TagsController.html":{}}}],["tags.controller",{"_index":988,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":437,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["tags/tags.module",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["tagschema",{"_index":964,"title":{},"body":{"classes/Tag.html":{},"modules/TagsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tagscontroller",{"_index":966,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodel",{"_index":993,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsmodule",{"_index":111,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsservice",{"_index":419,"title":{"injectables/TagsService.html":{}},"body":{"injectables/CreatePostProvider.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["team",{"_index":692,"title":{},"body":{"injectables/MailService.html":{}}}],["template",{"_index":675,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["templates",{"_index":678,"title":{},"body":{"modules/MailModule.html":{}}}],["test",{"_index":1318,"title":{},"body":{"index.html":{}}}],["test:covresources",{"_index":1321,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1320,"title":{},"body":{"index.html":{}}}],["test@email.com",{"_index":486,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["test@email.com'})@isemail()@isnotempty",{"_index":472,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["tests",{"_index":1316,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1367,"title":{},"body":{"index.html":{}}}],["this.accesstokenguard",{"_index":278,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.authservice.refreshtokens(refreshtokendto",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(signindto",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type]).flat",{"_index":286,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.configservice.get('appconfig.awsbucketname",{"_index":1051,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.creategoogleuserprovider.creategoogleuser(googleuser",{"_index":1222,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.createpostprovider.createpost(createpostdto",{"_index":907,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.createuserprovider.createuser(createuserdto",{"_index":1214,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.extractrequestfromheader(request",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.findonebygoogleidprovider.findonebygoogleid(googleid",{"_index":1221,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findoneuserbyemailprovider.findonebyemail(email",{"_index":1213,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.generatefilename(file",{"_index":1053,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.generatetokensprovider.generatetokens(newuser",{"_index":637,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.generatetokensprovider.generatetokens(user",{"_index":635,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["this.googleauthenticationservice.authenticate(googletokendto",{"_index":609,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.hashingprovider.comparepassword",{"_index":957,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.hashingprovider.hashpassword(createuserdto.password",{"_index":506,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.jwtconfiguration",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":566,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.audience",{"_index":556,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.googleclientid",{"_index":622,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfiguration.googleclientsecret",{"_index":624,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfiguration.issuer",{"_index":558,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.refreshtokenttl",{"_index":569,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":560,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtservice.signasync",{"_index":554,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.verifyasync",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.mailerservice.sendmail",{"_index":690,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailservice.senduserwelcome(userobject",{"_index":521,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.oauthclient",{"_index":625,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.verifyidtoken",{"_index":628,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.paginationprovider.paginatequery(postquery",{"_index":910,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel",{"_index":448,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["this.postmodel.deleteone",{"_index":935,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.findbyid(patchpostdto.id",{"_index":911,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.findbyid(postid",{"_index":934,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.findone",{"_index":906,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.createpost(createpostdto",{"_index":863,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(id",{"_index":874,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(postquery",{"_index":862,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findonebyslug(createpostdto.slug",{"_index":443,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["this.postsservice.update(patchpostsdto",{"_index":870,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.reflector.getallandoverride(auth_type_key",{"_index":281,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.refreshtokensprovider.refreshtokens(refreshtokendto",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.headers.host",{"_index":739,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":738,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.signinprovider.signin(signindto",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken",{"_index":564,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.signtoken(user.id",{"_index":568,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.tagsmodel(createtagdto",{"_index":1005,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsmodel.find",{"_index":1007,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsmodel.findbyidanddelete(id).exec",{"_index":1008,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsmodel.findone",{"_index":1000,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.createtag(createtagdto",{"_index":982,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findall(createpostdto.tags",{"_index":435,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["this.tagsservice.findall(tags",{"_index":983,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.uploadsmodel(uploadfile",{"_index":1127,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.uploadsservice.uploadfile(file",{"_index":1098,"title":{},"body":{"controllers/UploadsController.html":{}}}],["this.uploadtoawsprovider.fileupload(file",{"_index":1123,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.usermodel",{"_index":505,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usermodel(googleuser",{"_index":328,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["this.usermodel.findone",{"_index":499,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{}}}],["this.usersmodel",{"_index":1218,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersmodel.findbyid(_id",{"_index":1215,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.creategoogleuser",{"_index":636,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":1186,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyemail(signindto.email",{"_index":954,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.usersservice.findonebygoogleid(googleid",{"_index":634,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.findonebyid(getuserparamdto.id",{"_index":1182,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid(sub",{"_index":945,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.usersservice.findonebyid(user.sub",{"_index":434,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["this.usersservice.getusers(getuserparamdto",{"_index":1183,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":1345,"title":{},"body":{"index.html":{}}}],["timeout",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["timeout'})@apibody({description",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["timestamp",{"_index":356,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UploadToAwsProvider.html":{}}}],["timestamps",{"_index":1024,"title":{},"body":{"classes/Upload.html":{}}}],["title",{"_index":341,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/Post.html":{}}}],["token",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{},"controllers/UploadsController.html":{}}}],["token.dto",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["token.dto.ts",{"_index":639,"title":{},"body":{"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:11",{"_index":641,"title":{},"body":{"classes/GoogleTokenDto.html":{}}}],["token.dto.ts:12",{"_index":938,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.guard",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:15",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:25",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:45",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["tokens",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens')@apibearerauth()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens'})@apiresponse({status",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens.provider",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["tokens.provider.ts",{"_index":539,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["tokens.provider.ts:11",{"_index":941,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:19",{"_index":549,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:28",{"_index":942,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:34",{"_index":544,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:9",{"_index":542,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["totalitems",{"_index":703,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpages",{"_index":705,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["touch",{"_index":1374,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":591,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/User.html":{},"dependencies.html":{}}}],["transport",{"_index":663,"title":{},"body":{"modules/MailModule.html":{}}}],["trim",{"_index":1065,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["true",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{},"modules/MailModule.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"classes/Tag.html":{},"classes/Upload.html":{},"classes/User.html":{}}}],["try",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["twitter",{"_index":1379,"title":{},"body":{"index.html":{}}}],["type",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"classes/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/Post.html":{},"controllers/UsersController.html":{}}}],["type.enum.ts",{"_index":1280,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["types",{"_index":774,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["types.enum",{"_index":1023,"title":{},"body":{"classes/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{}}}],["types.enum.ts",{"_index":1282,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typescript",{"_index":1301,"title":{},"body":{"index.html":{}}}],["ubique",{"_index":1058,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["unauthorizedexception",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["unauthorizedexception(error",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["undefined",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/Post.html":{},"controllers/TagsController.html":{},"classes/Upload.html":{},"miscellaneous/variables.html":{}}}],["undefined'])@apioperation({summary",{"_index":1075,"title":{},"body":{"controllers/UploadsController.html":{}}}],["unique",{"_index":451,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["unit",{"_index":1317,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1394,"title":{},"body":{"properties.html":{}}}],["unsupported",{"_index":1116,"title":{},"body":{"injectables/UploadsService.html":{}}}],["update",{"_index":843,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["update(patchpostdto",{"_index":901,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":840,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["updatepost",{"_index":804,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(id",{"_index":835,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":837,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["updating",{"_index":841,"title":{},"body":{"controllers/PostsController.html":{}}}],["upload",{"_index":1010,"title":{"classes/Upload.html":{}},"body":{"classes/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{}}}],["upload.name",{"_index":1106,"title":{},"body":{"modules/UploadsModule.html":{}}}],["upload.save",{"_index":1128,"title":{},"body":{"injectables/UploadsService.html":{}}}],["upload.schema",{"_index":1105,"title":{},"body":{"modules/UploadsModule.html":{},"injectables/UploadsService.html":{}}}],["uploaded",{"_index":1078,"title":{},"body":{"controllers/UploadsController.html":{},"injectables/UploadsService.html":{}}}],["uploadedfile",{"_index":1081,"title":{},"body":{"controllers/UploadsController.html":{}}}],["uploadfile",{"_index":1028,"title":{"interfaces/UploadFile.html":{}},"body":{"interfaces/UploadFile.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"coverage.html":{}}}],["uploadfile(@uploadedfile",{"_index":1097,"title":{},"body":{"controllers/UploadsController.html":{}}}],["uploadfile(file",{"_index":1073,"title":{},"body":{"controllers/UploadsController.html":{},"injectables/UploadsService.html":{}}}],["uploadresults",{"_index":1049,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uploadresults.key",{"_index":1056,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uploads",{"_index":1072,"title":{},"body":{"controllers/UploadsController.html":{}}}],["uploads.controller",{"_index":1102,"title":{},"body":{"modules/UploadsModule.html":{}}}],["uploads/uploads.module",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["uploadschema",{"_index":1026,"title":{},"body":{"classes/Upload.html":{},"modules/UploadsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uploadscontroller",{"_index":1070,"title":{"controllers/UploadsController.html":{}},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"coverage.html":{}}}],["uploadsmodel",{"_index":1110,"title":{},"body":{"injectables/UploadsService.html":{}}}],["uploadsmodule",{"_index":112,"title":{"modules/UploadsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UploadsModule.html":{},"modules.html":{},"overview.html":{}}}],["uploadsrepository",{"_index":1114,"title":{},"body":{"injectables/UploadsService.html":{}}}],["uploadsservice",{"_index":1086,"title":{"injectables/UploadsService.html":{}},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{},"overview.html":{}}}],["uploadtoawsprovider",{"_index":1031,"title":{"injectables/UploadToAwsProvider.html":{}},"body":{"injectables/UploadToAwsProvider.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{},"overview.html":{}}}],["upper",{"_index":1154,"title":{},"body":{"controllers/UsersController.html":{}}}],["uri",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["url",{"_index":372,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/PaginationProvider.html":{},"injectables/UploadsService.html":{}}}],["url\"'})@maxlength(512",{"_index":459,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["url''})@isstring()@isnotempty()@matches(/^[a",{"_index":363,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["url(this.request.url",{"_index":741,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["useclass",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["usefactory",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["useinterceptors",{"_index":1082,"title":{},"body":{"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":1184,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":1091,"title":{},"body":{"controllers/UploadsController.html":{}}}],["useinterceptors(undefined)@apibearerauth()@apiheaders(['undefined",{"_index":1074,"title":{},"body":{"controllers/UploadsController.html":{}}}],["user",{"_index":85,"title":{"classes/User.html":{}},"body":{"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.'})@apibearerauth()@apiresponse({status",{"_index":828,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.decorator",{"_index":855,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.decorator.ts",{"_index":1233,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":496,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":468,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:20",{"_index":476,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:30",{"_index":479,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:38",{"_index":473,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:46",{"_index":481,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":567,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/MailService.html":{}}}],["user.firstname",{"_index":695,"title":{},"body":{"injectables/MailService.html":{}}}],["user.id",{"_index":565,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["user.interface",{"_index":325,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/UsersService.html":{}}}],["user.interface.ts",{"_index":80,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleUser.html":{},"coverage.html":{}}}],["user.name",{"_index":795,"title":{},"body":{"classes/Post.html":{},"modules/UsersModule.html":{}}}],["user.password",{"_index":959,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.provider",{"_index":1197,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.provider.ts",{"_index":311,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:15",{"_index":319,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["user.provider.ts:16",{"_index":491,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:30",{"_index":493,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:8",{"_index":315,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["user.save",{"_index":329,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["user.schema",{"_index":322,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user?.[field",{"_index":1409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":550,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["usermodel",{"_index":316,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["userobject",{"_index":513,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["userobject._id",{"_index":516,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["userobject._id.tostring",{"_index":517,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["userobject.password",{"_index":520,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["users",{"_index":1141,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":1193,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["userschema",{"_index":1137,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":1139,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodel",{"_index":326,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UsersService.html":{}}}],["usersmodule",{"_index":113,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":258,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CreatePostProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":369,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["using",{"_index":1346,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":1048,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":1047,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uuidv4()}${extension",{"_index":1069,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["v4",{"_index":1046,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["valid",{"_index":355,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationschema",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":394,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"dependencies.html":{}}}],["value",{"_index":410,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":348,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["variable",{"_index":1229,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1395,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1392,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1339,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1327,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1341,"title":{},"body":{"index.html":{}}}],["void",{"_index":618,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["want",{"_index":817,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["watch",{"_index":1311,"title":{},"body":{"index.html":{}}}],["website",{"_index":1377,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":694,"title":{},"body":{"injectables/MailService.html":{}}}],["white",{"_index":1063,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["whose",{"_index":832,"title":{},"body":{"controllers/PostsController.html":{}}}],["without",{"_index":370,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["working",{"_index":1326,"title":{},"body":{"index.html":{}}}],["world",{"_index":168,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1356,"title":{},"body":{"index.html":{}}}],["yes",{"_index":551,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["you'd",{"_index":1371,"title":{},"body":{"index.html":{}}}],["z0",{"_index":364,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["zoom",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token/access-token.guard.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { REQUEST_USER_KEY } from 'src/auth/constants/auth.constants';\n\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  constructor(\n    /** Inject jwtService */\n    private readonly jwtService: JwtService,\n\n    /** Inject jwtConfiguration */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractRequestFromHeader(request);\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n\n    try {\n      const payload = await this.jwtService.verifyAsync(\n        token,\n        this.jwtConfiguration,\n      );\n      request[REQUEST_USER_KEY] = payload;\n    } catch (error) {\n      throw new UnauthorizedException(error);\n    }\n\n    return true;\n  }\n\n  private extractRequestFromHeader(request: Request): string | undefined {\n    const [_, token] = request.headers.authorization?.split(' ') ?? [];\n    return token;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActiveUserData.html":{"url":"interfaces/ActiveUserData.html","title":"interface - ActiveUserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/active-user.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveUserData {\n    // ID of user inside of database\n    sub: string;\n\n    // Email of user\n    email: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUploadsModule\n\nUploadsModule\n\nAppModule -->\n\nUploadsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UploadsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TagsModule } from './tags/tags.module';\nimport { PaginationModule } from './common/pagination/pagination.module';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\nimport jwtConfig from './auth/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthenticationGuard } from './auth/guards/authentication/authentication.guard';\nimport { AccessTokenGuard } from './auth/guards/access-token/access-token.guard';\nimport { UploadsModule } from './uploads/uploads.module';\nimport { MailModule } from './mail/mail.module';\n\nconst ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n      validationSchema: environmentValidation,\n    }),\n    AuthModule,\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        uri: configService.get('database.uri'),\n        dbName: configService.get('database.dbName'),\n      }),\n    }),\n    TagsModule,\n    PaginationModule,\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    UploadsModule,\n    MailModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    { provide: APP_GUARD, useClass: AuthenticationGuard },\n    AccessTokenGuard,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh-tokens')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get refresh tokens'})@ApiResponse({status: 200, description: 'Refresh tokens successfully'})@ApiBody({description: 'Body request to refresh tokens', type: RefreshTokenDto})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-in')@Auth(AuthType.None)@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'User Sign In'})@ApiResponse({status: 200, description: 'User successfully signed in'})@ApiResponse({status: 408, description: 'Request Timeout'})@ApiBody({description: 'Body request to sign in', type: SignInDto})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, Post, HttpStatus } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { ApiBearerAuth, ApiBody, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { SignInDto } from './dtos/signin.dto';\nimport { Auth } from './decorators/auth.decorator';\nimport { AuthType } from './enums/auth-type.enum';\nimport { RefreshTokenDto } from './dtos/refresh-token.dto';\n\n@Controller('auth')\n@ApiTags('Authentication')\nexport class AuthController {\n  constructor(\n    /** Inject authService */\n    private readonly authService: AuthService,\n  ) {}\n\n  @Post('sign-in')\n  @Auth(AuthType.None)\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'User Sign In' })\n  @ApiResponse({\n    status: 200,\n    description: 'User successfully signed in',\n  })\n  @ApiResponse({\n    status: 408,\n    description: 'Request Timeout',\n  })\n  @ApiBody({\n    description: 'Body request to sign in',\n    type: SignInDto,\n  })\n  public async signIn(@Body() signInDto: SignInDto) {\n    return await this.authService.signIn(signInDto);\n  }\n\n  @Post('refresh-tokens')\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get refresh tokens' })\n  @ApiResponse({\n    status: 200,\n    description: 'Refresh tokens successfully',\n  })\n  @ApiBody({\n    description: 'Body request to refresh tokens',\n    type: RefreshTokenDto,\n  })\n  public async refreshTokens(@Body() refreshTokenDto: RefreshTokenDto) {\n    return await this.authService.refreshTokens(refreshTokenDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokensProvider\n                        \n                        \n                            GoogleAuthenticationService\n                        \n                        \n                            RefreshTokensProvider\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { BcryptProvider } from './providers/bcrypt.provider';\nimport { SignInProvider } from './providers/sign-in.provider';\nimport { HashingProvider } from './providers/hashing.provider';\nimport jwtConfig from './config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { GenerateTokensProvider } from './providers/generate-tokens.provider';\nimport { RefreshTokensProvider } from './providers/refresh-tokens.provider';\nimport { GoogleAuthenticationController } from './social/google-authentication.controller';\nimport { GoogleAuthenticationService } from './social/providers/google-authentication.service';\n\n@Module({\n  controllers: [AuthController, GoogleAuthenticationController],\n  providers: [\n    AuthService,\n    {\n      provide: HashingProvider,\n      useClass: BcryptProvider,\n    },\n    SignInProvider,\n    GenerateTokensProvider,\n    RefreshTokensProvider,\n    GoogleAuthenticationService,\n  ],\n  exports: [AuthService, HashingProvider],\n  imports: [\n    forwardRef(() => UsersModule),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, signInProvider: SignInProvider, refreshTokensProvider: RefreshTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokensProvider\n                                                  \n                                                        \n                                                                        RefreshTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, forwardRef } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { SignInDto } from '../dtos/signin.dto';\nimport { SignInProvider } from './sign-in.provider';\nimport { RefreshTokenDto } from '../dtos/refresh-token.dto';\nimport { RefreshTokensProvider } from './refresh-tokens.provider';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    /** Inject usersService */\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n\n    /** Inject signInProvider */\n    private readonly signInProvider: SignInProvider,\n\n    /** Inject refreshTokensProvider */\n    private readonly refreshTokensProvider: RefreshTokensProvider\n  ) {}\n\n  public async signIn(signInDto: SignInDto) {\n    return await this.signInProvider.signIn(signInDto);\n  }\n\n  public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n   return await this.refreshTokensProvider.refreshTokens(refreshTokenDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authentication/authentication.guard.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication/authentication.guard.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AccessTokenGuard } from '../access-token/access-token.guard';\nimport { AuthType } from '../../enums/auth-type.enum';\nimport { AUTH_TYPE_KEY } from 'src/auth/constants/auth.constants';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  private static readonly defaultAuthType = AuthType.Bearer;\n  private readonly authTypeGuardMap: Record = {\n    [AuthType.Bearer]: this.accessTokenGuard,\n    [AuthType.None]: { canActivate: () => true },\n  };\n  constructor(\n    /** Inject reflector */\n    private readonly reflector: Reflector,\n\n    /** Inject accessTokenGuard */\n    private readonly accessTokenGuard: AccessTokenGuard,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const authTypes = this.reflector.getAllAndOverride(AUTH_TYPE_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]) ?? [AuthenticationGuard.defaultAuthType];\n\n    const guards = authTypes.map((type) => this.authTypeGuardMap[type]).flat();\n    \n    const error = new UnauthorizedException();\n\n    for (const instance of guards) {\n      const canActivate = await Promise.resolve(\n        instance.canActivate(context),\n      ).catch((err) => {\n        error: err;\n      });\n      if (canActivate) {\n        return true;\n      }\n    }\n    \n    throw error;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                comparePassword\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        comparePassword\n                        \n                    \n                \n            \n            \n                \ncomparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { HashingProvider } from './hashing.provider';\n\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n  public async hashPassword(data: string | Buffer): Promise {\n    const salt = await bcrypt.genSalt(10);\n    return bcrypt.hash(data, salt);\n  }\n\n  comparePassword(data: string | Buffer, encrypted: string): Promise {\n    return bcrypt.compare(data, encrypted);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateGoogleUserProvider.html":{"url":"injectables/CreateGoogleUserProvider.html","title":"injectable - CreateGoogleUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateGoogleUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-google-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-google-user.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-google-user.provider.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User } from '../user.schema';\nimport { Model } from 'mongoose';\nimport { GoogleUser } from '../interfaces/google-user.interface';\n\n@Injectable()\nexport class CreateGoogleUserProvider {\n  constructor(\n    /** Inject usersModel */\n    @InjectModel(User.name)\n    private readonly userModel: Model,\n  ) {}\n\n  public async createGoogleUser(googleUser: GoogleUser) {\n    try {\n      const user = new this.userModel(googleUser);\n      return await user.save();\n    } catch (error) {\n      throw new ConflictException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'Possible values  'post', 'page', 'story', 'series''})@IsEnum(PostType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Must be a valid timestamp in ISO8601', example: '2024-03-16T07:46:32+0000'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For example 'my-url''})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postStatus, description: 'Possible values 'draft', 'scheduled', 'review', 'published''})@IsEnum(postStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsArray()@IsOptional()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(4)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MinLength,\n} from 'class-validator';\nimport { PostType } from '../enums/post-type.enum';\nimport { postStatus } from '../enums/post-status.enum';\n\nexport class CreatePostDto {\n  @ApiProperty()\n  @IsString()\n  @MinLength(4)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostType,\n    description: \"Possible values  'post', 'page', 'story', 'series'\",\n  })\n  @IsEnum(PostType)\n  @IsNotEmpty()\n  postType: PostType;\n\n  @ApiProperty({\n    description: \"For example 'my-url'\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: postStatus,\n    description: \"Possible values 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsEnum(postStatus)\n  @IsNotEmpty()\n  status: postStatus;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  content?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    description: 'Must be a valid timestamp in ISO8601',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiProperty()\n  @IsArray()\n  @IsOptional()\n  @IsString({ each: true })\n  tags?: string[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreatePostProvider.html":{"url":"injectables/CreatePostProvider.html","title":"injectable - CreatePostProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreatePostProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/create-post.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postModel: Model, usersService: UsersService, tagsService: TagsService, postsService: PostsService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/create-post.provider.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsService\n                                                  \n                                                        \n                                                                        PostsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto, user: ActiveUserData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/create-post.provider.ts:38\n                        \n                    \n\n\n            \n                \n                        Create a new post\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Inject,\n  Injectable,\n  forwardRef,\n} from '@nestjs/common';\nimport { CreatePostDto } from '../dtos/create-post.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Post } from '../post.schema';\nimport { PostsService } from './posts.service';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user.interface';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { TagsService } from 'src/tags/providers/tags.service';\n\n@Injectable()\nexport class CreatePostProvider {\n  constructor(\n    /**\n     * Inject postModel\n     */\n    @InjectModel(Post.name)\n    private readonly postModel: Model,\n\n    /** Inject usersService */\n    private readonly usersService: UsersService,\n\n    /** Inject tagsService */\n    private readonly tagsService: TagsService,\n\n    /** Inject postsService */\n    @Inject(forwardRef(() => PostsService))\n    private readonly postsService: PostsService,\n  ) {}\n  \n  /** Create a new post */\n  public async createPost(createPostDto: CreatePostDto, user: ActiveUserData) {\n    let author = undefined;\n    let tags = undefined;\n\n    try {\n      author = await this.usersService.findOneById(user.sub);\n      tags = await this.tagsService.findAll(createPostDto.tags);\n    } catch (error) {\n      throw new ConflictException(error);\n    }\n\n    if (createPostDto.tags.length !== tags.length) {\n      throw new BadRequestException('Please check your tag Ids');\n    }\n\n    const existingPost = await this.postsService.findOneBySlug(createPostDto.slug);\n    if (existingPost) {\n      throw new BadRequestException('Post with this slug already exists');\n    }\n\n    const newPost = new this.postModel({\n        ...createPostDto,\n        author,\n        tags,\n      });\n  \n      try {\n        return await newPost.save();\n      } catch (error) {\n        throw new ConflictException(error, {\n          description: 'Ensure post slug is unique and not a duplicate',\n        });\n      }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of the tag', example: 'JavaScript'})@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The slug of the tag', example: 'javascript'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})@MaxLength(512)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty({\n    description: 'The name of the tag',\n    example: 'JavaScript',\n  })\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  @MaxLength(256)\n  name: string;\n\n  @ApiProperty({\n    description: 'The slug of the tag',\n    example: 'javascript',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  @MaxLength(512)\n  slug: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The email of the user', example: 'test@email.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The first name of the user', example: 'John'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The last name of the user', example: 'Doe'})@IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The password of the user', example: 'Password123#'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n    IsEmail,\n    IsNotEmpty,\n    IsOptional,\n    IsString,\n    MaxLength,\n    MinLength,\n  } from 'class-validator';\n  \n  export class CreateUserDto {\n    @ApiProperty({\n      description: 'The first name of the user',\n      example: 'John',\n    })\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(3)\n    @MaxLength(96)\n    firstName: string;\n  \n    @ApiProperty({\n      description: 'The last name of the user',\n      example: 'Doe',\n    })\n    @IsString()\n    @IsOptional()\n    @MinLength(3)\n    @MaxLength(96)\n    lastName?: string;\n  \n    @ApiProperty({\n      description: 'The email of the user',\n      example: 'test@email.com',\n    })\n    @IsEmail()\n    @IsNotEmpty()\n    email: string;\n  \n    @ApiProperty({\n      description: 'The password of the user',\n      example: 'Password123#',\n    })\n    @IsString()\n    @IsNotEmpty()\n    password: string;\n  }\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, hashingProvider: HashingProvider, mailService: MailService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-user.provider.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-user.provider.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  forwardRef,\n  RequestTimeoutException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User } from '../user.schema';\nimport { Model } from 'mongoose';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { MailService } from 'src/mail/providers/mail.service';\n\n@Injectable()\nexport class CreateUserProvider {\n  constructor(\n    /** Inject usersModel */\n    @InjectModel(User.name)\n    private readonly userModel: Model,\n\n    /** Inject hashingProvider */\n    @Inject(forwardRef(() => HashingProvider))\n    private readonly hashingProvider: HashingProvider,\n\n      /** Inject mailService */\n      private readonly mailService: MailService,\n  ) {}\n\n  public async createUser(createUserDto: CreateUserDto) {\n    let existingUser = undefined;\n\n    try {\n      existingUser = await this.userModel.findOne({\n        email: createUserDto.email,\n      });\n    } catch (error) {\n      throw new RequestTimeoutException('Error fetching user');\n    }\n\n    if (existingUser) {\n      throw new BadRequestException('User already exists');\n    }\n\n    let newUser = new this.userModel({\n      ...createUserDto,\n      password: await this.hashingProvider.hashPassword(createUserDto.password),\n    });\n\n    try {\n      newUser = await newUser.save();\n    } catch (error) {\n      throw new RequestTimeoutException(error);\n    }\n\n    // Convert the Mongoose document into a plain JavaScript object\n    const userObject = newUser.toObject();\n\n    // Convert _id to string\n    userObject._id = userObject._id.toString();\n\n    // Delete the password property\n    delete userObject.password;\n\n    try {\n      await this.mailService.sendUserWelcome(userObject);\n    } catch (error) {\n      throw new RequestTimeoutException(error);\n    }\n\n    return userObject;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneByGoogleIdProvider.html":{"url":"injectables/FindOneByGoogleIdProvider.html","title":"injectable - FindOneByGoogleIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneByGoogleIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-by-google-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-by-google-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-by-google-id.provider.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User } from '../user.schema';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class FindOneByGoogleIdProvider {\n  constructor(\n    /** Inject usersModel */\n    @InjectModel(User.name)\n    private readonly userModel: Model,\n  ) {}\n\n  public async findOneByGoogleId(googleId: string) {\n    return await this.userModel.findOne({ googleId });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneUserByEmailProvider.html":{"url":"injectables/FindOneUserByEmailProvider.html","title":"injectable - FindOneUserByEmailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneUserByEmailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-user-by-email.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-user-by-email.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-user-by-email.provider.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  RequestTimeoutException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { User } from '../user.schema';\nimport { InjectModel } from '@nestjs/mongoose';\n\n@Injectable()\nexport class FindOneUserByEmailProvider {\n  constructor(\n    /** Inject userModel */\n    @InjectModel(User.name)\n    private readonly userModel: Model,\n  ) {}\n\n  public async findOneByEmail(email: string) {\n    let user: User | undefined = undefined;\n    try {\n      user = await this.userModel.findOne({ email });\n    } catch (error) {\n      throw new RequestTimeoutException(error, {\n        description: 'Could not fetch user by email',\n      });\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokensProvider.html":{"url":"injectables/GenerateTokensProvider.html","title":"injectable - GenerateTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                            \n                                    Public\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-tokens.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: string, expiresIn: number, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:19\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../config/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { User } from 'src/users/user.schema';\nimport { ActiveUserData } from '../interfaces/active-user.interface';\n\n@Injectable()\nexport class GenerateTokensProvider {\n  constructor(\n    /** Inject jwtService */\n    private readonly jwtService: JwtService,\n\n    /** Inject jwtConfiguration */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  public async signToken(userId: string, expiresIn: number, payload?: T) {\n    return await this.jwtService.signAsync(\n      {\n        sub: userId,\n        ...payload,\n      },\n      {\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n        secret: this.jwtConfiguration.secret,\n        expiresIn,\n      },\n    );\n  }\n\n  public async generateTokens(user: User) {\n    const [accessToken, refreshToken] = await Promise.all([\n      this.signToken>(\n        user.id,\n        this.jwtConfiguration.accessTokenTtl,\n        {\n          email: user.email,\n        },\n      ),\n      this.signToken(user.id, this.jwtConfiguration.refreshTokenTtl),\n    ]);\n\n    return { accessToken, refreshToken };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsBaseDto.html":{"url":"classes/GetPostsBaseDto.html","title":"class - GetPostsBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from \"class-validator\";\nimport { ApiPropertyOptional, IntersectionType } from \"@nestjs/swagger\";\nimport { PaginationQueryDto } from \"src/common/pagination/dtos/pagination-query.dto\";\n\nclass GetPostsBaseDto {\n    @ApiPropertyOptional()\n    @IsDate()\n    @IsOptional()\n    startDate?: Date;\n\n    @ApiPropertyOptional()\n    @IsDate()\n    @IsOptional()\n    endDate?: Date;\n}\n\nexport class GetPostsDto extends IntersectionType(GetPostsBaseDto, PaginationQueryDto) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsDto.html":{"url":"classes/GetPostsDto.html","title":"class - GetPostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        IntersectionType(GetPostsBaseDto, PaginationQueryDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from \"class-validator\";\nimport { ApiPropertyOptional, IntersectionType } from \"@nestjs/swagger\";\nimport { PaginationQueryDto } from \"src/common/pagination/dtos/pagination-query.dto\";\n\nclass GetPostsBaseDto {\n    @ApiPropertyOptional()\n    @IsDate()\n    @IsOptional()\n    startDate?: Date;\n\n    @ApiPropertyOptional()\n    @IsDate()\n    @IsOptional()\n    endDate?: Date;\n}\n\nexport class GetPostsDto extends IntersectionType(GetPostsBaseDto, PaginationQueryDto) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-user-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-user-param.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from 'class-validator';\n\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  @Type(() => String)\n  id?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/google-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth/google-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Authenticate with Google'})@ApiBody({description: 'Google token to authenticate. This token is obtained from the Google Sign-In API', type: GoogleTokenDto})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body, Post } from '@nestjs/common';\nimport { GoogleAuthenticationService } from './providers/google-authentication.service';\nimport { GoogleTokenDto } from './dtos/google-token.dto';\nimport { Auth } from '../decorators/auth.decorator';\nimport { AuthType } from '../enums/auth-type.enum';\nimport { ApiBody, ApiOperation, ApiTags } from '@nestjs/swagger';\n\n@Auth(AuthType.None)\n@ApiTags('Google Authentication')\n@Controller('auth/google-authentication')\nexport class GoogleAuthenticationController {\n  constructor(\n    /** Inject googleAuthenticationService */\n    private readonly googleAuthenticationService: GoogleAuthenticationService,\n  ) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Authenticate with Google' })\n  @ApiBody({\n    description:\n      'Google token to authenticate. This token is obtained from the Google Sign-In API',\n    type: GoogleTokenDto,\n  })\n  public authenticate(@Body() googleTokenDto: GoogleTokenDto) {\n    return this.googleAuthenticationService.authenticate(googleTokenDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/providers/google-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                oauthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticate\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtConfiguration: ConfigType<>, usersService: UsersService, generateTokensProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/social/providers/google-authentication.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/social/providers/google-authentication.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  OnModuleInit,\n  forwardRef,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { OAuth2Client } from 'google-auth-library';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { GoogleTokenDto } from '../dtos/google-token.dto';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { GenerateTokensProvider } from 'src/auth/providers/generate-tokens.provider';\n\n@Injectable()\nexport class GoogleAuthenticationService implements OnModuleInit {\n  private oauthClient: OAuth2Client;\n  constructor(\n    /** Inject jwtConfiguration */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n\n    /** Inject usersService */\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n\n    /** Inject generateTokensProvider */\n    private readonly generateTokensProvider: GenerateTokensProvider,\n  ) {}\n\n  onModuleInit() {\n    const clientId = this.jwtConfiguration.googleClientId;\n    const clientSecret = this.jwtConfiguration.googleClientSecret;\n    this.oauthClient = new OAuth2Client(clientId, clientSecret);\n  }\n\n  public async authenticate(googleTokenDto: GoogleTokenDto) {\n    try {\n      const loginTicket = await this.oauthClient.verifyIdToken({\n        idToken: googleTokenDto.token,\n      });\n      const {\n        email,\n        sub: googleId,\n        given_name: firstName,\n        family_name: lastName,\n      } = loginTicket.getPayload();\n      const user = await this.usersService.findOneByGoogleId(googleId);\n\n      if (user) {\n        return this.generateTokensProvider.generateTokens(user);\n      }\n\n      const newUser = await this.usersService.createGoogleUser({\n        email,\n        firstName,\n        lastName,\n        googleId,\n      });\n\n      return this.generateTokensProvider.generateTokens(newUser);\n    } catch (error) {\n      throw new UnauthorizedException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleTokenDto.html":{"url":"classes/GoogleTokenDto.html","title":"class - GoogleTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/dtos/google-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Google token to authenticate. This token is obtained from the Google Sign-In API', example: 'eyJhbGciOiJSUzI1NiIsImtpZCI6IjQzZjMzZjI'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/social/dtos/google-token.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\n\nexport class GoogleTokenDto {\n  @ApiProperty({\n    description:\n      'Google token to authenticate. This token is obtained from the Google Sign-In API',\n    example: 'eyJhbGciOiJSUzI1NiIsImtpZCI6IjQzZjMzZjI',\n  })\n  @IsNotEmpty()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GoogleUser.html":{"url":"interfaces/GoogleUser.html","title":"interface - GoogleUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GoogleUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/google-user.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            firstName\n                                        \n                                \n                                \n                                        \n                                            googleId\n                                        \n                                \n                                \n                                        \n                                            lastName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        googleId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        googleId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface GoogleUser {\n  email: string;\n  firstName: string;\n  lastName: string;\n  googleId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePassword\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingProvider {\n\n    abstract hashPassword(data: string | Buffer): Promise;\n\n    abstract comparePassword(data: string | Buffer, encrypted: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MailModule_exports\n\n\n\n\nMailService \n\nMailService \n\n\n\nMailModule\n\nMailModule\n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { MailService } from './providers/mail.service';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { EjsAdapter } from '@nestjs-modules/mailer/dist/adapters/ejs.adapter';\nimport { join } from 'path';\n\n@Global()\n@Module({\n  imports: [MailerModule.forRootAsync({\n    inject: [ConfigService],\n    useFactory: async (config: ConfigService) => ({\n      transport: {\n        host: config.get('appConfig.mailHost'),\n        secure: false,\n        port: 2525,\n        auth: {\n          user: config.get('appConfig.smtpUsername'),\n          pass: config.get('appConfig.smtpPassword'),\n        }\n      },\n      defaults: {\n        from: `My Blog `\n      },\n      template: {\n        dir: join(__dirname, 'templates'),\n        adapter: new EjsAdapter({\n          inlineCssEnabled: true,\n        }),\n        options: {\n          strict: false,\n        }\n      }\n    })\n  })],\n  providers: [MailService],\n  exports: [MailService],\n})\nexport class MailModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/providers/mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                sendUserWelcome\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/providers/mail.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        sendUserWelcome\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendUserWelcome(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/providers/mail.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Injectable } from '@nestjs/common';\nimport { User } from 'src/users/user.schema';\n\n@Injectable()\nexport class MailService {\n  constructor(\n    /** Inject mailerService */\n    private readonly mailerService: MailerService,\n  ) {}\n\n  public async sendUserWelcome(user: User): Promise {\n    await this.mailerService.sendMail({\n      to: user.email,\n      from: `Onboarding Team `,\n      subject: 'Welcome to My Blog!',\n      template: './welcome',\n      context: {\n        name: user.firstName,\n        email: user.email,\n        loginUrl: 'http://localhost:3000',\n      },\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/interfaces/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  data: T[];\n  meta: {\n    itemsPerPage: number;\n    totalItems: number;\n    currentPage: number;\n    totalPages: number;\n  };\n  links: {\n    first: string;\n    last: string;\n    current: string;\n    next: string;\n    previous: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationProvider } from './providers/pagination.provider';\n\n@Module({\n  providers: [PaginationProvider],\n  exports: [PaginationProvider],\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/providers/pagination.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/providers/pagination.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(paginationQuery: PaginationQueryDto, model: Model, query?: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/providers/pagination.provider.ts:16\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                model\n                                            \n                                                        Model\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                query\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { Request } from 'express';\nimport { PaginationQueryDto } from '../dtos/pagination-query.dto';\nimport { Model } from 'mongoose';\nimport { REQUEST } from '@nestjs/core';\nimport { Paginated } from '../interfaces/paginated.interface';\n\n@Injectable()\nexport class PaginationProvider {\nconstructor(\n  /** Injecting request  */\n  @Inject(REQUEST)\n  private readonly request: Request,\n) {}\n\n  public async paginateQuery(\n    paginationQuery: PaginationQueryDto,\n    model: Model,\n    query?: { author: string },\n  ): Promise> {\n    let results = model\n      .find(query)\n      .populate('tags')\n      .populate('author')\n      .limit(paginationQuery.limit)\n      .skip(paginationQuery.limit * (paginationQuery.page - 1))\n      .exec();\n\n      // Creating requests URL\n      const baseUrl = this.request.protocol + '://' + this.request.headers.host + '/';\n      const newUrl = new URL(this.request.url, baseUrl);\n\n      // Calculating page number\n      const totalItems = await model.countDocuments(query);\n      const totalPages = Math.ceil(totalItems / paginationQuery.limit);\n      const nextPage = paginationQuery.page === totalPages ? paginationQuery.page : paginationQuery.page + 1;\n      const previousPage = paginationQuery.page === 1 ? paginationQuery.page : paginationQuery.page - 1;\n\n      // Create final response\n      const finalResponse: Paginated = {\n        data: await results,\n        meta: {\n          itemsPerPage: paginationQuery.limit,\n          totalItems,\n          currentPage: paginationQuery.page,\n          totalPages,\n        },\n        links: {\n          first: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=1`,\n          previous: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${previousPage}`,\n          next: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${nextPage}`,\n          last: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${totalPages}`,\n          current: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${paginationQuery.page}`,\n        },\n      };\n\n      return finalResponse;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/dtos/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from \"class-validator\";\n\nexport class PaginationQueryDto {\n    @IsOptional()\n    @IsPositive()\n    limit?: number = 10;\n\n    @IsOptional()\n    @IsPositive()\n    page?: number = 1;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The id of the post', example: '60f4f2b9c5f4e0001f000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreatePostDto } from './create-post.dto';\nimport { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'The id of the post',\n    example: '60f4f2b9c5f4e0001f000000',\n  })\n  id: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserDto } from './create-user.dto';\nimport { PartialType } from '@nestjs/mapped-types';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Post.html":{"url":"classes/Post.html","title":"class - Post","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.schema.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.schema.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.schema.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: true, enum: PostType, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date, isRequired: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.schema.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: true, enum: postStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.schema.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.schema.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.schema.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { Document } from 'mongoose';\n\nimport { PostType } from './enums/post-type.enum';\nimport { Tag } from 'src/tags/tag.schema';\nimport { User } from 'src/users/user.schema';\nimport { postStatus } from './enums/post-status.enum';\n\n@Schema()\nexport class Post extends Document {\n  @Prop({\n    type: String,\n    isRequired: true,\n  })\n  title: string;\n\n  @Prop({\n    type: String,\n    isRequired: true,\n    enum: PostType,\n    default: PostType.POST,\n  })\n  postType: PostType;\n\n  @Prop({\n    type: String,\n    isRequired: true,\n  })\n  slug: string;\n\n  @Prop({\n    type: String,\n    isRequired: true,\n    enum: postStatus,\n    default: postStatus.DRAFT,\n  })\n  status: postStatus;\n\n  @Prop({\n    type: String,\n    isRequired: false,\n  })\n  content?: string;\n\n  @Prop({\n    type: String,\n    isRequired: false,\n  })\n  featuredImageUrl?: string;\n\n  @Prop({\n    type: Date,\n    isRequired: false,\n  })\n  publishOn?: Date;\n\n  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: User.name })\n  author: User;\n\n  @Prop({ type: [{ type: mongoose.Schema.Types.ObjectId, ref: Tag.name }] })\n  tags?: Tag[];\n}\n\nexport const PostSchema = SchemaFactory.createForClass(Post);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                deletePost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto, user: ActiveUserData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new post for the blog.'})@ApiResponse({status: 201, description: 'You get a success 201 response if the post is created successfully'})@ApiBody({description: 'Body for creating a post', type: CreatePostDto})@Post()@ApiBearerAuth()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({summary: 'Deletes a post from the database.'})@ApiParam({name: 'id', description: 'The id of the post you want to delete', required: true, example: '60f1b3b3b3b3b3b3b3b3b3'})@ApiBearerAuth()@ApiResponse({status: 200, description: 'You get a success 200 response if the post is deleted'})@ApiResponse({status: 404, description: 'This the post does not exist'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string, postQuery: GetPostsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')@ApiOperation({summary: 'Gets all posts for a user.'})@ApiBearerAuth()@ApiResponse({status: 200, description: 'Posts fetched successfully based on the query'})@ApiParam({name: 'userId', description: 'The id of the user whose posts you want to fetch', required: false, example: '60f1b3b3b3b3b3b3b3b3b3b3'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postQuery\n                                            \n                                                            GetPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(id: string, patchPostsDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post in the database.'})@ApiResponse({status: 200, description: 'You get a success 200 response if the post is updated successfully'})@ApiBody({description: 'Body for updating a post', type: PatchPostDto})@ApiParam({name: 'id', description: 'The id of the post you want to update', required: true, example: '60f1b3b3b3b3b3b3b3b3b3'})@ApiBearerAuth()@Patch('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                patchPostsDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport {\n  ApiBearerAuth,\n  ApiBody,\n  ApiOperation,\n  ApiParam,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\nimport { GetPostsDto } from './dtos/get-posts.dto';\nimport { ActiveUser } from 'src/auth/decorators/active-user.decorator';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user.interface';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(\n    /*\n     *  Injecting Posts Service\n     */\n    private readonly postsService: PostsService,\n  ) {}\n\n  /*\n   * GET localhost:3000/posts/:userId\n   */\n  @Get('/:userId?')\n  @ApiOperation({\n    summary: 'Gets all posts for a user.',\n  })\n  @ApiBearerAuth()\n  @ApiResponse({\n    status: 200,\n    description: 'Posts fetched successfully based on the query',\n  })\n  @ApiParam({\n    name: 'userId',\n    description: 'The id of the user whose posts you want to fetch',\n    required: false,\n    example: '60f1b3b3b3b3b3b3b3b3b3b3',\n  })\n  public getPosts(\n    @Param('userId') userId: string,\n    @Query() postQuery: GetPostsDto,\n  ) {\n    return this.postsService.findAll(postQuery, userId);\n  }\n\n  @ApiOperation({\n    summary: 'Creates a new post for the blog.',\n  })\n  @ApiResponse({\n    status: 201,\n    description:\n      'You get a success 201 response if the post is created successfully',\n  })\n  @ApiBody({\n    description: 'Body for creating a post',\n    type: CreatePostDto,\n  })\n  @Post()\n  @ApiBearerAuth()\n  public createPost(\n    @Body() createPostDto: CreatePostDto,\n    @ActiveUser() user: ActiveUserData,\n  ) {\n    return this.postsService.createPost(createPostDto, user);\n  }\n\n  @ApiOperation({\n    summary: 'Updates an existing blog post in the database.',\n  })\n  @ApiResponse({\n    status: 200,\n    description:\n      'You get a success 200 response if the post is updated successfully',\n  })\n  @ApiBody({\n    description: 'Body for updating a post',\n    type: PatchPostDto,\n  })\n  @ApiParam({\n    name: 'id',\n    description: 'The id of the post you want to update',\n    required: true,\n    example: '60f1b3b3b3b3b3b3b3b3b3',\n  })\n  @ApiBearerAuth()\n  @Patch('/:id')\n  public async updatePost(\n    @Param('id') id: string,\n    @Body() patchPostsDto: PatchPostDto,\n  ) {\n    patchPostsDto.id = id; // set the _id property of patchPostsDto to the id from the route parameters\n    return await this.postsService.update(patchPostsDto);\n  }\n\n  @Delete('/:id')\n  @ApiOperation({\n    summary: 'Deletes a post from the database.',\n  })\n  @ApiParam({\n    name: 'id',\n    description: 'The id of the post you want to delete',\n    required: true,\n    example: '60f1b3b3b3b3b3b3b3b3b3',\n  })\n  @ApiBearerAuth()\n  @ApiResponse({\n    status: 200,\n    description: 'You get a success 200 response if the post is deleted',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'This the post does not exist',\n  })\n  public async deletePost(@Param('id') id: string) {\n    return await this.postsService.deletePost(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nCreatePostProvider\n\nCreatePostProvider\n\nPostsModule -->\n\nCreatePostProvider->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreatePostProvider\n                        \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Post, PostSchema } from './post.schema';\n\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\nimport { CreatePostProvider } from './providers/create-post.provider';\nimport { TagsModule } from 'src/tags/tags.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService, CreatePostProvider],\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Post.name,\n        schema: PostSchema,\n      },\n    ]),\n    UsersModule,\n    PaginationModule,\n    TagsModule,\n  ],\n  exports: [PostsService],\n})\nexport class PostsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createPost\n                            \n                            \n                                    Public\n                                    Async\n                                deletePost\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneBySlug\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postModel: Model, paginationProvider: PaginationProvider, createPostProvider: CreatePostProvider)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createPostProvider\n                                                  \n                                                        \n                                                                        CreatePostProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto, user: ActiveUserData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Create a new post\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(postId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:83\n                        \n                    \n\n\n            \n                \n                        Delete a post\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(postQuery?: GetPostsDto, userId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Get all posts or all posts of a specific user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postQuery\n                                            \n                                                            GetPostsDto\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneBySlug\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneBySlug(slug: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Find post by slug\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:58\n                        \n                    \n\n\n            \n                \n                        Update an existing post\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  RequestTimeoutException, Inject, forwardRef, Delete\n} from '@nestjs/common';\nimport { CreatePostDto } from '../dtos/create-post.dto';\nimport { Model } from 'mongoose';\nimport { Post } from '../post.schema';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { PatchPostDto } from '../dtos/patch-post.dto';\nimport { GetPostsDto } from '../dtos/get-posts.dto';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\nimport { CreatePostProvider } from './create-post.provider';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user.interface';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    /**\n     * Inject postModel\n     */\n    @InjectModel(Post.name)\n    private readonly postModel: Model,\n\n    /** Inject paginationProvider */\n    private readonly paginationProvider: PaginationProvider,\n\n    /** Inject createPostProvider */\n    @Inject(forwardRef(() => CreatePostProvider))\n    private readonly createPostProvider: CreatePostProvider,\n  ) {}\n\n  /** Find post by slug */\n  public async findOneBySlug(slug: string): Promise {\n    return this.postModel.findOne({ slug });\n  }\n\n  /** Create a new post */\n  public async createPost(createPostDto: CreatePostDto, user: ActiveUserData) {\n    return this.createPostProvider.createPost(createPostDto, user);\n  }\n\n/** Get all posts or all posts of a specific user */\npublic async findAll(postQuery?: GetPostsDto ,userId?: string): Promise> {\n  try {\n    let query: any={};\n    if (userId) {\n      query = { author: userId }; // if userId is provided, find posts where the author's id is userId\n    }\n    return await this.paginationProvider.paginateQuery(postQuery, this.postModel, query);\n  } catch (error) {\n    throw new RequestTimeoutException('Error fetching posts');\n  }\n}\n\n    /** Update an existing post */\n    public async update(patchPostDto: PatchPostDto) {\n      try {\n        const post = await this.postModel.findById(patchPostDto.id);\n        if (!post) {\n          throw new NotFoundException('The post ID does not exist');\n        }\n  \n        post.title = patchPostDto.title ?? post.title;\n        post.content = patchPostDto.content ?? post.content;\n        post.status = patchPostDto.status ?? post.status;\n        post.postType = patchPostDto.postType ?? post.postType;\n        post.slug = patchPostDto.slug ?? post.slug;\n        post.featuredImageUrl = patchPostDto.featuredImageUrl ?? post.featuredImageUrl;\n        post.publishOn = patchPostDto.publishOn ?? post.publishOn;\n  \n        await post.save();\n        return post;\n      } catch (error) {\n        throw new RequestTimeoutException('Unable to process your request at the moment please try later', {\n          description: 'Error connecting to the database',\n        });\n      }\n    }\n\n    /** Delete a post */\n    public async deletePost(postId: string) {\n      try {\n        const post = await this.postModel.findById(postId);\n        if (!post) {\n          throw new NotFoundException('The post ID does not exist');\n        }\n        await this.postModel.deleteOne({ _id: postId });\n        return post;\n      } catch (error) {\n        throw new RequestTimeoutException('Unable to process your request at the moment please try later', {\n          description: 'Error connecting to the database',\n        });\n      }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The refresh token of the user', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwiaWF0IjoxNjIyNzE4MzI2LCJleHAiOjE2MjI3MTgzMzZ9.6Z5KvQ8Y8r6v5Vp1v1VHv6Xx2bXlV9Z'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/refresh-token.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class RefreshTokenDto {\n  @ApiProperty({\n    description: 'The refresh token of the user',\n    example:\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwiaWF0IjoxNjIyNzE4MzI2LCJleHAiOjE2MjI3MTgzMzZ9.6Z5KvQ8Y8r6v5Vp1v1VHv6Xx2bXlV9Z',\n  })\n  @IsNotEmpty()\n  @IsString()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokensProvider.html":{"url":"injectables/RefreshTokensProvider.html","title":"injectable - RefreshTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/refresh-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>, generateTokensProvider: GenerateTokensProvider, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/refresh-tokens.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/refresh-tokens.provider.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, UnauthorizedException, forwardRef } from '@nestjs/common';\nimport { RefreshTokenDto } from '../dtos/refresh-token.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../config/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { ActiveUserData } from '../interfaces/active-user.interface';\n\n@Injectable()\nexport class RefreshTokensProvider {\n  constructor(\n    /** Inject jwtService */\n    private readonly jwtService: JwtService,\n\n    /** Inject jwtConfiguration */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n\n    /** Inject generateTokensProvider */\n    private readonly generateTokensProvider: GenerateTokensProvider,\n\n    /** Inject usersService */\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n\n  public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n    try {\n      const { sub } = await this.jwtService.verifyAsync>(\n        refreshTokenDto.refreshToken,\n        {\n          secret: this.jwtConfiguration.secret,\n          audience: this.jwtConfiguration.audience,\n          issuer: this.jwtConfiguration.issuer,\n        },\n      );\n      const user = await this.usersService.findOneById(sub);\n      return await this.generateTokensProvider.generateTokens(user);\n    } catch (error) {\n        throw new UnauthorizedException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/signin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The email of the user', example: 'test@email.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The password of the user', example: 'Password123#'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class SignInDto {\n  @ApiProperty({\n    description: 'The email of the user',\n    example: 'test@email.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    description: 'The password of the user',\n    example: 'Password123#',\n  })\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SignInProvider.html":{"url":"injectables/SignInProvider.html","title":"injectable - SignInProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, hashingProvider: HashingProvider, generateTokensProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.provider.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n  UnauthorizedException,\n  forwardRef,\n} from '@nestjs/common';\nimport { SignInDto } from '../dtos/signin.dto';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { HashingProvider } from './hashing.provider';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\n\n@Injectable()\nexport class SignInProvider {\n  constructor(\n    /** Inject usersService */\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n\n    /** Inject hashingProvider */\n    private readonly hashingProvider: HashingProvider,\n\n    /** Inject generateTokensProvider */\n    private readonly generateTokensProvider: GenerateTokensProvider,\n  ) {}\n\n  public async signIn(signInDto: SignInDto) {\n    let user = await this.usersService.findOneByEmail(signInDto.email);\n    let isEqual: boolean = false;\n    try {\n      isEqual = await this.hashingProvider.comparePassword(\n        signInDto.password,\n        user.password,\n      );\n    } catch (error) {\n      throw new RequestTimeoutException(error, {\n        description: 'Could not compare password',\n      });\n    }\n\n    return await this.generateTokensProvider.generateTokens(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tag.html":{"url":"classes/Tag.html","title":"class - Tag","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.schema.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema()\nexport class Tag extends Document {\n  @Prop({\n    type: String,\n    isRequired: true,\n  })\n  name: string;\n\n  @Prop({\n    type: String,\n    isRequired: true,\n  })\n  slug: string;\n}\n\nexport const TagSchema = SchemaFactory.createForClass(Tag);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createTag\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTag(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBearerAuth()@ApiOperation({summary: 'Create a new tag'})@ApiResponse({status: 201, description: 'Tag created successfully'})@ApiBody({description: 'Body request to create a new tag', type: CreateTagDto})\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(tags?: string[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiBearerAuth()@ApiOperation({summary: 'Get all tags'})@ApiResponse({status: 200, description: 'All tags fetched successfully'})@ApiBody({description: 'Query tags by tag ids', type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post } from '@nestjs/common';\nimport { ApiBearerAuth, ApiBody, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { TagsService } from './providers/tags.service';\nimport { CreateTagDto } from './dtos/create-tag.dto';\n\n@Controller('tags')\n@ApiTags('Tags')\nexport class TagsController {\n  constructor(\n    /** Inject tagsService */\n    private readonly tagsService: TagsService,\n  ) {}\n\n  @Post()\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Create a new tag' })\n  @ApiResponse({ status: 201, description: 'Tag created successfully' })\n  @ApiBody({\n    description: 'Body request to create a new tag',\n    type: CreateTagDto\n   })\n  public createTag(@Body() createTagDto: CreateTagDto) {\n    return this.tagsService.createTag(createTagDto);\n  }\n\n  @Get()\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get all tags' })\n  @ApiResponse({ status: 200, description: 'All tags fetched successfully' })\n  @ApiBody({\n    description: 'Query tags by tag ids',\n    type: [String],\n  })\n  public findAll(tags?: string[]) {\n    return this.tagsService.findAll(tags);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TagsService } from './providers/tags.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Tag, TagSchema } from './tag.schema';\n\n@Module({\n  controllers: [TagsController],\n  providers: [TagsService],\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Tag.name,\n        schema: TagSchema,\n      },\n    ]),\n  ],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTag\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTag(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:18\n                        \n                    \n\n\n            \n                \n                        Create a new tag\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:42\n                        \n                    \n\n\n            \n                \n                        Delete tag by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(tags?: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Get all tags\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateTagDto } from './../dtos/create-tag.dto';\nimport { BadRequestException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { Tag } from '../tag.schema';\nimport { InjectModel } from '@nestjs/mongoose';\n\n@Injectable()\nexport class TagsService {\n  constructor(\n    /**\n     * Inject tagsModel\n     */\n    @InjectModel(Tag.name)\n    private readonly tagsModel: Model,\n  ) {}\n\n   /** Create a new tag */\n   public async createTag(createTagDto: CreateTagDto) {\n    const existingTag = await this.tagsModel.findOne({ $or: [{ slug: createTagDto.slug }, { name: createTagDto.name }] });\n    if (existingTag) {\n      throw new BadRequestException('Tag with this slug or name already exists');\n    }\n\n    const newTag = new this.tagsModel(createTagDto);\n    try {\n      return await newTag.save();\n    } catch (error) {\n      throw new RequestTimeoutException(error);\n    }\n  }\n\n  /** Get all tags */\n  public async findAll(tags?: string[]) {\n    try {\n      return await this.tagsModel.find({ _id: { $in: tags } }).exec();\n    } catch (error) {\n      throw new RequestTimeoutException('Error fetching tags');\n    }\n  }\n\n  /** Delete tag by ID */\n  public async delete(id: string) {\n    try {\n      return await this.tagsModel.findByIdAndDelete(id).exec();\n    } catch (error) {\n      throw new RequestTimeoutException('Error deleting tag');\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Upload.html":{"url":"classes/Upload.html","title":"class - Upload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Upload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/upload.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                mime\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                path\n                            \n                            \n                                    \n                                size\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        mime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, maxlength: 128, isRequired: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.schema.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, maxlength: 1024, isRequired: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, maxlength: 1024, isRequired: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Number, maxlength: 1024, isRequired: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.schema.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, enum: fileTypes, default: undefined, isRequired: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.schema.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport { fileTypes } from './enums/file-types.enum';\n\n@Schema({ timestamps: true })\nexport class Upload extends Document {\n\n  @Prop({\n    type: String,\n    maxlength: 1024,\n    isRequired: true,\n  })\n  name: string;\n\n  @Prop({\n    type: String,\n    maxlength: 1024,\n    isRequired: true,\n  })\n  path: string;\n\n  @Prop({\n    type: String,\n    enum: fileTypes,\n    default: fileTypes.IMAGE,\n    isRequired: true,\n  })\n  type: string;\n\n  @Prop({\n    type: String,\n    maxlength: 128,\n    isRequired: true,\n  })\n  mime: string;\n\n  @Prop({\n    type: Number,\n    maxlength: 1024,\n    isRequired: true,\n  })\n  size: number;\n}\n\nexport const UploadSchema = SchemaFactory.createForClass(Upload);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadFile.html":{"url":"interfaces/UploadFile.html","title":"interface - UploadFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UploadFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/interfaces/upload-file.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mime\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mime:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         fileTypes\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         fileTypes\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { fileTypes } from \"../enums/file-types.enum\";\n\nexport interface UploadFile {\n    name: string;\n    path: string;\n    type: fileTypes;\n    mime: string;\n    size: number;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadToAwsProvider.html":{"url":"injectables/UploadToAwsProvider.html","title":"injectable - UploadToAwsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadToAwsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/providers/upload-to-aws.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                fileUpload\n                            \n                            \n                                    Private\n                                generateFileName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/uploads/providers/upload-to-aws.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        fileUpload\n                        \n                    \n                \n            \n            \n                \n                        \n                    fileUpload(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/upload-to-aws.provider.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateFileName\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateFileName(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/upload-to-aws.provider.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { S3 } from 'aws-sdk';\nimport * as path from 'path';\nimport { v4 as uuidv4 } from 'uuid';\n\n@Injectable()\nexport class UploadToAwsProvider {\n  constructor(\n    /** Inject configService */\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async fileUpload(file: Express.Multer.File) {\n    const s3 = new S3();\n\n    try {\n      const uploadResults = await s3\n        .upload({\n          Bucket: this.configService.get('appConfig.awsBucketName'),\n          Body: file.buffer,\n          Key: this.generateFileName(file),\n          ContentType: file.mimetype,\n        })\n        .promise();\n\n      return uploadResults.Key;\n    } catch (error) {\n        throw new RequestTimeoutException(error);\n    }\n  }\n\n  // Method for generate ubique key\n  private generateFileName(file: Express.Multer.File) {\n    // Extract file name from file itself\n    let name = file.originalname.split('.')[0];\n\n    // Remove white spaces from file name\n    name.replace(/\\s/g, '').trim();\n\n    // Extract extension from file name\n    let extension = path.extname(file.originalname);\n    // Generate timestamp\n    let timestamp = new Date().getTime().toString().trim();\n    // Return file uuid\n    return `${name}-${timestamp}-${uuidv4()}${extension}`;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UploadsController.html":{"url":"controllers/UploadsController.html","title":"controller - UploadsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UploadsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/uploads.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                uploads\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(undefined)@ApiBearerAuth()@ApiHeaders(['undefined', 'undefined'])@ApiOperation({summary: 'Upload a new image file to the server'})@ApiResponse({status: 200, description: 'Image uploaded successfully'})@Post('file')\n                \n            \n\n                    \n                        \n                            Defined in src/uploads/uploads.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport {\n  ApiHeaders,\n  ApiOperation,\n  ApiTags,\n  ApiResponse,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\nimport { Express } from 'express';\nimport { UploadsService } from './providers/providers.service';\n\n@ApiTags('Uploads images')\n@Controller('uploads')\nexport class UploadsController {\n  constructor(\n    /** Inject uploadsService */\n    private readonly uploadsService: UploadsService,\n  ) {}\n\n  @UseInterceptors(FileInterceptor('file'))\n  @ApiBearerAuth()\n  @ApiHeaders([\n    { name: 'Content-Type', description: 'multipart/form-data' },\n    { name: 'Authorization', description: 'Bearer token' },\n  ])\n  @ApiOperation({ summary: 'Upload a new image file to the server' })\n  @ApiResponse({\n    status: 200,\n    description: 'Image uploaded successfully',\n  })\n  @Post('file')\n  public uploadFile(@UploadedFile() file: Express.Multer.File) {\n    return this.uploadsService.uploadFile(file);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UploadsModule.html":{"url":"modules/UploadsModule.html","title":"module - UploadsModule","body":"\n                   \n\n\n\n\n    Modules\n    UploadsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UploadsModule\n\n\n\ncluster_UploadsModule_providers\n\n\n\n\nUploadToAwsProvider\n\nUploadToAwsProvider\n\n\n\nUploadsModule\n\nUploadsModule\n\nUploadsModule -->\n\nUploadToAwsProvider->UploadsModule\n\n\n\n\n\nUploadsService\n\nUploadsService\n\nUploadsModule -->\n\nUploadsService->UploadsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/uploads/uploads.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UploadToAwsProvider\n                        \n                        \n                            UploadsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UploadsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UploadsController } from './uploads.controller';\nimport { UploadsService } from './providers/providers.service';\nimport { UploadToAwsProvider } from './providers/upload-to-aws.provider';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Upload, UploadSchema } from './upload.schema';\n\n@Module({\n  controllers: [UploadsController],\n  providers: [UploadsService, UploadToAwsProvider],\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Upload.name,\n        schema: UploadSchema,\n      },\n    ]),\n  ],\n})\nexport class UploadsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadsService.html":{"url":"injectables/UploadsService.html","title":"injectable - UploadsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/providers/providers.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uploadsModel: Model, uploadToAwsProvider: UploadToAwsProvider, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/uploads/providers/providers.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uploadsModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadToAwsProvider\n                                                  \n                                                        \n                                                                        UploadToAwsProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/providers.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n} from '@nestjs/common';\nimport { Upload } from '../upload.schema';\nimport { UploadToAwsProvider } from './upload-to-aws.provider';\nimport { ConfigService } from '@nestjs/config';\nimport { UploadFile } from '../interfaces/upload-file.interface';\nimport { fileTypes } from '../enums/file-types.enum';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class UploadsService {\n  constructor(\n    /** Inject uploadsRepository */\n    @InjectModel(Upload.name)\n    private readonly uploadsModel: Model,\n\n    /** Inject uploadToAwsProvider */\n    private readonly uploadToAwsProvider: UploadToAwsProvider,\n\n    /** Inject configService */\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async uploadFile(file: Express.Multer.File) {\n    // throw error if unsupported MIME type\n    if (\n      !['image/gif', 'image/jpeg', 'image/jpg', 'image/png'].includes(\n        file.mimetype,\n      )\n    ) {\n      throw new BadRequestException('Unsupported file type');\n    }\n\n    try {\n      // Upload file to AWS cloud S3 bucket\n      const name = await this.uploadToAwsProvider.fileUpload(file);\n\n      // Genarate a signed URL for the uploaded file to database\n      const uploadFile: UploadFile = {\n        name,\n        path: `https://${this.configService.get('appConfig.awsCloudfrontUrl')}/${name}`,\n        type: fileTypes.IMAGE,\n        mime: file.mimetype,\n        size: file.size,\n      };\n\n      const upload = new this.uploadsModel(uploadFile);\n      return await upload.save();\n    } catch (error) {\n      throw new ConflictException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.schema.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, isRequired: false})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.schema.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Exclude } from 'class-transformer';\nimport { Document } from 'mongoose';\n\n@Schema()\nexport class User extends Document {\n\n  @Prop({\n    type: String,\n    isRequired: true,\n  })\n  firstName: string;\n\n  @Prop({\n    type: String,\n    isRequired: false,\n  })\n  lastName?: string;\n\n  @Prop({\n    type: String,\n    isRequired: true,\n  })\n  email: string;\n\n  @Prop({\n    type: String,\n    isRequired: false,\n  })\n  @Exclude()\n  password?: string;\n\n  @Prop({\n    type: String,\n    isRequired: false,\n  })\n  googleId?: string;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseInterceptors(ClassSerializerInterceptor)@Auth(AuthType.None)@ApiOperation({summary: 'Creates a new user on the application.'})@ApiResponse({status: 201, description: 'User created successfully'})@ApiBody({description: 'Body request to create a new user', type: CreateUserDto})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiBearerAuth()@ApiParam({name: 'id', description: 'The id of the user you want to fetch', required: false, example: '60f1b3b3b3b3b3b3b3b3b3b3'})@ApiOperation({summary: 'Fetches a list of registered users on the application.'})@ApiQuery({name: 'limit', type: String, description: 'The upper limit of pages you want the pagination to return', required: false})@ApiQuery({name: 'page', type: String, description: 'The position of the page number that you want the API to return', required: false})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiBearerAuth()@ApiOperation({summary: 'Updates a user on the application.'})@ApiResponse({status: 200, description: 'User updated successfully'})@ApiBody({description: 'Body request to update a user', type: PatchUserDto})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  DefaultValuePipe,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { UsersService } from './providers/users.service';\nimport { GetUsersParamDto } from './dtos/get-user-param.dto';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags, ApiBearerAuth, ApiParam, ApiBody } from '@nestjs/swagger';\nimport { Auth } from 'src/auth/decorators/auth.decorator';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(\n    /** Inject usersService */\n    private readonly usersService: UsersService,\n  ) {}\n\n  @Get('/:id?')\n  @ApiBearerAuth()\n  @ApiParam({\n    name: 'id',\n    description: 'The id of the user you want to fetch',\n    required: false,\n    example: '60f1b3b3b3b3b3b3b3b3b3b3',\n  })\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application.',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: String,\n    description: 'The upper limit of pages you want the pagination to return',\n    required: false,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: String,\n    description:\n      'The position of the page number that you want the API to return',\n    required: false,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully based on the query',\n  })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    if (getUserParamDto.id) {\n      return this.usersService.findOneById(getUserParamDto.id);\n    } else {\n      return this.usersService.getUsers(getUserParamDto, limit, page);\n    }\n  }\n\n  @Post()\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Auth(AuthType.None)\n  @ApiOperation({\n    summary: 'Creates a new user on the application.',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'User created successfully',\n  })\n  @ApiBody({\n    description: 'Body request to create a new user',\n    type: CreateUserDto,\n  })\n  public async createUser(@Body() createUserDto: CreateUserDto) {\n    return await this.usersService.createUser(createUserDto);\n  }\n\n  @Patch()\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Updates a user on the application.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'User updated successfully',\n  })\n  @ApiBody({\n    description: 'Body request to update a user',\n    type: PatchUserDto,\n  })\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUsersModule -->\n\nCreateGoogleUserProvider->UsersModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUsersModule -->\n\nFindOneByGoogleIdProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateGoogleUserProvider\n                        \n                        \n                            CreateUserProvider\n                        \n                        \n                            FindOneByGoogleIdProvider\n                        \n                        \n                            FindOneUserByEmailProvider\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { User, UserSchema } from './user.schema';\n\nimport { AuthModule } from 'src/auth/auth.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { FindOneUserByEmailProvider } from './providers/find-one-user-by-email.provider';\nimport { FindOneByGoogleIdProvider } from './providers/find-one-by-google-id.provider';\nimport { CreateGoogleUserProvider } from './providers/create-google-user.provider';\nimport { CreateUserProvider } from './providers/create-user.provider';\nimport profileConfig from './config/profile.config';\n\n@Module({\n  controllers: [UsersController],\n  providers: [\n    UsersService,\n    FindOneUserByEmailProvider,\n    FindOneByGoogleIdProvider,\n    CreateGoogleUserProvider,\n    CreateUserProvider,\n  ],\n  exports: [UsersService],\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: User.name,\n        schema: UserSchema,\n      },\n    ]),\n    forwardRef(() => AuthModule),\n    ConfigModule.forFeature(profileConfig)\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                            \n                                    Public\n                                    Async\n                                getUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersModel: Model, findOneUserByEmailProvider: FindOneUserByEmailProvider, findOneByGoogleIdProvider: FindOneByGoogleIdProvider, createGoogleUserProvider: CreateGoogleUserProvider, createUserProvider: CreateUserProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneUserByEmailProvider\n                                                  \n                                                        \n                                                                        FindOneUserByEmailProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneByGoogleIdProvider\n                                                  \n                                                        \n                                                                        FindOneByGoogleIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createGoogleUserProvider\n                                                  \n                                                        \n                                                                        CreateGoogleUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Create a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Find user by email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Find user by id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Get all users from database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  RequestTimeoutException,\n  forwardRef,\n} from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-user-param.dto';\nimport { User } from '../user.schema';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { FindOneUserByEmailProvider } from './find-one-user-by-email.provider';\nimport { FindOneByGoogleIdProvider } from './find-one-by-google-id.provider';\nimport { CreateGoogleUserProvider } from './create-google-user.provider';\nimport { GoogleUser } from '../interfaces/google-user.interface';\nimport { CreateUserProvider } from './create-user.provider';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    /** Inject userModel */\n    @InjectModel(User.name)\n    private readonly usersModel: Model,\n\n    /** Inject findOneUserByEmailProvider */\n    private readonly findOneUserByEmailProvider: FindOneUserByEmailProvider,\n\n    /** Inject findOneByGoogleIdProvider */\n    private readonly findOneByGoogleIdProvider: FindOneByGoogleIdProvider,\n\n    /** Inject createGoogleUserProvider */\n    private readonly createGoogleUserProvider: CreateGoogleUserProvider,\n\n    /** Inject createUserProvider */\n    private readonly createUserProvider: CreateUserProvider,\n  ) {}\n\n  /** Find user by email */\n  public async findOneByEmail(email: string) {\n    return await this.findOneUserByEmailProvider.findOneByEmail(email);\n  }\n\n   /** Create a new user */\n   public async createUser(createUserDto: CreateUserDto): Promise {\n    return await this.createUserProvider.createUser(createUserDto);\n  }\n\n  /** Find user by id */\n  public findOneById(_id: string) {\n    const user = this.usersModel.findById(_id);\n    if(!user) {\n      throw new BadRequestException('User not found');\n    }\n\n    return user;\n  }\n\n  /** Get all users from database */\n  public async getUsers(\n    getUsersParamDto: GetUsersParamDto,\n    limit: number = 10,\n    page: number = 1,\n  ): Promise {\n\n    return await this.usersModel\n      .find()\n      .skip((page - 1) * limit)\n      .limit(limit)\n      .exec();\n  }\n\n  public async findOneByGoogleId(googleId: string) {\n    return await this.findOneByGoogleIdProvider.findOneByGoogleId(googleId);\n  }\n\n  public async createGoogleUser(googleUser: GoogleUser) {\n    return await this.createGoogleUserProvider.createGoogleUser(googleUser);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constants.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constants.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/active-user.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/signin.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/interfaces/active-user.interface.ts\n            \n            interface\n            ActiveUserData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-tokens.provider.ts\n            \n            injectable\n            GenerateTokensProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/refresh-tokens.provider.ts\n            \n            injectable\n            RefreshTokensProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/social/dtos/google-token.dto.ts\n            \n            class\n            GoogleTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/google-authentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/providers/google-authentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/pagination/dtos/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pagination/providers/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/mail/providers/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsBaseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/post.schema.ts\n            \n            class\n            Post\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/posts/post.schema.ts\n            \n            variable\n            PostSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/providers/create-post.provider.ts\n            \n            injectable\n            CreatePostProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/tags/tag.schema.ts\n            \n            class\n            Tag\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tags/tag.schema.ts\n            \n            variable\n            TagSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/uploads/interfaces/upload-file.interface.ts\n            \n            interface\n            UploadFile\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/uploads/providers/providers.service.ts\n            \n            injectable\n            UploadsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/uploads/providers/upload-to-aws.provider.ts\n            \n            injectable\n            UploadToAwsProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/uploads/upload.schema.ts\n            \n            class\n            Upload\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/uploads/upload.schema.ts\n            \n            variable\n            UploadSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/uploads/uploads.controller.ts\n            \n            controller\n            UploadsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-user-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/interfaces/google-user.interface.ts\n            \n            interface\n            GoogleUser\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/providers/create-google-user.provider.ts\n            \n            injectable\n            CreateGoogleUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-by-google-id.provider.ts\n            \n            injectable\n            FindOneByGoogleIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-user-by-email.provider.ts\n            \n            injectable\n            FindOneUserByEmailProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                50 %\n                (4/8)\n            \n        \n        \n            \n                \n                src/users/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/mongoose : ^10.0.10\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            aws-sdk : ^2.1689.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            ejs : ^3.1.10\n        \n            google-auth-library : ^9.14.1\n        \n            joi : ^17.13.3\n        \n            mongoose : ^8.6.0\n        \n            nodemailer : ^6.9.15\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            uuid : ^10.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth-type.enum.ts)\n                        \n                        \n                            fileTypes   (src/.../file-types.enum.ts)\n                        \n                        \n                            postStatus   (src/.../post-status.enum.ts)\n                        \n                        \n                            PostType   (src/.../post-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/auth-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n    src/uploads/enums/file-types.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        fileTypes\n                    \n                \n                        \n                            \n                                 IMAGE\n                            \n                        \n                        \n                            \n                                Value : image\n                            \n                        \n            \n        \n\n    src/posts/enums/post-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/post-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UploadsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UploadsModule\n\n\n\ncluster_UploadsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUploadsModule\n\nUploadsModule\n\nAppModule -->\n\nUploadsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nCreatePostProvider\n\nCreatePostProvider\n\nPostsModule -->\n\nCreatePostProvider->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUploadToAwsProvider\n\nUploadToAwsProvider\n\nUploadsModule -->\n\nUploadToAwsProvider->UploadsModule\n\n\n\n\n\nUploadsService\n\nUploadsService\n\nUploadsModule -->\n\nUploadsService->UploadsModule\n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUsersModule -->\n\nCreateGoogleUserProvider->UsersModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUsersModule -->\n\nFindOneByGoogleIdProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    20 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    17 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../active-user.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.constants.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            PostSchema   (src/.../post.schema.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constants.ts)\n                        \n                        \n                            TagSchema   (src/.../tag.schema.ts)\n                        \n                        \n                            UploadSchema   (src/.../upload.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/active-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof ActiveUserData | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user: ActiveUserData = request[REQUEST_USER_KEY];\n    return field ? user?.[field] : user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) =>\n  SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n\n    src/auth/constants/auth.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n    src/posts/post.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PostSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Post)\n                    \n                \n\n\n        \n    \n\n    src/tags/tag.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TagSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Tag)\n                    \n                \n\n\n        \n    \n\n    src/uploads/upload.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UploadSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Upload)\n                    \n                \n\n\n        \n    \n\n    src/users/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
